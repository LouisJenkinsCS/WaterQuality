#All error messages are stored in here.
#Sun Feb 17 15:17:16 EST 2008

#0000 to 0999 are for Weather Client GUI Errors
#1000 to 2999 are available to to given a category
#3000 to 3999 are for Weather Station Errors
#4000 to 4999 are for Image Resource Errors
#5000 to 5999 are for Data Retrieval Errors
#6000 to 6999 are for Storage System Errors
#7000 to 7999 are for WeatherDB System Errors

 0=Weather Project Error
#Use -1 only if we have an inconsistent state in the JVM like 1 == 1 is false
-1=Inconsistent State -- Please Restart the Program

#0000 to 0999 are for Weather Client GUI Errors
#Errors 0001 thru 0003 and 0005 thru 0011 are not found in the program.
0001=Could not save student notes on the local machine.
0002=No notes were found on the local machine for this student.
0003=Could not load student notes. They were found, but possibly corrupted.
#GeneralServiceImpl.java#setDefaultWeatherResourcesForGUI():
0004=Unable to continue - No resources available from database.
0005=Attempted to download resource, but no resources were downloaded.
0006=Failed attempt to mail system administrators due to system crash.
0007=getData(String value) in DataFilter.java throws Exception if value is not in date format.
0008=Could not save student notes.
0009=No notes were found on the local machine for this user.
0010=Could not load student notes. They were found, but possibly corrupted.
0011=Unable to continue - No resources available from database.
#MySQLCourseManager.java#obtainAllCourses():
#MySQLCourseManager.java#obtainCourse(int department, int course, int section):
#MySQLCourseManager.java#removeCourse(Course course):
#MySQLCourseManager.java#updateCourse(Course course):
#MySQLCourseManager.java#insertCourse(Course course):
#MySQLEnrollmentManager.java#getCoursesForStudent(User student):
#MySQLEnrollmentManager.java#getCoursesForInstructor(User instructor):
#MySQLEnrollmentManager.java#getStudentsInCourse(Course course):
#MySQLEnrollmentManager.java#insertStudentIntoCourse(User student, Course course):
#MySQLEnrollmentManager.java#removeStudentFromCourse(User student, Course course):
#MySQLNoteManager.java#getAllNotes():
#MySQLNoteManager.java#getNotesByInstructor(User instructor):
#MySQLNoteManager.java#getNotesByType(NotesType type):
#MySQLNoteManager.java#getNotesForTimespan(Date currentDateTime):
#MySQLNoteManager.java#removeNote(InstructorNote note):
#MySQLNoteManager.java#updateNote(InstructorNote note):
#MySQLNoteManager.java#insertNote(InstructorNote note):
#MySQLResourceManager.java#getResourceList():
#MySQLResourceManager.java#getWeatherResourceById(int resourceId):
#MySQLResourceManager.java#updateWeatherResource(Resource resource):
#MySQLResourceManager.java#removeResource(int resourceID):
#MySQLUserManager#addUser(User newUser):
#MySQLUserManager#updateUser(User myUser, int userID):
#MySQLUserManager#removeUser(String userLoginID):
#MySQLUserManager#removeUser(int userID):
0012=SQL Exception. There may be an error in SQL syntax.  Check the SQL syntax near the origination of this exception.
#MySQLCourseManager.java#obtainAllCourses():
#MySQLCourseManager.java#obtainCourse(int department, int course, int section):
#MySQLCourseManager.java#removeCourse(Course course):
#MySQLCourseManager.java#updateCourse(Course course):
#MySQLCourseManager.java#insertCourse(Course course):
#MySQLEnrollmentManager.java#getCoursesForStudent(User student):
#MySQLEnrollmentManager.java#getCoursesForInstructor(User instructor):
#MySQLEnrollmentManager.java#getStudentsInCourse(Course course):
#MySQLEnrollmentManager.java#insertStudentIntoCourse(User student, Course course):
#MySQLEnrollmentManager.java#removeStudentFromCourse(User student, Course course):
#MySQLNoteManager.java#getAllNotes():
#MySQLNoteManager.java#getNotesByInstructor(User instructor):
#MySQLNoteManager.java#getNotesByType(NotesType type):
#MySQLNoteManager.java#getNotesForTimespan(Date currentDateTime):
#MySQLNoteManager.java#removeNote(InstructorNote note):
#MySQLNoteManager.java#updateNote(InstructorNote note):
#MySQLNoteManager.java#insertNote(InstructorNote note):
#MySQLResourceManager.java#getWeatherResourceById(int resourceId):
#MySQLResourceManager.java#updateWeatherResource(Resource resource):
#MySQLResourceManager.java#removeResource(int resourceID):
#MySQLUserManager#obtainAllUsers():
#MySQLUserManager#obtainUser(String userFirstName, String userLastName):
#MySQLUserManager#obtainUser(int userID):
#MySQLUserManager#obtainUser(String userLoginID):
#MySQLUserManager#addUser(User newUser):
#MySQLUserManager#updateUser(User myUser, int userID):
#MySQLUserManager#removeUser(String userLoginID):
#MySQLUserManager#removeUser(int userID):
0013=SQL Exception occurred while attempting to close database connection.  If this problem persists, database errors may occur.
#MySQLResourceManager.java#getResourceList():
#MySQLResourceManager.java#getWeatherResourceById(int resourceId):
0014=SQL Exception occurred while attempting to close database connection.  If this problem persists, database errors may occur.
#weather.MainProgram.java #main(String[] args):
0015=ClassNotFoundException. Missing expected class. Please obtain the current version of program.
#weather.MainProgram.java #main(String[] args):
0016=InstantiationException. Instantiation failed.
#weather.MainProgram.java #main(String[] args):
0017=IllegalAccessException. Program has just attempted to access something it shouldn't have.
#Main program 
0018=Out of Memory Error. Program used all available memory.

0019=Could not load Daily Diary file. The file was found, but possibly corrupted.

0020=SQL Script parsing error


#weather.common.dbms.mysql.DESEncryptor.java #encrypt(SecretKey key, String str):
#weather.common.dbms.mysql.DESEncryptor.java #decrypt(SecretKey key, String str):
0100=IllegalBlockSizeException is thrown while trying to encrypt or decrypt the database access password.
#weather.common.dbms.mysql.DESEncryptor.java #encrypt(SecretKey key, String str):
#weather.common.dbms.mysql.DESEncryptor.java #decrypt(SecretKey key, String str):
0101=InvalidKeyException is thrown while trying to encrypt or decrypt the database access password.
#weather.common.dbms.mysql.DESEncryptor.java #encrypt(SecretKey key, String str):
#weather.common.dbms.mysql.DESEncryptor.java #decrypt(SecretKey key, String str):
#weather.common.dbms.mysql.DESEncryptor.java #generateKey():
#weather.common.dbms.mysql.DESEncryptor.java #writeKey(SecretKey key, File f):
#weather.common.dbms.mysql.DESEncryptor.java #readKey(File f):
0102=NoSuchAlgorithmException is thrown while trying to encrypt or decrypt the database access password.
#weather.common.dbms.mysql.DESEncryptor.java #encrypt(SecretKey key, String str):
#weather.common.dbms.mysql.DESEncryptor.java #decrypt(SecretKey key, String str):
0103=NoSuchPaddingException is thrown while trying to encrypt or decrypt the database access password.
#weather.common.dbms.mysql.DESEncryptor.java #encrypt(SecretKey key, String str):
#weather.common.dbms.mysql.DESEncryptor.java #decrypt(SecretKey key, String str):
0104=javax.crypto.BadPaddingException is thrown while trying to encrypt or decrypt the database access password.
#weather.common.dbms.mysql.DESEncryptor.java #encrypt(SecretKey key, String str):
#weather.common.dbms.mysql.DESEncryptor.java #decrypt(SecretKey key, String str):
#weather.common.dbms.mysql.DESEncryptor.java #writeKey(SecretKey key, File f):
#weather.common.dbms.mysql.DESEncryptor.java #readKey(File f):
0105=IOException is thrown while trying to encrypt or decrypt the database access password.
#weather.common.dbms.mysql.DESEncryptor.java #writeKey(SecretKey key, File f):
#weather.common.dbms.mysql.DESEncryptor.java #readKey(File f):
0106=InvalidKeySpecException is thrown while trying to write or read the secret key to the file.
#weather.common.dbms.mysql.DESEncryptor.java #writeKey(SecretKey key, File f):
0107=IOException is thrown while trying to close the file output stream.
0108=The directory specified either does not exist or is not a valid directory.
0109=The Object is corrupted and cannot be opened.
0110=An I/O exception of some sort has occurred.

#3000 to 3999 are for Weather Station Errors
#WeatherStationInstance#readFromDailyLogURL(String url): the string passed contains an unsupported protocol, or could not be parsed.
3000=Error reading from specified URL.
#WeatherStationInstance#appendToVector(URL url): either the URL does not exist or there is corrupted data.
3001=Error reading from specified URL.
#WeatherStationInstance#convertDailyLogString(String dailyLog): the log file was of an incompatible type or could not be found.
3002=Incorrect log file format.
#WeatherStationInstance#convertHourlyLogString(String dailyLog): the log file was of an incompatible type or could not be found.
3003=Incorrect log file format.
#WeatherStationInstance#readFile(File file): the file specified could not be found.
3004=Error accessing file.
#WeatherStationInstance#readFile(File file): could not read from file due to corrupt data.
3005=Error reading text from file.
#WeatherStationInstance#readURL(URL url): could not read from url due to corrupt data.
3006=Error reading from the URL.
#WeatherStationInstance#readFromHourlyLogURL(String url): the string passed contains an unsupported protocol, or could not be parsed.
3007=Error reading from specified URL.
#WeatherStationInstance#writeFile(File file): the file location could not be found or there was corrupted data.
3008=Error writing to weather station values file.
#WeatherStationSpecifier#createPropertyFile(): the file specified could not be found.
3009=Error attempting to access the properties file.
#WeatherStationSpecifier#createPropertyFile(): attempted to write corrupt data to the file.
3010=Error writing to the properties file.
#TextFileInstance#writeFile(File file): the file specified could not be found.
3011=Error attempting to access the specified file.
#TextFileInstance#readFile(File file): there was corruption in the data attemping to be read.
3012=Error reading from the specified file.
#TextFileInstance#readURL(URL url): could not read from the url. the data was corrupt.
3013=Error reading from the specified URL.
#TextFileInstance#readUserSpecifiedFile(): failed to read data from the file passed. The data was corrupt.
3014=Error reading from the specified file.
#WeatherVariableProperties#getLogURL(): read in a malformed URL from the properties file.
#WebLink#getURL():a WebLink object has an incorrect URL.
3015=Found malformed URL.
#WeatherVariableProperties#distributeVariableColors(): failed to write to the file passed. The file did not exist.
3016=Error writing to the specified file.
#WeatherVariableProperties#distributeVariableColors(): failed to write to the file passed. The data was corrupt.
3017=Error writing to the specified file.
#WeatherVariableProperties#getProperties(String propertiesFilePath): failed to read data from the file passed. The file did not exist.
3018=Error reading from the specified properties file.
#WeatherVariableProperties#getProperties(String propertiesFilePath): failed to read data from the file passed. The data was corrupt.
3019=Error reading from the specified properties file.
#ZipManager.compress(String s): Error compressing string
3020=Error compressing weather station data.
#ZipManager.decompress(String s): Error decompressing a string due to corruption, invalid compression
3021=Error decompressing weather station data, file was either corrupt or not compressed correctly.
#4000 to 4999 are for Image Resource Errors

#Errors 4005, 4102, and 4103 are not found in the program and are available for use.

#--The file could be in use.
4000=I/O error occurred while writing the movie byte array to the specified file.
#weather.common.data.resource.ImageInstance #writeToFile(File file)
#--The image could not be written. The file may be in use.
4001=I/O Error occurred while writing image to specified file.
#weather.common.data.resource.ImageInstance #getImage()
#--A FileOutputStream might have not been able to be initialized with the file
#--specified.
4002=I/O error occurred while returning a Movie or Image instance from byte array.
#weather.common.data.resource.ImageInstance #readFile(File file)
#--The file may not exist or the file could be in use.
4003=Error reading file and converting it to a byte array.

4004=Movie instance file was not found.
#TextFileInstance#writeFile(File): failed to read the data from the file passed. The data was corrupt.
4006=TextFile failed to write values to a file.
#TextFileInstance#readFile(File) failed to read the data from the file passed.  The file did not exist.
4007=Failed to read from text file.
#TextFileInstance#readUserSpecifiedFile(): failed to read the data from the file passed. The file did not exist.
4008=Error reading daily log file.
#Problem accessing database in common.dbms.Database#getConnection(File).  This could have been a bad url or the server was down.
4009=Database access error occurred.
#Class not found when attempting to instanciate a class using reflection in common.dbms.Database#getConnection(File).  The name of the class to instanciate is pulled from property file passed to the method as a parameter.
4010=Class described in property file was not found \nto instantiate a connection with the database
#There was an IO exception found in common.dbms.Database#getConnection(File) while parsing the property file.  The file may be corrupt or the file passed was not found or not an ascii file.
4011=IO Exception while reading properties file.
#There was SQLException thrown while making a connection to the database in common.dbms.MySQLImpl#makeConnection()
#MySQLImpl#makeConnection():
#weather.common.dbms.mysql.CreateNewDatabaseInstanceImpl.CreateDatabase():
4012=Error in connecting to database.
#There was a SQLException thrown while creating the tables in the database in common.dbms.MySQLImpl#makeTable()
4013=Error creating database tables.
#There was a SQLException thrown while inserting default users into the database.
#MySQLImpl#insertDefaultUsers():
4014=Error inserting default users into database.
#SQLException thrown while attempting to load all of the users from the database in common.dbms.MySQLImpl#makeTable().
#MySQLImpl#makeTable():
4015=Error loading users from database.
#SQLException thrown while obtaining a user based on first and last name from the database in common.dbms.MySQLImpl#obtainUser(String,String)
#MySQLImpl#obtainUser(String,String):
4016=Error loading user from database.
#SQLException thrown while obtaining a user based on userID from the database in common.dbms.MySQLImpl#obtainUser(int).
#MySQLImpl#obtainUser(int):
4017=Error loading user from database.
#SQLException thrown while obtaining a user based on loginId from the database in common.dbms.MySQLImpl#obtainUser(String).
#MySQLImpl#obtainUser(String):
4018=Error loading user from database.
#Error loading the common.dbms.MySQLPropertiesSingleton in its constructor, there may be an error in the file or the file may not exist.
4019=Error loading properties file containing database information.
#Class not found when attempting to use reflection to generate an instance of a class in weather.serverside.applicationimpl.StorageControlSystemImpl#getResourceInstances(), whos name is stored in the projects general properties file.
#StorageControlSystemImpl#getResourceInstances():
4020=Class not found in project
#Failed to make connection with host weather.serverside.applicationimpl.StorageControlSystemImpl#getResourceInstances()
#StorageControlSystemImpl#getResourceInstances():
4021=Failed to make connection with host.
#Failed to serialize file in weather.serverside.applicationimpl.StorageControlSystemImpl#getResourceInstances().
#StorageControlSystemImpl#getResourceInstances():
4022=File IO exception.
#StorageControlSystemImpl#placeResourceInstance(ResourceInstance resource):
#StorageControlSystemImpl#getResourceInstances(ResourceInstancesRequested request):UnknownHost Exception
#StorageControlSystemImpl#getResourceInstances(ResourceInstancesRequested request):IO Exception
#StorageControlSystemImpl#reloadResourceList():UnknownHost Exception
#StorageControlSystemImpl#reloadResourceList():IO Exception
4023=Storage System unreachable! The Storage server is not responding, and may be down.  Please contact the system administrator to start/restart the storage server or check the server error logs.

#--The file it is trying to be written to could be in use. Or not found.
4024=Error converting movie byte array to a java.io.File.
#--In ImageVideoMaker.
4025=Error returning Movie File.
#weather.serverside.applicationImpl.StorageControlSystemImpl #placeResourceInstance(ResourceInstance resource)
4026=Storage System unreachable! The Storage server was reached, but no Storage System process was running to communicate with.  Please contact the system administrator to start/restart the Storage System.

4027=Unknown movie error.
4028=Error occurred while trying to create an AVI.

#--The picture could not be exported to the hard disk.  Make sure user has appropriate read/write access.
4100=Could not export picture to hard disk.  Make sure you have read/write access to the destination.

4101=Unable to create temporary file.
#weather.clientside.gui.client #createDataPlotSnapshot()
4104=There was a problem getting a snapshot of the data plot.

4105=There was an I/O Exception while trying to write the BufferedImage to a temporary file.
#weather.common.dbms.mysql.MySQLResourceManager.java #setNighttimePicture(int resourceID, ImageInstance imageInstance)
#weather.common.dbms.mysql.MySQLResourceManager.java #setDefaultPicture(int resourceID, ImageInstance imageInstance)
#weather.common.dbms.mysql.MySQLResourceManager.java #setDefaultImages(int resourceID, ImageInstance nighttimeImage, ImageInstance defaultImage)
4106=There was an I/O Exception while trying to close an input stream.

#5000 to 5999 are for Data Retrieval Errors
#AdminServiceImpl.java#downloadImage(String url, String dest):MalformedURLException
#AdminServiceImpl.java#downloadImage(String url, String dest):FileNotFoundException
5001=Error Downloading image from URL: bad URL provided
#AdminServiceImpl.java#downloadImage(String url, String dest):IOException
5002=Error Downloading image from URL
#ImageInstance.java#readURL(String url):IOException
5003=Connection timed out while connecting to URL.
#ImageInstance.java#readURL(String url):IOException
5004=Error reading from URL. Connection may have been interrupted.

#6000 to 6999 are for Storage System Errors
#StorageRequestHandlerImp.java#provide(StorageCommand command):
6001=The Resource that was retrieved from StorageManagement was null.  This is likely due to an invalid resource ID specified in the Command argument.

6002=Unable to connect to the server.

6003=Unable to locate the root of the file system.
#StorageManagement.java#createAndStoreNoDataMOV(ResourceInstance picture)
#StorageManagement.java#createAndStoreNoDataAVI(ResourceInstance picture)
#StorageManagement.java#createAndStoreDefaultMovieFile(resourceID, command)
6004=Failed to make connection with Movie System host.
6005=I/O Exception while communicating with the Movie System.
#In storage management -- want to make a movie, but not given an ImageInstance
6006=Object type mismatch. We wanted an ImageInstance to make a Video.
#For methods handling storage requests.
6007=Storage command missing data.
#In storage management -- want to make a movie, but not given movie file type.
6008=Object type mismatch. We wanted a movie file type to make a video.
#In storage management -- want to make a day or night default movie, but not 
#given one of those storage command type. 
6009=Storage command type mismatch. We wanted either STORE_DEFAULT_DAY or STORE_DEFAULT_NIGHT.
#In storage management -- movie maker system did not return videos 
6010=No data to store. The movie maker system did not return videos.

#7000 to 7999 are for Weather DB System Errors
#WeatherDbServer.java#establishServerSocket()
7001=Unable to create server socket for WeatherDb Server.
7002=Version mismatch between client and server.
7003=Invalid Request object received.
7004=Unrecognized Request object received.
7005=Client sent non-Request object.
7006=WeatherDb hostname could not be resolved.
7007=DBMS implementation unable to read properties file.
7008=Error communicating with WeatherDb server.
7009=Server encountered an error processing a request.