<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- DO NOT DELETE THIS FILE. This file is specific to the weatherProject. -->
<project name="WeatherProject" default="default" basedir=".">
    <description>Builds, tests, and runs the project WeatherProject.</description>
    <import file="nbproject/build-impl.xml"/>
    <import file="nbproject/profiler-build-impl.xml"/>
    <import file="nbproject/profiler-build-impl.xml"/>
    <import file="nbproject/profiler-build-impl.xml"/>

    <!-- Specify commands to execute on clean. -->
    <target depends="init" name="-do-clean">
        <!-- Remove build, localdist, dist, and installer directories. -->
        <delete dir="${build.dir}" />
        <delete dir="${dist.dir}" />
        <delete dir="${installer.dir}" />
    </target>

    <!--

    There exist several targets which are by default empty and which can be
    used for execution of your tasks. These targets are usually executed
    before and after some main targets. They are:

      -pre-init:                 called before initialization of project properties
      -post-init:                called after initialization of project properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUnit test
      -pre-jar:                  called before JAR building
      -post-jar:                 called after JAR building
      -post-clean:               called after cleaning build products

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of inserting an obfuscator after compilation could look like this:

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported
    nbproject/build-impl.xml file.


    Another way to customize the build is by overriding existing main targets.
    The targets of interest are:

      -init-macrodef-javac:     defines macro for javac compilation
      -init-macrodef-junit:     defines macro for junit execution
      -init-macrodef-debug:     defines macro for class debugging
      -init-macrodef-java:      defines macro for class execution
      -do-jar-with-manifest:    JAR building (if you are using a manifest)
      -do-jar-without-manifest: JAR building (if you are not using a manifest)
      run:                      execution of project
      -javadoc-build:           Javadoc generation
      test-report:              JUnit report generation

    An example of overriding the target for project execution could look like this:

        <target name="run" depends="WeatherProject-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that the overridden target depends on the jar target and not only on
    the compile target as the regular run target does. Again, for a list of available
    properties which you can use, check the target you are overriding in the
    nbproject/build-impl.xml file.

    @author Dustin Jones
    Creating Jar files and copying files on a project build

    The first tag that is used before copying any files or creating any jars is
    the <target> tag.  Information on the target tag exists above.

    In order to include a file into the distribution folder, the <copy> tag is
    used in the following manner:

    <copy file="mail.jar" tofile="dist/lib/mail.jar"/>

    file takes in a file to copy
    tofile is the path of the copy location for the file (this includes the file
    name at the end of the path)

    In order to create a jar file, the <jar> tag is used. Below is an example:

    <jar jarfile="dist/BUWeatherProgram.jar" basedir="build/classes">
            <exclude name="installer/**"/>
            <exclude name="testideas/**"/>
            <manifest>
                <attribute name="Ant-Version" value="Apache Ant 1.7.0"/>
                <attribute name="Main-Class" value="weather.MainProgram"/>
                <attribute name="Class-Path" value="lib/mail.jar lib/AbsoluteLayout.jar lib/mysql-connector-java-5.0.7-bin.jar lib/ant-contrib-1.0b3.jar lib/WeatherChart2D.jar lib/jcalendar.jar"/>
            </manifest>
    </jar>

    The <jar> tag takes two attributes, jarfile and basedir.  jarfile will take
    the path/name of the jar that it will create.  basedir takes a base working
    directory that you specify.

    By default, the jar created will be created with all files in the project
    folder.  If you wish to exclude certain packages from the jar, you use the
    <exclude> tag.  exclude has one attribute, name.  With name you can name a
    specific package, or you can use a wildcard like in the example above to
    get the root of many packages.

    <exclude name="installer/**"/>
    This line excludes all packages that have installer as their root directory.

    Another tag to include within the <jar> tag is <manifest>.  <manifest> stores
    all the information about the jar in <attribute> tags.  Each attribute has
    a name and a value.  For example:

    <attribute name="Main-Class" value="weather.MainProgram"/>

    There are two attributes that are necessary, name="Ant-Version"
    and name="Main-Class", and one that is optional, name="Class-Path".  Ant-Version
    stores the current ant version the program is using.  Main-Class is where you specify
    the main class that the jar will use when it is run.  Class-Path is used to
    include any libraries in the jar.  There can only be one Class-Path attribute
    so in order to include multiple libraries, you must put them all in the value
    attribute separated by spaces.  Reference the example above.

    -->

    <!-- @author Dave Moser -->
    <!-- @author Eric Subach (2010) -->
    <!-- @author Zach Rothweiler (2012) -->
    <!-- @author Mike Young (2014) -->
    <!--
        The following is a simple build script to create a total of 11 jar files
        in the dist folder. 
        in one step. They are:
            -BackgroundDownloader.jar
            -Storage.jar
            -Retrieval.jar
            -MainClient.jar
            -Movie.jar
            -ServerWatchdog.jar
            -GradingSystem.jar
            -Client-Version.jar
            -OldVideoMaker.jar
            -OldStationDataRetriever.jar
            -WeatherProjectLib.jar
    -->
    <target name="-pre-jar">
        <echo>Beginning pre-jar commands. See readme.JAR.txt for customization information.</echo>
        <echo>===========================================================</echo>
        <echo>Begin: building dist.</echo>

        <!-- Only copy .jar and .zip -->
        <echo>Copying: library files.</echo>
        <copy todir="dist/lib">
            <fileset dir="lib" casesensitive="false">
                <include name="*.jar" />
                <include name="*.zip" />
            </fileset>
        </copy>

        <echo>Copying: property files and special files.</echo>
        <copy todir="dist">
            <fileset dir="." casesensitive="false">
                <include name="config/**"/>
                <include name="*.properties" />
                <include name="*.txt" />
                <include name="*.xml" />

                <!-- exclude files starting with noinclude -->
                <exclude name="noinclude*" />

                <!-- exclude extra readmes -->
                <exclude name="readme*.txt" />
                <exclude name="DES.txt" />
                <exclude name="build*.xml" />
                <exclude name="testideas.xml" />
            </fileset>
        </copy>

        <!-- Only include .jpg and .png -->
        <echo>Copying: icons.</echo>
        <copy todir="dist/Icons">
            <fileset dir="Icons/" casesensitive="false">
                <include name="*.png" />
                <include name="*.jpg" />
            </fileset>
        </copy>

        <echo>Copying: directories (manually specified)</echo>
        <copy todir="dist/">
            <fileset dir=".">
                <include name="Documents/**/*" />
            </fileset>
        </copy>

        <echo>Copying: miscellaneous files.</echo>
        <copy todir="dist">
            <fileset dir="." casesensitive="false">
                <include name="NoData.mp4" />
                <include name="NoData.avi" />
                <include name="NoData.csv" />
            </fileset>
        </copy>

        <!-- <echo>To run the full project, run Storage.jar first then Retrieval and MainClient.</echo> -->

        <jar jarfile="dist/BackgroundDownloader.jar" basedir="build/classes">
            <exclude name="installer/**"/>
            <exclude name="testideas/**"/>
            <manifest>
                <attribute name="Ant-Version" value="Apache Ant 1.7.0"/>
                <attribute name="Main-Class" value="weather.background_task.BackgroundTaskMainProgram"/>
                <attribute name="Class-Path" value="lib/mail.jar lib/AbsoluteLayout.jar lib/mysql-connector-java-5.1.25-bin.jar lib/ant-contrib-1.0b3.jar"/>
            </manifest>
        </jar>

        <jar jarfile="dist/Retrieval.jar" basedir="build/classes">
            <exclude name="installer/**"/>
            <exclude name="testideas/**"/>
            <exclude name="weather/clientside/**"/>
            <manifest>
                <attribute name="Ant-Version" value="Apache Ant 1.7.0"/>
                <attribute name="Main-Class" value="weather.serverside.retrieval.RetrievalServer"/>
                <attribute name="Class-Path" value="lib/mail.jar lib/AbsoluteLayout.jar lib/mysql-connector-java-5.1.25-bin.jar lib/ant-contrib-1.0b3.jar"/>
            </manifest>
        </jar>

        <jar jarfile="dist/Storage.jar" basedir="build/classes">
            <exclude name="installer/**"/>
            <exclude name="testideas/**"/>
            <exclude name="weather/clientside/**"/>
            <manifest>
                <attribute name="Ant-Version" value="Apache Ant 1.7.0"/>
                <attribute name="Main-Class" value="weather.serverside.storage.StorageServerMainProgram"/>
                <attribute name="Class-Path" value="lib/mail.jar lib/AbsoluteLayout.jar lib/mysql-connector-java-5.1.25-bin.jar lib/ant-contrib-1.0b3.jar"/>
            </manifest>
        </jar>

        <jar jarfile="dist/Movie.jar" basedir="build/classes">
            <exclude name="installer/**"/>
            <exclude name="testideas/**"/>
            <exclude name="weather/clientside/**"/>
            <manifest>
                <attribute name="Ant-Version" value="Apache Ant 1.7.0"/>
                <attribute name="Main-Class" value="weather.serverside.movie.MovieMakerServer"/>
                <attribute name="Class-Path" value="lib/mail.jar lib/AbsoluteLayout.jar lib/mysql-connector-java-5.1.25-bin.jar lib/ant-contrib-1.0b3.jar"/>
            </manifest>
        </jar>

        <jar jarfile="dist/ServerWatchdog.jar" basedir="build/classes">
            <exclude name="testideas/**"/>
            <manifest>
                <attribute name="Ant-Version" value="Apache Ant 1.7.0"/>
                <attribute name="Main-Class" value="weather.serverside.watchdog.ServerWatchdogService"/>
                <attribute name="Class-Path" value="lib/mail.jar lib/AbsoluteLayout.jar lib/mysql-connector-java-5.1.25-bin.jar lib/ant-contrib-1.0b3.jar"/>
            </manifest>
        </jar>
        
        <jar jarfile="dist/DatabaseServer.jar" basedir="build/classes">
            <exclude name="installer/**"/>
            <exclude name="testideas/**"/>
            <exclude name="weather/clientside/**"/>
            <manifest>
                <attribute name="Ant-Version" value="Apache Ant 1.7.0"/>
                <attribute name="Main-Class" value="weather.common.dbms.remote.DatabaseServerMainProgram"/>
                <attribute name="Class-Path" value="lib/mail.jar lib/AbsoluteLayout.jar lib/mysql-connector-java-5.1.25-bin.jar lib/ant-contrib-1.0b3.jar"/>
            </manifest>
        </jar>

        <jar jarfile="dist/GradingSystem.jar" basedir="build/classes">
            <exclude name="installer/**"/>
            <exclude name="testideas/**"/>
            <exclude name="weather/clientside/**"/>
            <manifest>
                <attribute name="Ant-Version" value="Apache Ant 1.7.0"/>
                <attribute name="Main-Class" value="weather.serverside.servergrading.ServerGradingProgram"/>
                <attribute name="Class-Path" value="lib/mail.jar lib/AbsoluteLayout.jar lib/mysql-connector-java-5.1.25-bin.jar lib/ant-contrib-1.0b3.jar"/>
            </manifest>
        </jar>
        
        <jar jarfile="dist/Client-Version.jar" basedir="build/classes">
            <exclude name="installer/**"/>
            <exclude name="testideas/**"/>
            <manifest>
                <attribute name="Ant-Version" value="Apache Ant 1.7.0"/>
                <attribute name="Main-Class" value="weather.developer.DeveloperForm"/>
                <attribute name="Class-Path" value="lib/mail.jar lib/AbsoluteLayout.jar lib/mysql-connector-java-5.1.25-bin.jar lib/ant-contrib-1.0b3.jar"/>
            </manifest>
        </jar>
        
        <jar jarfile="dist/OldVideoMaker.jar" basedir="build/classes">
            <exclude name="installer/**"/>
            <exclude name="testideas/**"/>
            <manifest>
                <attribute name="Ant-Version" value="Apache Ant 1.7.0"/>
                <attribute name="Main-Class" value="weather.serverside.old_day_long_maker.OldMovieMakerMainProgram"/>
                <attribute name="Class-Path" value="lib/mail.jar lib/AbsoluteLayout.jar lib/mysql-connector-java-5.1.25-bin.jar lib/ant-contrib-1.0b3.jar"/>
            </manifest>
        </jar>
        
        <jar jarfile="dist/OldStationDataRetriever.jar" basedir="build/classes">
            <exclude name="installer/**"/>
            <exclude name="testideas/**"/>
            <manifest>
                <attribute name="Ant-Version" value="Apache Ant 1.7.0"/>
                <attribute name="Main-Class" value="weather.serverside.old_weather_underground_retrieval.OldWeatherUndergroundFileRetrieverMainProgram"/>
                <attribute name="Class-Path" value="lib/mail.jar lib/AbsoluteLayout.jar lib/mysql-connector-java-5.1.25-bin.jar lib/ant-contrib-1.0b3.jar"/>
            </manifest>
        </jar>
        
        <jar jarfile="dist/WeatherProjectLib.jar" basedir="build/classes">
            <exclude name="installer/**"/>
            <exclude name="testideas/**"/>
            <exclude name="BBTest/**"/>
            <exclude name="BZTempTestStuff/**"/>
            <exclude name="test/**"/>
            <exclude name="weather/UnitTesting/**"/>
            <exclude name="weather/developer/**"/>
            <manifest>
                <attribute name="Ant-Version" value="Apache Ant 1.7.0"/>
                <attribute name="Class-Path" value="lib/mail.jar lib/AbsoluteLayout.jar lib/mysql-connector-java-5.1.25-bin.jar lib/ant-contrib-1.0b3.jar"/>
            </manifest>
        </jar>
        <echo>End: building dist.</echo>
        <echo>===========================================================</echo>
    </target>
</project>
