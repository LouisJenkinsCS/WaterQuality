package weather.background_task;

import java.awt.Dialog;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import javax.swing.JOptionPane;
import weather.GeneralService;
import weather.clientside.gui.client.*;
import weather.common.gui.component.BUDialog;
import weather.common.utilities.PropertyManager;

/**
 * This class represents an instance of the login window for the background 
 * downloader.  It is copied from the main login screen and simplified.
 * @author Brian Bankes
 */
public class BackgroundTaskLoginWindow extends BUDialog {

    private String userName = "";
    private String password = "";
    private String guest = "guest";
    private GeneralService generalService;
    private int tries = 0;
    private PasswordWindow passwordWindow;
    private static String maxLogin;
    private int Logins;
    private boolean enabled = true;
    private Object[] failedLoginOptions={"Login As Guest", "Email Password", "Exit"};
    
    /** 
     * Creates new form LoginWindow.
     * 
     * @param generalService The GeneralService object that will be set to the class variable.
     */
    public BackgroundTaskLoginWindow(GeneralService generalService) {
        //This has to be set so that the program hangs until the user logs in...
        super();
        super.setModalityType(ModalityType.DOCUMENT_MODAL);

        initComponents();
        this.generalService = generalService;
        this.getRootPane().setDefaultButton(loginButton);
        int width = 302 + this.getInsets().left + this.getInsets().right;
        int height = 195 + this.getInsets().top + this.getInsets().bottom;
        Dimension thisDim = new Dimension(width, height);
        this.setSize(thisDim);
        this.setPreferredSize(thisDim);
        this.setMaximumSize(thisDim);
        this.setMinimumSize(thisDim);
        pack();
        
        weather.clientside.utilities.RightClickMenu.addMenuTo(
                new javax.swing.text.JTextComponent[]{userNameTextField, passwordTextField});

        //Get properties
        maxLogin = PropertyManager.getGUIProperty("maxFailedLogins");
        Logins = Integer.parseInt(maxLogin);
        
        //The super call below needs to be called here to override the
        //initComponents() method to set the iconImage, cannot set via the GUI editor
        super.postInitialize(true);
    }
    
    

    /** 
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        informationLabel = new javax.swing.JLabel();
        passwordJLabel = new javax.swing.JLabel();
        userNameJLabel = new javax.swing.JLabel();
        userNameTextField = new javax.swing.JTextField();
        passwordTextField = new javax.swing.JPasswordField();
        loginButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        emailButton = new javax.swing.JButton();
        guestLogon = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Downloader Login");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFocusTraversalPolicyProvider(true);
        setResizable(false);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BackgroundTaskLoginWindow.this.keyPressed(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        informationLabel.setText("Please enter your username and password.");
        getContentPane().add(informationLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 12, 278, 14));

        passwordJLabel.setText("Password:");
        getContentPane().add(passwordJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 66, -1, -1));

        userNameJLabel.setText("Username:");
        getContentPane().add(userNameJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 37, -1, -1));

        userNameTextField.setToolTipText("Enter the user name");
        userNameTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                userNameTextFieldFocusGained(evt);
            }
        });
        userNameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BackgroundTaskLoginWindow.this.keyPressed(evt);
            }
        });
        getContentPane().add(userNameTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 34, 210, -1));

        passwordTextField.setToolTipText("Enter the password associated with your user name");
        passwordTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                passwordTextFieldFocusGained(evt);
            }
        });
        passwordTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BackgroundTaskLoginWindow.this.keyPressed(evt);
            }
        });
        getContentPane().add(passwordTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 63, 210, -1));

        loginButton.setText("Login");
        loginButton.setToolTipText("Log in as selected user");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });
        loginButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BackgroundTaskLoginWindow.this.keyPressed(evt);
            }
        });
        getContentPane().add(loginButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 92, 133, -1));

        closeButton.setText("Close");
        closeButton.setToolTipText("Exit this program");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        closeButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BackgroundTaskLoginWindow.this.keyPressed(evt);
            }
        });
        getContentPane().add(closeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(152, 92, 138, -1));

        emailButton.setText("Forgot Password?");
        emailButton.setToolTipText("Opens the email password window  to recover your password");
        emailButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailButtonActionPerformed(evt);
            }
        });
        getContentPane().add(emailButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(152, 125, 138, 23));

        guestLogon.setText("Login As Guest");
        guestLogon.setToolTipText("Log in as a guest");
        guestLogon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guestLogonActionPerformed(evt);
            }
        });
        getContentPane().add(guestLogon, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 125, 133, -1));
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This method is called when the cancel button is clicked.
     * The login window is closed and the program is terminated.
     * @param evt The event that the cancel button is clicked.
     */
    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        generalService.getDBMSSystem().closeDatabaseConnections();
        //Set GeneralWeather.properties to indicate the program is not running.
        PropertyManager.setGeneralProperty("ClientRunning", "false");
        System.exit(0);
    }//GEN-LAST:event_closeButtonActionPerformed
    
    /**
     * This button logs the user in by validating the login with the
     * username and password. If the user fails to enter correct information
     * five times, the user is automatically logged in as a guest.
     * @param evt The login button was pressed.
     */
    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        if (this.userNameTextField.getText().trim().isEmpty() ||
                new String(this.passwordTextField.getPassword()).trim().isEmpty()){
                informationLabel.setText("No username or password"
                    + " entered. Please try again.");
                //copied from generated code
                informationLabel.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
                informationLabel.setForeground(new java.awt.Color(255, 0, 0));
        } else {
            setUserName(this.userNameTextField.getText().trim());
            setPassword(new String(this.passwordTextField.getPassword()).trim());
            if (generalService.validateUserAndUpdateLoginInformation(userName, password)) {
                tries = 0;
                this.setVisible(false);
                if (enabled == false) {
                    passwordWindow.dispose();
                }
                //configures the local properties for the current user
                //and grabs the default start hours.
                
                PropertyManager.configureLocalProperties(generalService.getUser().getLoginId());
            } else {
                tries++;
                passwordTextField.setText("");
                informationLabel.setText("Invalid login information"
                        + ". Please try again.");
                //copied from generated code
                informationLabel.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
                informationLabel.setForeground(new java.awt.Color(255, 0, 0));
                passwordTextField.requestFocus();
            }
            //TODO: Change reference to PropertyManager property to instance field 
            if (tries == Logins) {
                int opt = JOptionPane.showOptionDialog(this, "You have attempted " +
                        PropertyManager.getGUIProperty("maxFailedLogins") +
                        " incorrect logins.\n", "Incorrect Login",
                        JOptionPane.YES_NO_CANCEL_OPTION,
                        JOptionPane.WARNING_MESSAGE, null,
                        failedLoginOptions, failedLoginOptions[1]);
                if (opt==0) {
                    guestLogon();
                }
                else if(opt ==1){
                    passwordWindow = new PasswordWindow(generalService);
                    passwordWindow.setVisible(true);
                    passwordWindow.setEnabled(true);
                    setModalityType(Dialog.ModalityType.APPLICATION_MODAL);
                    enabled = false;
                    passwordTextField.setText("");
                    userNameTextField.setText("");
                }
                else if (opt==2) {
                    generalService.getDBMSSystem().closeDatabaseConnections();
                    //Set GeneralWeather.properties to indicate the program is not running.
                    PropertyManager.setGeneralProperty("ClientRunning", "false");
                    System.exit(0);
                }
                if (enabled == false) {
                    passwordWindow.dispose();
                }
            }
        }
    }//GEN-LAST:event_loginButtonActionPerformed

    /** 
     * This method closes the program if the escape key is pressed.
     * @param evt The escape key is pressed.
     */
    private void keyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_keyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE || (evt.getKeyCode() == KeyEvent.VK_ENTER && this.closeButton.isFocusOwner())) {
            generalService.getDBMSSystem().closeDatabaseConnections();
            //Set GeneralWeather.properties to indicate the program is not running.
            PropertyManager.setGeneralProperty("ClientRunning", "false");
            System.exit(0);
        }
    }//GEN-LAST:event_keyPressed

    /**
     * Highlights all text in the password field when focus is gained.
     * @param evt The password field is focused.
     */
    private void passwordTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_passwordTextFieldFocusGained
        passwordTextField.selectAll();
    }//GEN-LAST:event_passwordTextFieldFocusGained

    /**
     * Highlights all text in the username field when focus is gained.
     * @param evt The username field is focused.
     */
    private void userNameTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_userNameTextFieldFocusGained
        userNameTextField.selectAll();
    }//GEN-LAST:event_userNameTextFieldFocusGained

    /** 
     * Emails the user his or her password if the email button is pressed.
     * @param evt The email button pressed.
     */
    private void emailButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailButtonActionPerformed
        setUserName(guest);
        setPassword(guest);
        passwordWindow = new PasswordWindow(generalService);
        setModalityType(
            Dialog.ModalityType.APPLICATION_MODAL);
        
        enabled = false;
}//GEN-LAST:event_emailButtonActionPerformed

    /**
     * This button logs the user in as a guest.
     * @param evt The guest user button pressed.
     */
    private void guestLogonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guestLogonActionPerformed
        guestLogon();
    }//GEN-LAST:event_guestLogonActionPerformed

    /** 
     * Logs the user in as a guest.
     */
    private void guestLogon(){
        if (generalService.validateAndSetUser(guest, guest)) {
            PropertyManager.configureLocalProperties(generalService.getUser().getLoginId());
            
            tries = 0;
            this.setVisible(false);
            if (enabled == false) {
                passwordWindow.dispose();
            }
        } else {
          JOptionPane.showMessageDialog(this, "Invalid login information. Guest login not valid.");
        }
    }

    /**
     * This method handles what happens then the window gains focus
     * check to see if the email password window has been called.
     * @param evt The window gained focus.
     */
    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        this.setModalityType(
            Dialog.ModalityType.DOCUMENT_MODAL);
        this.setEnabled(true);
    }//GEN-LAST:event_formWindowGainedFocus

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        this.setEnabled(true);
        requestFocusInWindow();
    }//GEN-LAST:event_formMousePressed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        generalService.getDBMSSystem().closeDatabaseConnections();
        //Set GeneralWeather.properties to indicate the program is not running.
        PropertyManager.setGeneralProperty("ClientRunning", "false");
        System.exit(0);
    }//GEN-LAST:event_formWindowClosing

    /**
     * Sets the userName.
     * @param userName The userName string assigned.
     */
    private void setUserName(String userName) {
        this.userName = userName;
    }
    
    /**
     * Assigns the password.
     * @param password The password string assigned.
     */
    private void setPassword(String password) {
        this.password = password;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JButton emailButton;
    private javax.swing.JButton guestLogon;
    private javax.swing.JLabel informationLabel;
    private javax.swing.JButton loginButton;
    private javax.swing.JLabel passwordJLabel;
    private javax.swing.JPasswordField passwordTextField;
    private javax.swing.JLabel userNameJLabel;
    private javax.swing.JTextField userNameTextField;
    // End of variables declaration//GEN-END:variables
}
