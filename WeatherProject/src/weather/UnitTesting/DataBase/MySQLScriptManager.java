package weather.UnitTesting.DataBase;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.logging.Level;
import weather.common.dbms.mysql.MySQLImpl;
import weather.common.utilities.WeatherException;
import weather.common.utilities.WeatherLogger;

/**
 * This manager handles .sql script files. It takes the .sql scrip files
 * generated by phpMyAdmin with little modification (fixed in the future).
 * @author Joseph Horro
 * @version Spring(2011)
 */
public class MySQLScriptManager implements DMBSSQLScript {

    /**
     * This object's DatabaseManagementSystem instance.
     */
    private MySQLImpl dbms;

    public MySQLScriptManager(MySQLImpl dbms) {
        this.dbms = dbms;
    }

    /**
     * Runs .sql scripts.
     * @param scriptsFile The
     */
    @Override
    public void runScripts(String scriptsFile) {
        String currentFile;
        String line;
        StringBuilder sb;

        try {
            BufferedReader brMain = new BufferedReader(new FileReader("sqlScripts"
                    + File.separatorChar + scriptsFile));
            currentFile = brMain.readLine();
            while (currentFile != null) {
                if(currentFile.substring(0, 2).equals("//"))
                {
                    // comment line detected, try next line
                    currentFile = brMain.readLine();
                    continue;
                }
                System.out.println("Working on file: " + currentFile + "\n");
                BufferedReader br = new BufferedReader(new FileReader("sqlScripts"
                        + File.separatorChar + currentFile));
                sb = new StringBuilder();
                line = null;
                String firstTwoChars = "";
                String fileContents;
                String sqlCommands[];
                String lastCharacter = "";

                line = br.readLine();
                if (line != null && line.length() > 1) {
                    firstTwoChars = line.substring(0, 2);
                    lastCharacter = line.substring(line.length() - 1, line.length());
                } else {
                    firstTwoChars = "";
                }
                while (line != null) {
                    if (!firstTwoChars.equals("--") && !firstTwoChars.equals("/*")) {
                        sb.append(line);
                        System.out.println("adding -> " + line);
                    }
                    line = br.readLine();
                    if (line != null && line.length() > 1) {
                        firstTwoChars = line.substring(0, 2);
                        lastCharacter = line.substring(line.length() - 1, line.length());
                       // System.out.println("Parsing: " + line);
                    } else {
                        firstTwoChars = "";
                        lastCharacter = "";
                    }
                }
                fileContents = sb.toString();
                System.out.println("SQL -> " + fileContents);
                sqlCommands = sb.toString().split(";");

                // testing
                for (String s : sqlCommands) {
                    System.out.println("Executing -> " + s + ";");
                  //  runScript(s + ";");
                }
                currentFile = brMain.readLine();
            }

        } catch (Exception e) {
            WeatherLogger.log(Level.SEVERE, "SQL Script parsing error.", e);
            new WeatherException(0012, e, "Cannot complete the requested "
                    + "operation due to an internal problem.").show();
        }
    }
}
