package weather.clientside.manager;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;
import java.util.ArrayList;
import java.util.TimeZone;
import java.util.Vector;
import javax.swing.JPanel;
import weather.clientside.imageprocessing.JPanelPlayerVLCJ;
import weather.clientside.utilities.ResourceTreeManager;
import weather.clientside.utilities.StorageSpaceTester;
import weather.common.data.lesson.LessonEntry;
import weather.common.data.resource.*;
import weather.common.utilities.*;

/**
 *
 * @author Justin Gamble - 2012
 * @author Xiang Li (2014)
 */
public class LessonEntryMoviePanelManager extends javax.swing.JPanel implements MoviePanelManager {
    private final int VERTICAL_LABEL_BUFFER = 39;
    /**
     * MovieController this manager is associated with.
     */
    private MovieController movieController;
    /**
     * ResourceRange for the contained LessonEntry.
     */
    private ResourceRange resourceRange;
    /**
     * Resource of the contained LessonEntry.
     */
    private Resource resource;
    /**
     * If the Dimension are changed, they're held here.
     */
    private Dimension panelDimension;
    /**
     * VideoPlayer for playback of LessonEntry.
     */
    private JPanelPlayerVLCJ videoPlayer;
    /**
     * The playback rate the contained VideoPlayer should be at.
     */
    private float currentRate;
    /**
     * The LessonEntry this MovieManager plays.
     */
    private LessonEntry lessonEntry;

    /**
     * Creates the LessonEntryMoviePanelManager that is controlled by mc and plays le.
     * @param mc The MovieController that controls this LessonEntryMoviePanelManager.
     * @param le The LessonEntry this MovieManager plays.
     */
    public LessonEntryMoviePanelManager(MovieController mc, LessonEntry le) {
        initComponents();
        //Initialize globals
        this.lessonEntry = le;
        this.movieController = mc;
        

        //Can't do this with the updated LessonEntry
        this.resource = lessonEntry.getResource();
        this.resourceRange = lessonEntry.getResourceRange();
        nameLabel.setText(lessonEntry.getLessonEntryName());
        //initial playback rate
        currentRate = 1.0f;
        

        

        

        this.validate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nonePanel = new javax.swing.JPanel();
        nonePanelLabel = new java.awt.Label();
        nameLabel = new java.awt.Label();
        moviePanel = new javax.swing.JPanel();

        nonePanelLabel.setAlignment(java.awt.Label.CENTER);
        nonePanelLabel.setText("No weather lesson entry selected.");

        javax.swing.GroupLayout nonePanelLayout = new javax.swing.GroupLayout(nonePanel);
        nonePanel.setLayout(nonePanelLayout);
        nonePanelLayout.setHorizontalGroup(
            nonePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(nonePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(nonePanelLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(nonePanelLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        nonePanelLayout.setVerticalGroup(
            nonePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 250, Short.MAX_VALUE)
            .addGroup(nonePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(nonePanelLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(nonePanelLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        nameLabel.setAlignment(java.awt.Label.CENTER);
        nameLabel.setText("nameLabel");

        moviePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout moviePanelLayout = new javax.swing.GroupLayout(moviePanel);
        moviePanel.setLayout(moviePanelLayout);
        moviePanelLayout.setHorizontalGroup(
            moviePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 366, Short.MAX_VALUE)
        );
        moviePanelLayout.setVerticalGroup(
            moviePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 250, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nonePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(moviePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nonePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(moviePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(36, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel moviePanel;
    private java.awt.Label nameLabel;
    private javax.swing.JPanel nonePanel;
    private java.awt.Label nonePanelLabel;
    // End of variables declaration//GEN-END:variables
    /**
     * Returns the the Panel associated with this MovieManager.
     * @param width The width the panel should be.
     * @param height The height the panel should be.
     * @return The LessonEntryPanel with given dimensions.
     */
    @Override
    public JPanel getPanel(int width, int height) {
        try {
            panelDimension = new Dimension(width, height - VERTICAL_LABEL_BUFFER);
            if (resource != null) {
                videoPlayer.setMovieSize(moviePanel.getWidth(), moviePanel.getHeight());
                //Debug.println("Map Loop Dims set : "+ (width - HORIZONTAL_BUFFER) +" "+ (height - VERTICAL_BUTTON_PANEL_OFFSET));
            } else {
                nonePanel.setVisible(true);
            }
            moviePanel.setSize(width, height - VERTICAL_LABEL_BUFFER);
        } catch (WeatherException ex) {
            ex.show();
        }
        return this;
    }
    /**
     * Sets the resource range to be played back.
     * @param range The ResourceRange to be played.
     */
    @Override
    public void setResourceRange(ResourceRange range) {
        resourceRange = range;
        updateMovie();
    }
    /**
     * Updates the movie to be played.
     */
    public void updateMovie() {
        if (resource != null && resourceRange != null) {

                Vector<AVIInstance> movieVector = new Vector<AVIInstance>();
                Vector<ResourceInstance> cameraInstances = ResourceTreeManager.getResourceInstancesForRange(resource, resourceRange);

                //populate movie vectors with whichever movie type should be used
                for (ResourceInstance camInstance : cameraInstances) {
                    movieVector.add(((AVIInstance) camInstance));
                }

                Debug.println("running gc: updateMovie ()");
                Runtime.getRuntime().gc();

                Debug.println("MovieVector has size " + movieVector.size());

                if (movieVector.size() > 0) {
                    setMovieVector(movieVector);
                }

        } else if (resource == null) {


            if (videoPlayer != null) {
                moviePanel.remove(videoPlayer);
                videoPlayer.cleanup();
            }
            if (panelDimension != null) {
                nonePanel.setSize(panelDimension.width,
                        panelDimension.height);
            }
            nonePanel.setVisible(true);
            nonePanel.repaint();
        }
    }
    /**
     * Sets the movieVector to be played.
     * @param movieVector The movieVector to be played by this MoviePanelManager.
     */
    private void setMovieVector(Vector<AVIInstance> movieVector) {
        //set nonePanel invisible
        nonePanel.setVisible(false);
        //if there was a video already, remove it
        if (videoPlayer != null) {
            moviePanel.remove(videoPlayer);
            videoPlayer.cleanup();
        }
        //create a new video player of the instance we want
        Debug.println("Using AVI instance.");
        videoPlayer = new JPanelPlayerVLCJ(movieVector);
        Debug.println("LessonEntry VLCJ Done.");
        //if there was a size change, re-establish it
        if (panelDimension != null) {
            videoPlayer.setSize(panelDimension.width - 20, panelDimension.height - 20);
        }
        //add the videoPlayer to the super component
        moviePanel.add(videoPlayer, BorderLayout.CENTER);
        
        moviePanel.validate();
    }
    
    /**
     * Sets the movie player size.
     * @param width The width to set the movie player.
     * @param height The height to se the movie player.
     */
    @Override
    public void setMovieSize(int width, int height) {
        if (videoPlayer != null) {
            try {
                videoPlayer.setMovieSize(width, height);
            } catch (WeatherException ex) {
                ex.show("LessonEntry movie size could not be changed.");
            }
        }
    }
    /**
     * Does Nothing.
     * @param resource 
     */
    
    /**
     * Stops the video handled by this manager.
     */
    @Override
    public void stop() {
        if (videoPlayer != null) {
            videoPlayer.stopMovie();
        }
    }
    
    /**
     * The rate at which the movie should be playing.
     * @param rate The new rate to play at.
     * @param isPlaying If the movie should be playing.
     */
    @Override
    public void setMovieRate(float rate, boolean isPlaying) {
        currentRate = rate;
        if (videoPlayer != null) {
            if (isPlaying) {
                try {
                    videoPlayer.setMovieRate(currentRate);
                } catch (WeatherException ex) {
                    ex.show("LessonEntry rate could not be set.");
                }
            }
        }
    }
    /**
     * Checks if the contained video is currently playing.
     * @return Whether or not the video is playing.
     */
    @Override
    public boolean isPlaying() {
        boolean ret = false;
        if (videoPlayer != null) {
            return videoPlayer.isPlaying();
        }
        return ret;
    }
    /**
     * Sets the contained movie's progress in seconds.
     * @param progress The tick count to set the movie to.
     */
    @Override
    public void setMovieProgress(int progress) {
        if (videoPlayer != null) {
            videoPlayer.setTimeInSeconds(progress);
        }
    }
    
    /**
     * Resets the contained movie.
     */
    @Override
    public void reset() {
        if (videoPlayer != null) {
            videoPlayer.reset();
        }
    }
    /**
     * Gets the total duration of the contained movie.
     * @return Duration in milliseconds.
     */
    public long getMovieDurationInMillis() {
        if (videoPlayer != null) {
            return videoPlayer.getTotalTimeInMillis();
        }
        return -1;
    }
    /**
     * Cleanup considerations for the contained videoPlayer.
     */
    @Override
    public void cleanup() {
        if (videoPlayer != null) {
            videoPlayer.cleanup();
        }
    }
    /**
     * Saves the movie with the given filename.
     * @param filenames an ArrayList that holds the filename at position 0.
     * @throws WeatherException if save is not successful.
     */
    @Override
    public void saveMovie(ArrayList<String> filenames) throws WeatherException {
        String currentMoviePath = videoPlayer.getCurrentMoviePaths().get(0);
        File source = new File(currentMoviePath);
        File target = new File(CommonLocalFileManager.getCameraMovieDirectory(), filenames.get(0) + ".avi");

        target.mkdirs();

        //Debug.println(target.getAbsolutePath());
        try {
            if (!target.exists()) {
                target.createNewFile();
            }
            Files.copy(source.toPath(), target.toPath(), REPLACE_EXISTING);
        } catch (IOException ex) {
            Debug.println(ex);
            throw new WeatherException();
        }
        
        //Test for remaining space in application home, which has no effect
        //if the save was not there.
        StorageSpaceTester.testApplicationHome();
    }
    
    @Override
    public BufferedImage getPictFromMovie() {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    /**
     * Gets the resource number of the currently handled video.
     * @return The DBMS resource number of the currently handled video.
     */
    @Override
    public int getCurrentResourceNumber() {
        //Can't do this with the updated LessonEntry
        return 0;//lessonEntry.getResourceNumber();
    }

    @Override
    public void setFutureResource(Vector<Resource> resources) {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    
    /**
     * Gets the preferred display position for this panel.
     */
    public int getDisplayPosition(){
        return lessonEntry.getPreferredWindowLocation();
    }

    @Override
    public void setToNone() {
        if (videoPlayer != null) {
            moviePanel.remove(videoPlayer);
            videoPlayer.cleanup();
        }
        if (panelDimension != null) {
            nonePanel.setSize(panelDimension.width,
                    panelDimension.height);
        }
        nonePanel.setVisible(true);
        nonePanel.repaint();
    }

    @Override
    public boolean isCameraManager() {
        return false;
    }

    @Override
    public boolean isSetToNone() {
        return resource == null;
    }

    @Override
    public TimeZone getTimeZone() {
        if (resource == null) {
            return TimeZone.getDefault();
        } else {
            return resource.getTimeZone().getTimeZone();
        }
    }

    @Override
    public int getCurrentVideoSecond() {
        if (videoPlayer == null) {
            return -1;
        } else {
            return videoPlayer.getCurrentTimeOfMovies();
        }
    }
}
