package weather.clientside.gui.administrator;

import java.awt.Color;
import java.awt.Font;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import weather.AdministratorControlSystem;
import weather.clientside.utilities.MyDefaultTableModel;
import weather.common.data.WebLink;
import weather.common.data.WebLinkCategories;
import weather.common.dbms.DBMSSystemManager;
import weather.common.dbms.DBMSWebLinkManager;
import weather.common.gui.component.BUDialog;
import weather.common.gui.component.IconProperties;

/**
 * The <code>ManageWebCategories</code> creates a form that lists all
 * web categories.
 * @author Alex Funk (2011)
 * @author Ty Vanderstappen (2012)
 * @version 2012
 */
public class ManageWebLinkCategories extends BUDialog {
    private DBMSSystemManager dbms;
    private DBMSWebLinkManager wlManager;
    private Vector<WebLinkCategories> categories;
    private Color forestGreen = new Color(34,139,34);
    private String editChange="";

    /** 
     * Constructor for this class.
     * @param adminService Control system unique to the administrator.
     */
    public ManageWebLinkCategories(AdministratorControlSystem adminService) {
        super(adminService);
        dbms = adminService.getGeneralService().getDBMSSystem();
        wlManager  = dbms.getWebLinkManager();
        categories = wlManager.obtainAllWebLinkCategories();
        
        initComponents();
        weblinkPane.addChangeListener(new tabChangeListener(this));
        setResizable(false);
        
        //listener for when the user clicks the X
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent evt) {
                close();
            }
        });
        
        //Fills tables and combobox
        updateTables();
        updateLinkCategoriesComboBox();
        
        super.postInitialize(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        errorLabel = new javax.swing.JLabel();
        closeButton = new javax.swing.JButton();
        weblinkPane = new javax.swing.JTabbedPane();
        listPane = new javax.swing.JScrollPane();
        listTable = new javax.swing.JTable();
        addPanel = new javax.swing.JPanel();
        newNameLabel = new javax.swing.JLabel();
        newNameField = new javax.swing.JTextField();
        addCategoryButton = new javax.swing.JButton();
        editPanel = new javax.swing.JPanel();
        renameLabel = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        renameField = new javax.swing.JTextField();
        categoryComboBox = new javax.swing.JComboBox<String>();
        renameButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        displayPanel = new javax.swing.JPanel();
        allCategoriesJScrollPane = new javax.swing.JScrollPane();
        displayOrderTable = new javax.swing.JTable();
        downbutton = new javax.swing.JButton();
        upButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Weather Viewer - Manage Web Link Categories");
        setResizable(false);

        errorLabel.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        errorLabel.setText("Double click to edit a web link category.");

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        listTable.setAutoCreateRowSorter(true);
        listTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        )
    );
    listTable.setRowSelectionAllowed(false);
    listTable.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            listTableMouseClicked(evt);
        }
    });
    listPane.setViewportView(listTable);

    weblinkPane.addTab("List", listPane);

    newNameLabel.setText("New Category Name:");

    newNameField.setToolTipText("The name of the categories");

    addCategoryButton.setText("Add Category");
    addCategoryButton.setToolTipText("Add new categories to the database");
    addCategoryButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            addCategoryButtonActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout addPanelLayout = new javax.swing.GroupLayout(addPanel);
    addPanel.setLayout(addPanelLayout);
    addPanelLayout.setHorizontalGroup(
        addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(addPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(addPanelLayout.createSequentialGroup()
                    .addComponent(newNameLabel)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(newNameField, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addPanelLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(addCategoryButton)))
            .addContainerGap())
    );
    addPanelLayout.setVerticalGroup(
        addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(addPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(newNameLabel)
                .addComponent(newNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(addCategoryButton)
            .addContainerGap(161, Short.MAX_VALUE))
    );

    weblinkPane.addTab("Add", addPanel);

    renameLabel.setText("Category:");

    nameLabel.setText("Name:");

    categoryComboBox.setMaximumRowCount(13);
    categoryComboBox.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            categoryComboBoxActionPerformed(evt);
        }
    });

    renameButton.setText("Rename Category");
    renameButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            renameButtonActionPerformed(evt);
        }
    });

    deleteButton.setText("Delete Category");
    deleteButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            deleteButtonActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout editPanelLayout = new javax.swing.GroupLayout(editPanel);
    editPanel.setLayout(editPanelLayout);
    editPanelLayout.setHorizontalGroup(
        editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(editPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editPanelLayout.createSequentialGroup()
                    .addComponent(renameLabel)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(categoryComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(editPanelLayout.createSequentialGroup()
                    .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(editPanelLayout.createSequentialGroup()
                            .addComponent(renameButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                            .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(renameField))))
            .addContainerGap())
    );
    editPanelLayout.setVerticalGroup(
        editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(editPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(renameLabel)
                .addComponent(categoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(renameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(nameLabel))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(renameButton)
                .addComponent(deleteButton))
            .addContainerGap(135, Short.MAX_VALUE))
    );

    weblinkPane.addTab("Edit", editPanel);

    allCategoriesJScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
    this.allCategoriesJScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);

    this.allCategoriesJScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);

    displayOrderTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
    allCategoriesJScrollPane.setViewportView(displayOrderTable);

    downbutton.setIcon(IconProperties.getArrowDownSmallIcon());
    downbutton.setToolTipText("Move the currently selected web link category down one index");
    downbutton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            downbuttonActionPerformed(evt);
        }
    });

    upButton.setIcon(IconProperties.getArrowUpSmallIcon());
    upButton.setToolTipText("Move the currently selected web link category up one index");
    upButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            upButtonActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout displayPanelLayout = new javax.swing.GroupLayout(displayPanel);
    displayPanel.setLayout(displayPanelLayout);
    displayPanelLayout.setHorizontalGroup(
        displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(displayPanelLayout.createSequentialGroup()
            .addComponent(allCategoriesJScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(downbutton)
                .addComponent(upButton))
            .addContainerGap(32, Short.MAX_VALUE))
    );
    displayPanelLayout.setVerticalGroup(
        displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(displayPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(upButton)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(downbutton)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, displayPanelLayout.createSequentialGroup()
            .addGap(0, 1, Short.MAX_VALUE)
            .addComponent(allCategoriesJScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
    );

    weblinkPane.addTab("Display Order", displayPanel);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addGroup(layout.createSequentialGroup()
                    .addGap(10, 10, 10)
                    .addComponent(errorLabel)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(closeButton))
                .addComponent(weblinkPane, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(weblinkPane, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(closeButton)
                .addComponent(errorLabel))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Method is called when a user double clicks anywhere in the table
     * which takes the user to the edit screen.
     * @param evt The event that happened to cause this method to be called.
     */
    private void listTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listTableMouseClicked
        JTable target = (JTable) evt.getSource();

        //checks if the user double clicked or single clicked
        if (evt.getClickCount() == 2) {
            Vector<WebLinkCategories> current = this.categories;
            try {
                WebLinkCategories value =
                        (WebLinkCategories) current.get(target.getSelectedRow());
                updateLinkCategoriesComboBox();
                categoryComboBox.setSelectedItem(value.getLinkCategory());
                weblinkPane.setSelectedIndex(2);
            } catch (NullPointerException ex) {
                //The selected cell was empty, do nothing.
            } catch (ArrayIndexOutOfBoundsException ex) {
                //The selected cell wasn't in the table, do nothing.
            } catch (ClassCastException ex) {
                //When text is typed into a cell and then reselected, this happens.
            }
        }
    }//GEN-LAST:event_listTableMouseClicked
    
    /*
     * Used when the user changes tabs. 
     * Sets the message to either the edit message or to an error message,
     * if there are no web link categories.
     */
    class tabChangeListener implements ChangeListener {

        private tabChangeListener(ManageWebLinkCategories a) {}

        @Override
        public void stateChanged(ChangeEvent e) {
            if(!categories.isEmpty()){
                if(weblinkPane.getSelectedIndex()==0){
                    errorLabel.setForeground(Color.BLACK);
                    errorLabel.setFont(new Font("Tahoma", Font.ITALIC, 11));
                    errorLabel.setText("Double click to edit a web link category.");
                }
                else {
                    errorLabel.setForeground(Color.RED);
                    errorLabel.setFont(new Font("Tahoma", Font.PLAIN, 11));
                    errorLabel.setText("");
                }
            }
            else {
                errorLabel.setForeground(Color.RED);
                errorLabel.setFont(new Font("Tahoma", Font.PLAIN, 11));
                errorLabel.setText("There are no web link categories.");
            }
        }
    } 
    
    /**
     * When the user clicks the Close button this is called.
     * Closes the List Web Categories window.
     * @param evt The event that happened to cause this method to be called.
     */
    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        close();
    }//GEN-LAST:event_closeButtonActionPerformed

    /**
     * The user clicks the Add Category button.
     * Attempts to add a new Web Link Category.
     * @param evt The event that happened to cause this method to be called.
     */
    private void addCategoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCategoryButtonActionPerformed
        String newCatName = newNameField.getText().trim();

        //Make sure a name was entered
        if (newCatName.equals("")) {
            errorLabel.setForeground(Color.RED);
            errorLabel.setText("A web link category name is required.");
            return;
        }

        //Make sure it's not already in use
        for (int i = 0; i < categories.size(); i++) {
            if (categories.get(i).getLinkCategory().equals(newCatName)) {
                errorLabel.setForeground(Color.RED);
                errorLabel.setText("A web link category with that name already exists.");
                return;
            }
        }

        WebLinkCategories newCat = new WebLinkCategories(newCatName);

        //Checks if the new weblink category was added to the database
        if (wlManager.addWebLinkCategory(newCat)) {
            errorLabel.setForeground(forestGreen);
            errorLabel.setText("The web link category was created successfully.");
            newNameField.setText("");
            categories.add(newCat);
        } 
        else {
            errorLabel.setForeground(Color.RED);
            errorLabel.setText("An error occurred while trying to create the web link category.");
        }
        
        //Updates the tables and combobox
        updateTables();
        updateLinkCategoriesComboBox();
        
    }//GEN-LAST:event_addCategoryButtonActionPerformed

    private void categoryComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryComboBoxActionPerformed
        renameField.setText((String) categoryComboBox.getSelectedItem());
        editChange = renameField.getText();
    }//GEN-LAST:event_categoryComboBoxActionPerformed

    /**
     * The user click on the Rename Category button.
     * Attempts to rename a Web Link Category.
     * @param evt The event that happened to cause this method to be called.
     */
    private void renameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renameButtonActionPerformed
        WebLinkCategories updateCategory = null;

        int rename=0;
        
        // Make sure we entered some input
        if (renameField.getText().trim().equals("")) {
            errorLabel.setForeground(Color.RED);
            errorLabel.setText("A web link category name is required.");
            return;
        }

        // Search for the web link category to update, and make sure the new name doesn't already exist
        for (int i = 0; i < categories.size(); i++) {
            // Find the one we want to edit
            if (categories.get(i).getLinkCategory().equals((String) categoryComboBox.getSelectedItem())) {
                updateCategory = categories.get(i);
                rename=i;
            }

            // Look for one with the same name as the new one
            if (categories.get(i).getLinkCategory().equals(renameField.getText().trim())) {
                errorLabel.setForeground(Color.RED);
                errorLabel.setText("A web link category with that name already exists.");
                return;
            }
        }

        // Make sure we found it
        if (updateCategory == null) {
            errorLabel.setForeground(Color.RED);
            errorLabel.setText("An error occurred while trying to update the web link category.");
            return;
        }

        updateCategory.setLinkCategory(renameField.getText().trim());

        if (wlManager.updateWebLinkCategory(updateCategory)) {
            categories.set(rename, updateCategory);
            errorLabel.setForeground(forestGreen);
            errorLabel.setText("The web link category was updated successfully.");
        } 
        else {
            errorLabel.setForeground(Color.RED);
            errorLabel.setText("An error occurred while trying to update the web link category.");
        }
        
        //Updates the tables and combobox
        categoryComboBox.setSelectedIndex(0);
        updateLinkCategoriesComboBox();
        updateTables();
    }//GEN-LAST:event_renameButtonActionPerformed

    /**
     * The user clicks the Delete Category button.
     * Attempts to delete a Web Link Category.
     * @param evt The event that happened to cause this method to be called.
     */
    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        WebLinkCategories cat = null;
        int del=0;
        int answer = JOptionPane.showConfirmDialog(this,
                "Deleting a category will also delete any links it contains. If you\n"
                + "would like to save these links, please first move them to another\n"
                + "web link category. Are you sure you want to continue?",
                "Select An Option", JOptionPane.YES_NO_OPTION);
        if (answer != JOptionPane.YES_OPTION) {
            return;
        }

        // Search for the web link category
        for (int i = 0; i < categories.size(); i++) {
            if (categories.get(i).getLinkCategory().equals((String) categoryComboBox.getSelectedItem())) {
                cat = categories.get(i);
                del=i;
                break;
            }
        }

        if (cat == null) {
            errorLabel.setForeground(Color.RED);
            errorLabel.setText("An error occurred while trying to delete the web link category.");
            return;
        }

        Vector<WebLink> links = wlManager.obtainWebLinksFromACategory(cat);

        //If some links exist, remove them
        if (links.size() > 0) {
            for (int i = 0; i < links.size(); i++) {
                wlManager.deleteLink(links.get(i).getURLString());
            }
        }

        if (wlManager.removeLinkCategory(cat)) {
            categories.remove(del);
            errorLabel.setForeground(forestGreen);
            errorLabel.setText("The web link category was deleted successfully.");
        } else {
            errorLabel.setForeground(Color.RED);
            errorLabel.setText("An error occurred while trying to delete the web link category.");
        }

        //updates the tables and combobox
        categoryComboBox.setSelectedIndex(0);
        updateLinkCategoriesComboBox();
        updateTables();
    }//GEN-LAST:event_deleteButtonActionPerformed

    /**
     * The user clicks the down button.
     * Lowers the selected web link category in the display order if possible.
     * @param evt The event that happened to cause this method to be called.
     */
    private void downbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downbuttonActionPerformed
        int i = displayOrderTable.getSelectedRow();
        if (i == -1) {
            errorLabel.setForeground(Color.RED);
            errorLabel.setText("A web link category was not selected.");
        } else if (i + 1 < displayOrderTable.getRowCount()) {
            updateWebLinkOrder(i,1);
        }
    }//GEN-LAST:event_downbuttonActionPerformed

    /**
     * The user clicks the up button.
     * Raises the selected web link category in the display order if possible.
     * @param evt The event that happened to cause this method to be called.
     */
    private void upButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upButtonActionPerformed
        int i = displayOrderTable.getSelectedRow();
        if (i == -1) {
            errorLabel.setForeground(Color.RED);
            errorLabel.setText("A web link category was not selected.");
        } else if (i != 0) {
            updateWebLinkOrder(i,-1);
        }
    }//GEN-LAST:event_upButtonActionPerformed

    /**
     * Swaps the rank order of the <code>WebLinkCategories</code> <code>positionShift</code>
     * spaces from <code>selectedIndex</code>.
     * @param selectedIndex The index of the selected item.
     * @param positionShift The number of spaces away the web link to swap is.
     */
    private void updateWebLinkOrder(int selectedIndex, int positionShift) {
        WebLinkCategories c1 = categories.get(selectedIndex);
        WebLinkCategories c2 = categories.get(selectedIndex+positionShift);
        
        int oldRank = c1.getOrderRank();
        c1.setOrderRank(c2.getOrderRank());
        c2.setOrderRank(oldRank);
        
        wlManager.updateWebLinkCategory(c1);
        wlManager.updateWebLinkCategory(c2);
        categories = wlManager.obtainAllWebLinkCategories();
        
        updateTables();
        updateLinkCategoriesComboBox();
        displayOrderTable.setRowSelectionInterval(selectedIndex +positionShift, 
                selectedIndex + positionShift);
    }
    
    
    /**
     * This method is used to create the basic structure of the tables.
     */
    private void updateTables() {
        listTable.setModel(new MyDefaultTableModel(categories.size(), 1));
        listTable.getColumnModel().getColumn(0).setHeaderValue("Web Link Category");
        displayOrderTable.setModel(new MyDefaultTableModel(categories.size(), 1));
        displayOrderTable.getColumnModel().getColumn(0).setHeaderValue("Web Link Category");
        displayOrderTable.getColumnModel().getColumn(0).setPreferredWidth(248);
        int row=0;
        for(WebLinkCategories wc : categories)
        {
            listTable.setValueAt(wc.getLinkCategory(), row, 0);
            displayOrderTable.setValueAt(wc.getLinkCategory(), row, 0);
            row++;
        }
    }
    
    /**
     * Builds the category drop down list dynamically
     */
    private void updateLinkCategoriesComboBox() {
        categoryComboBox.removeAllItems();
        for (WebLinkCategories wc : categories) {
            categoryComboBox.addItem(wc.getLinkCategory());
        }
    }
    
    /**
     * Checks to make sure the user didn't make changes, and if they did
     * the window asks them if they want to save.
     */
    public void close()
    {
        if((newNameField.getText().equals("") && editChange.equals(renameField.getText())) 
                || adminService.getGeneralService().leaveWithoutSaving(this))
            dispose();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCategoryButton;
    private javax.swing.JPanel addPanel;
    private javax.swing.JScrollPane allCategoriesJScrollPane;
    private javax.swing.JComboBox<String> categoryComboBox;
    private javax.swing.JButton closeButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTable displayOrderTable;
    private javax.swing.JPanel displayPanel;
    private javax.swing.JButton downbutton;
    private javax.swing.JPanel editPanel;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JScrollPane listPane;
    private javax.swing.JTable listTable;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField newNameField;
    private javax.swing.JLabel newNameLabel;
    private javax.swing.JButton renameButton;
    private javax.swing.JTextField renameField;
    private javax.swing.JLabel renameLabel;
    private javax.swing.JButton upButton;
    private javax.swing.JTabbedPane weblinkPane;
    // End of variables declaration//GEN-END:variables

}
