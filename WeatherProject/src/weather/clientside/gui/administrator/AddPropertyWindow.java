package weather.clientside.gui.administrator;

import java.awt.Component;
import javax.swing.JOptionPane;
import weather.ApplicationControlSystem;
import weather.common.data.Property;
import weather.common.dbms.DBMSSystemManager;
import weather.common.gui.component.BUDialog;

/**
 * The <code>AddPropertyWindow</code> allows an administrator to add a new
 * property to the database.
 *
 * @author Xiang(2014)
 */
public class AddPropertyWindow extends BUDialog {

    private DBMSSystemManager dbms;
    private final ApplicationControlSystem finalAppControl;
    private String propType;

    /**
     * The constructor is used to create a addpropertywindow
     *
     * @param app
     * @param propertyType The type of property to create for the database.
     */
    public AddPropertyWindow(ApplicationControlSystem app, String propertyType) {

        super(app);
        this.dbms = appControl.getDBMSSystem();
        this.finalAppControl = app;
        propType = propertyType;
        String propertyTypeDisplayName;
        if (propType.equals("wunder_twovar")) {
            propertyTypeDisplayName = "Weather Underground Multi-Variable";
        } else if (propType.equals("wunder_nosolar")) {
            propertyTypeDisplayName = "Weather Underground No Solar Radiation";
        } else if (propType.equals("wunder")) {
            propertyTypeDisplayName = "Weather Underground Solar Radiation";
        } else if (propType.equals("general")) {
            propertyTypeDisplayName = "General Weather";
        } else if (propType.equals("gui")) {
            propertyTypeDisplayName = "GUI";
        } else { //if none of the above just go with general weather
            propertyTypeDisplayName = "General Weather";
        }
        
        initComponents();
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent evt) {
                if (missingData() == false) {
                    if (finalAppControl.getGeneralService()
                            .leaveWithoutSaving(thisComponent()) == true) {
                        dispose();
                    } else {
                        if (missingData() == false) {
                            Property newProperty = getNewProperty();
                            dbms.getPropertyManager().insertProperty(newProperty);
                            JOptionPane.showMessageDialog(thisComponent()
                                    , "Property has been added successfully.",
                                    "Weather Viewer", JOptionPane.INFORMATION_MESSAGE);
                        } else {
                            JOptionPane.showMessageDialog(thisComponent(),
                                    "Data missing could not save the property.");
                        }
                    }
                }
            }
        });

        //propertyNameErrorLabel.setVisible(false);
        //propertyDisplayNameErrorLabel.setVisible(false);
        //propertyValueErrorLabel.setVisible(false);
        propertyTypeLabel.setText("Creating a " + propertyTypeDisplayName + " property.");
        super.postInitialize(false);
    }

    /**
     * Returns this object as a <code>Component</code> for use by inner classes.
     * 
     * @return This object as a <code>Component</code>.
     */
    private Component thisComponent() {
        return this;
    }
    
    /**
     * Check if there exists an empty text field
     *
     * @return true if data is missing in any text field. False otherwise.
     */
    private boolean missingData() {
        propertyNameErrorLabel.setVisible(false);
        propertyValueErrorLabel.setVisible(false);
        propertyDisplayNameErrorLabel.setVisible(false);
        boolean blank = false;
        if (propertyNameTextField.getText().isEmpty()) {
            blank = true;
            propertyNameErrorLabel.setVisible(true);
        }
        if (propertyValueTextField.getText().isEmpty()) {
            blank = true;
            propertyValueErrorLabel.setVisible(true);
        }
        if (propertyDisplayNameTextField.getText().isEmpty()) {
            blank = true;
            propertyDisplayNameErrorLabel.setVisible(true);
        }
        return blank;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        editablebuttonGroup = new javax.swing.ButtonGroup();
        propertyTypeLabel = new javax.swing.JLabel();
        propertyNameLabel = new javax.swing.JLabel();
        propertyNameTextField = new javax.swing.JTextField();
        propertyValueLabel = new javax.swing.JLabel();
        propertyValueTextField = new javax.swing.JTextField();
        addPropertyButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        propertyNameErrorLabel = new javax.swing.JLabel();
        propertyValueErrorLabel = new javax.swing.JLabel();
        propertyDisplayNameLabel = new javax.swing.JLabel();
        propertyDisplayNameTextField = new javax.swing.JTextField();
        propertyDisplayNameErrorLabel = new javax.swing.JLabel();
        editableLabel = new javax.swing.JLabel();
        editableRadioButton = new javax.swing.JRadioButton();
        nonEditableRadioButton = new javax.swing.JRadioButton();
        descriptionLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        notesTextArea = new javax.swing.JTextArea();

        setTitle("Weather View - Add Property");
        setResizable(false);

        propertyTypeLabel.setText("Creating a propertyType property.");

        propertyNameLabel.setText("Property Name");

        propertyValueLabel.setText("Property Value");

        addPropertyButton.setText("Add Property");
        addPropertyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPropertyButtonActionPerformed(evt);
            }
        });

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        propertyNameErrorLabel.setForeground(new java.awt.Color(251, 51, 51));
        propertyNameErrorLabel.setText("* Property Name Required ");

        propertyValueErrorLabel.setForeground(new java.awt.Color(251, 51, 51));
        propertyValueErrorLabel.setText("* Property Value Required");

        propertyDisplayNameLabel.setText("Property Display Name");

        propertyDisplayNameErrorLabel.setForeground(new java.awt.Color(251, 51, 51));
        propertyDisplayNameErrorLabel.setText("* Property Display Name Required");

        editableLabel.setText("Editable");

        editablebuttonGroup.add(editableRadioButton);
        editableRadioButton.setSelected(true);
        editableRadioButton.setText("Editable");

        editablebuttonGroup.add(nonEditableRadioButton);
        nonEditableRadioButton.setText("Non-Editable");

        descriptionLabel.setText("Description of Property");

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        notesTextArea.setColumns(20);
        notesTextArea.setRows(5);
        jScrollPane1.setViewportView(notesTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(propertyNameLabel)
                                    .addComponent(propertyValueLabel)
                                    .addComponent(propertyDisplayNameLabel)
                                    .addComponent(editableLabel)
                                    .addComponent(descriptionLabel))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(propertyNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                                            .addComponent(propertyValueTextField)
                                            .addComponent(propertyDisplayNameTextField))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(propertyNameErrorLabel)
                                            .addComponent(propertyValueErrorLabel)
                                            .addComponent(propertyDisplayNameErrorLabel)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(editableRadioButton)
                                        .addGap(18, 18, 18)
                                        .addComponent(nonEditableRadioButton))))
                            .addComponent(jScrollPane1)
                            .addComponent(propertyTypeLabel)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(addPropertyButton)
                        .addGap(18, 18, 18)
                        .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(propertyTypeLabel)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(propertyNameLabel)
                    .addComponent(propertyNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(propertyNameErrorLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(propertyDisplayNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(propertyDisplayNameErrorLabel)
                    .addComponent(propertyDisplayNameLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(propertyValueLabel)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(propertyValueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(propertyValueErrorLabel)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editableLabel)
                    .addComponent(editableRadioButton)
                    .addComponent(nonEditableRadioButton))
                .addGap(18, 18, 18)
                .addComponent(descriptionLabel)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addPropertyButton)
                    .addComponent(closeButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * When close button is click, an warning will show up to remind the users
     * to save the new property
     *
     * @param evt
     */
    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        if (missingData() == false) {
            if (JOptionPane.showConfirmDialog(this,
                    "Do you want to save this property information?",
                    "Add Property",
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE)
                    == JOptionPane.NO_OPTION) {
                this.dispose();
            } else {
                addPropertyButtonActionPerformed(evt);
            }
        }
        dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    /**
     * When add property button is clicked the new property will be added to the
     * database
     *
     * @param evt
     */
    private void addPropertyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPropertyButtonActionPerformed

        if (this.getNewProperty() == null) {
            return;
        }
        dbms.getPropertyManager().insertProperty(this.getNewProperty());
        JOptionPane.showMessageDialog(this,
                "Property has been added successfully.",
                "Weather Viewer", JOptionPane.INFORMATION_MESSAGE);
        dispose();
    }//GEN-LAST:event_addPropertyButtonActionPerformed

    /**
     * Return an new property and add this property to the database
     *
     * @return the new property
     */
    private Property getNewProperty() {
        Property tempProperty = null;
        String propertyType = "";
        String propertyTypeDisplayName = "";
        String propertyName = "";
        String propertyDisplayName = "";
        String propertyValue = "";
        byte isEditable = 0;
        String notes = null;

        if (!missingData()) {
            try {
                if (propType.equals("wunder_twovar")) {
                    propertyType = propType;
                    propertyTypeDisplayName = "Weather Underground Multi-Variable";
                } else if (propType.equals("wunder_nosolar")) {
                    propertyType = propType;
                    propertyTypeDisplayName = "Weather Underground No Solar Radiation";
                } else if (propType.equals("wunder")) {
                    propertyType = propType;
                    propertyTypeDisplayName = "Weather Underground Solar Radiation";
                } else if (propType.equals("general")) {
                    propertyType = propType;
                    propertyTypeDisplayName = "General Weather";
                } else if (propType.equals("gui")) {
                    propertyType = propType;
                    propertyTypeDisplayName = "GUI";
                } else { //if none of the above just go with general weather
                    propertyType = "general";
                    propertyTypeDisplayName = "General Weather";
                }

                propertyName = propertyNameTextField.getText();
                propertyDisplayName = propertyNameTextField.getText();
                propertyValue = propertyValueTextField.getText();
                notes = notesTextArea.getText();

                if (editableRadioButton.isSelected()) {
                    isEditable = 1;
                } else {
                    isEditable = 0;
                }

                tempProperty = new Property();
                tempProperty.setPropertyType(propertyType);
                tempProperty.setPropertyTypeDisplayName(propertyTypeDisplayName);
                tempProperty.setPropertyName(propertyName);
                tempProperty.setPropertyDisplayName(propertyDisplayName);
                tempProperty.setPropertyValue(propertyValue);
                tempProperty.setIsEditable(isEditable);
                tempProperty.setNotes(notes);
                tempProperty.setDefaultValue(propertyValue);
                tempProperty.setPreviousValue("");
            } catch (NumberFormatException e) {
            }
        }

        return tempProperty;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addPropertyButton;
    private javax.swing.JButton closeButton;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JLabel editableLabel;
    private javax.swing.JRadioButton editableRadioButton;
    private javax.swing.ButtonGroup editablebuttonGroup;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton nonEditableRadioButton;
    private javax.swing.JTextArea notesTextArea;
    private javax.swing.JLabel propertyDisplayNameErrorLabel;
    private javax.swing.JLabel propertyDisplayNameLabel;
    private javax.swing.JTextField propertyDisplayNameTextField;
    private javax.swing.JLabel propertyNameErrorLabel;
    private javax.swing.JLabel propertyNameLabel;
    private javax.swing.JTextField propertyNameTextField;
    private javax.swing.JLabel propertyTypeLabel;
    private javax.swing.JLabel propertyValueErrorLabel;
    private javax.swing.JLabel propertyValueLabel;
    private javax.swing.JTextField propertyValueTextField;
    // End of variables declaration//GEN-END:variables
}
