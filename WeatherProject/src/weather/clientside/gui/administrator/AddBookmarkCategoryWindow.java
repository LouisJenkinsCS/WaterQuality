package weather.clientside.gui.administrator;

import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import weather.ApplicationControlSystem;
import weather.common.data.bookmark.BookmarkCategory;
import weather.common.data.bookmark.BookmarkDuration;
import weather.common.data.bookmark.BookmarkType;
import weather.common.data.bookmark.CategoryViewRights;
import weather.common.dbms.DBMSBookmarkCategoriesManager;
import weather.common.dbms.DBMSBookmarkEventTypesManager;
import weather.common.gui.component.BUDialog;

/**
 * The <code>AddBookmarkCategoryWindow</code> class creates a window
 * for adding new bookmark categories.
 * 
 * @author Eric Subach (2010)
 */
public class AddBookmarkCategoryWindow extends BUDialog {
    
    private DBMSBookmarkCategoriesManager categoryManager;

    /** Creates new form AddBookmarkCategoryWindow */
    public AddBookmarkCategoryWindow (ApplicationControlSystem appControl) {
        super(appControl);
        // Initialize vars and components.   
        // Get event manager to communicate with DBMS.
        categoryManager = appControl.getGeneralService().getDBMSSystem().getBookmarkCategoriesManager();
        initComponents();
        ButtonGroup g = new ButtonGroup();
        g.add(everyoneRadioButton);
        g.add(instructorOnlyRadioButton);
        getRootPane().setDefaultButton(addBookmarkCategoryButton);
        nameErrorLabel.setVisible(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent evt) {
                close();
            }
        });
        super.postInitialize(false);
    }
    
    /**
     * Helper method that displays the <code>leaveWithoutSaving()</code> dialog.
     */
    private void close(){
        if(!changed() || appControl.getGeneralService()
                .leaveWithoutSaving(this)) {
            dispose();
        }
    }
    
    /**
     * Helper method to determine whether or not something has been changed in 
     * the window.
     * 
     * @return True if something was changed, false otherwise.
     */
    private boolean changed(){
        return !(nameTextField.getText().isEmpty() && 
                noteTextPane.getText().isEmpty() && 
                everyoneRadioButton.isSelected());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ViewRightsButtonGroup = new javax.swing.ButtonGroup();
        nameLabel = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        noteLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        noteTextPane = new javax.swing.JTextPane();
        addBookmarkCategoryButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        maxNameLabel = new javax.swing.JLabel();
        maxNoteLabel = new javax.swing.JLabel();
        rightsLabel = new javax.swing.JLabel();
        everyoneRadioButton = new javax.swing.JRadioButton();
        instructorOnlyRadioButton = new javax.swing.JRadioButton();
        nameErrorLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Weather Viewer - Add New Bookmark Category ");

        nameLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        nameLabel.setText("Category Name:");

        noteLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        noteLabel.setText("Description:");

        jScrollPane1.setViewportView(noteTextPane);

        addBookmarkCategoryButton.setText("Add Bookmark Category");
        addBookmarkCategoryButton.setToolTipText("Create the new Bookmark Category");
        addBookmarkCategoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBookmarkCategoryButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Close");
        cancelButton.setToolTipText("Closes the window without saving");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        maxNameLabel.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        maxNameLabel.setText("(max 100 char)");

        maxNoteLabel.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        maxNoteLabel.setText("(max 250 char)");

        rightsLabel.setText("View Rights:");
        rightsLabel.setToolTipText("Allows the ability to select if everyone can view the category or just the instructor");

        ViewRightsButtonGroup.add(everyoneRadioButton);
        everyoneRadioButton.setSelected(true);
        everyoneRadioButton.setText("Everyone");

        ViewRightsButtonGroup.add(instructorOnlyRadioButton);
        instructorOnlyRadioButton.setText("Instructors Only");

        nameErrorLabel.setForeground(new java.awt.Color(204, 0, 0));
        nameErrorLabel.setText("Category Must Have A Name");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(noteLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(rightsLabel))
                            .addComponent(nameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(everyoneRadioButton)
                                .addGap(16, 16, 16)
                                .addComponent(instructorOnlyRadioButton))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE)
                            .addComponent(nameTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addBookmarkCategoryButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nameErrorLabel)
                        .addGap(0, 70, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(maxNoteLabel)
                        .addComponent(maxNameLabel))
                    .addComponent(cancelButton))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxNameLabel)
                    .addComponent(nameLabel))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(maxNoteLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(noteLabel)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rightsLabel)
                    .addComponent(everyoneRadioButton)
                    .addComponent(instructorOnlyRadioButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(addBookmarkCategoryButton)
                    .addComponent(nameErrorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addBookmarkCategoryButtonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBookmarkCategoryButtonActionPerformed
        BookmarkCategory category;
        String name, note;
        boolean success;

        // Get text from inputs.
        name = nameTextField.getText().trim();
        if (name.isEmpty()){
            nameErrorLabel.setText("Category Must Have A Name");
            nameErrorLabel.setVisible(true);
            return;
        }
        if(categoryManager.get(name) != null){
            nameErrorLabel.setText("Category Name Already In Use");
            nameErrorLabel.setVisible(true);
            return;
        }
        note = noteTextPane.getText().trim();
        category=new BookmarkCategory();
        category.setName(name);
        category.setNotes(note);
        category.setAlternative(BookmarkDuration.event);
        CategoryViewRights rights;
        if(everyoneRadioButton.isSelected()) {
            rights = CategoryViewRights.system_wide;
        }
        else {
            rights = CategoryViewRights.instructor_only;
        }
        category.setViewRights(rights);
        int userNum = appControl.getGeneralService().getUser().getUserNumber();
        category.setCreatedBy(userNum);
        success = categoryManager.add(category);
        if (success) {
            //Add default <None> subcategory
            BookmarkType type = new BookmarkType(category.getBookmarkCategoryNumber(), "<None>",
                    userNum, rights, "for straggling bookmarks");
            DBMSBookmarkEventTypesManager typesManager = appControl
                    .getAdministratorControlSystem().getGeneralService()
                    .getDBMSSystem().getBookmarkTypesManager();

            if (typesManager.add(type)) {
                JOptionPane.showMessageDialog(this, "Bookmark Category Has Been Added",
                        "Bookmark Category Added", JOptionPane.INFORMATION_MESSAGE);
                dispose();
            } else {
                appControl.getAdministratorControlSystem().getGeneralService()
                        .getDBMSSystem().getBookmarkCategoriesManager().removeOne(category);
                JOptionPane.showMessageDialog(this, "Bookmark Category Failed to Be Added",
                        "Bookmark Category Not Added", JOptionPane.INFORMATION_MESSAGE);
                dispose();
            }
        }
        else {
            JOptionPane.showMessageDialog (this, "Bookmark Category Failed to Be Added",
                    "Bookmark Category Not Added", JOptionPane.INFORMATION_MESSAGE);
            dispose();
        }
    }//GEN-LAST:event_addBookmarkCategoryButtonActionPerformed

    private void cancelButtonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        close();
    }//GEN-LAST:event_cancelButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup ViewRightsButtonGroup;
    private javax.swing.JButton addBookmarkCategoryButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JRadioButton everyoneRadioButton;
    private javax.swing.JRadioButton instructorOnlyRadioButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel maxNameLabel;
    private javax.swing.JLabel maxNoteLabel;
    private javax.swing.JLabel nameErrorLabel;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JLabel noteLabel;
    private javax.swing.JTextPane noteTextPane;
    private javax.swing.JLabel rightsLabel;
    // End of variables declaration//GEN-END:variables

}
