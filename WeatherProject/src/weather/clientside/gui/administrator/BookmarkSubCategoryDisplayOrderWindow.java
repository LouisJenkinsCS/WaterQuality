package weather.clientside.gui.administrator;

import java.util.Vector;
import javax.swing.JScrollPane;
import weather.ApplicationControlSystem;
import weather.clientside.utilities.MyDefaultTableModel;
import weather.common.data.bookmark.BookmarkCategory;
import weather.common.data.bookmark.BookmarkType;
import weather.common.dbms.DBMSBookmarkCategoriesManager;
import weather.common.dbms.DBMSBookmarkEventTypesManager;
import weather.common.gui.component.BUDialog;
import weather.common.gui.component.IconProperties;

/**
 *
 * @author Justin Enslin (2012)
 * @version 2012
 */
public class BookmarkSubCategoryDisplayOrderWindow extends BUDialog {
    
    DBMSBookmarkEventTypesManager subCategoryManager;
    DBMSBookmarkCategoriesManager categoryManager;

    /**
     * Creates a new <code>BookmarkSubCategoryDisplayOrderWindow</code>.
     * @param appControl The application control system.
     */
    public BookmarkSubCategoryDisplayOrderWindow(
            ApplicationControlSystem appControl) {
        super(appControl);
        initComponents();
        initialize();
        categoryComboBox.setSelectedIndex(0);
        super.postInitialize(false);
    }
    
    /**
     * Creates a new <code>BookmarkSubCategoryDisplayOrderWindow</code> with the
     * given category selected.
     * @param appControl The application control system.
     * @param category The name of a category to set as selected.
     */
    public BookmarkSubCategoryDisplayOrderWindow(
            ApplicationControlSystem appControl, String category) {
        super(appControl);
        initComponents();
        initialize();
        categoryComboBox.setSelectedItem(category);
        super.postInitialize(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        displayOrderPanel = new javax.swing.JPanel();
        categoriesScrollPane = new javax.swing.JScrollPane();
        categoriesTable = new javax.swing.JTable();
        upButton = new javax.swing.JButton();
        downButton = new javax.swing.JButton();
        errorLabel = new javax.swing.JLabel();
        closeButton = new javax.swing.JButton();
        categoryComboBox = new javax.swing.JComboBox<String>();
        categoryLabel = new javax.swing.JLabel();

        categoriesScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        this.categoriesScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);

        this.categoriesScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);

        categoriesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        categoriesScrollPane.setViewportView(categoriesTable);

        upButton.setIcon(IconProperties.getArrowUpSmallIcon());
        upButton.setToolTipText("Move the currently selected web link category up one index");
        upButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upButtonActionPerformed(evt);
            }
        });

        downButton.setIcon(IconProperties.getArrowDownSmallIcon());
        downButton.setToolTipText("Move the currently selected web link category down one index");
        downButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downButtonActionPerformed(evt);
            }
        });

        errorLabel.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        errorLabel.setForeground(new java.awt.Color(255, 51, 51));
        errorLabel.setIcon(IconProperties.getResourceInactiveIconImage());
        errorLabel.setText("A Bookmark Sub-Category Was Not Selected");
        errorLabel.setVisible(false);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout displayOrderPanelLayout = new javax.swing.GroupLayout(displayOrderPanel);
        displayOrderPanel.setLayout(displayOrderPanelLayout);
        displayOrderPanelLayout.setHorizontalGroup(
            displayOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displayOrderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(displayOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(displayOrderPanelLayout.createSequentialGroup()
                        .addComponent(errorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                        .addComponent(closeButton))
                    .addGroup(displayOrderPanelLayout.createSequentialGroup()
                        .addComponent(categoriesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(displayOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(downButton, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(upButton, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        displayOrderPanelLayout.setVerticalGroup(
            displayOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displayOrderPanelLayout.createSequentialGroup()
                .addGroup(displayOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(displayOrderPanelLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(upButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(downButton)
                        .addGap(0, 191, Short.MAX_VALUE))
                    .addComponent(categoriesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(displayOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(errorLabel)
                    .addComponent(closeButton))
                .addContainerGap())
        );

        categoryComboBox.setModel(new javax.swing.DefaultComboBoxModel());
        categoryComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryComboBoxActionPerformed(evt);
            }
        });

        categoryLabel.setText("Category:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(categoryLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(categoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(210, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(displayOrderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(categoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(categoryLabel))
                .addContainerGap(306, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(37, Short.MAX_VALUE)
                    .addComponent(displayOrderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initialize(){
        setTitle("Weather Viewer - Edit Bookmark Sub-Category Display Order");
        categoryManager = appControl.getDBMSSystem().
                getBookmarkCategoriesManager();
        subCategoryManager = appControl.getDBMSSystem().
                getBookmarkTypesManager();
        Vector<BookmarkCategory> categories = categoryManager.obtainAll();
        for(BookmarkCategory category : categories){
            categoryComboBox.addItem(category.getName());
        }
    }
    
    private void upButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upButtonActionPerformed
        Vector<BookmarkType> categories = subCategoryManager.obtainAll(
                categoryManager.get((String)categoryComboBox.getSelectedItem()).
                getBookmarkCategoryNumber());
        int i = categoriesTable.getSelectedRow();

        //Nothing selected
        if (i == -1) {
            errorLabel.setVisible(true);
            return;
        }
        //First item selected
        if (i == 0) {
            errorLabel.setVisible(false);
            // do nothing - no need to tell the user the obvious
            return;
        }

        errorLabel.setVisible(false);
        int old_Rank = categories.get(i).getOrderRank();
        categories.get(i).setOrderRank(categories.get(i - 1).getOrderRank());
        categories.get(i - 1).setOrderRank(old_Rank);
        subCategoryManager.update(categories.get(i));
        subCategoryManager.update(categories.get(i - 1));
        this.updateTable();
        categoriesTable.setRowSelectionInterval(i - 1, i - 1);
    }//GEN-LAST:event_upButtonActionPerformed

    private void downButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downButtonActionPerformed
        Vector<BookmarkType> categories = subCategoryManager.obtainAll(
                categoryManager.get((String)categoryComboBox.getSelectedItem()).
                getBookmarkCategoryNumber());
        int i = categoriesTable.getSelectedRow();
        if (i == -1) {
            errorLabel.setVisible(true);
            return;
        }
        if (i == categoriesTable.getRowCount() - 1) {
            errorLabel.setVisible(false);
            return;
        }
        errorLabel.setVisible(false);
        int old_Rank = categories.get(i).getOrderRank();
        categories.get(i).setOrderRank(categories.get(i + 1).getOrderRank());
        categories.get(i + 1).setOrderRank(old_Rank);
        subCategoryManager.update(categories.get(i));
        subCategoryManager.update(categories.get(i + 1));
        this.updateTable();
        categoriesTable.setRowSelectionInterval(i + 1, i + 1);
    }//GEN-LAST:event_downButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void categoryComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryComboBoxActionPerformed
        updateTable();
    }//GEN-LAST:event_categoryComboBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane categoriesScrollPane;
    private javax.swing.JTable categoriesTable;
    private javax.swing.JComboBox<String> categoryComboBox;
    private javax.swing.JLabel categoryLabel;
    private javax.swing.JButton closeButton;
    private javax.swing.JPanel displayOrderPanel;
    private javax.swing.JButton downButton;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JButton upButton;
    // End of variables declaration//GEN-END:variables

    private void updateTable() {
        BookmarkCategory category = categoryManager.get(
                (String)categoryComboBox.getSelectedItem());
        Vector<BookmarkType> subCategories = subCategoryManager.obtainAll(
                category.getBookmarkCategoryNumber());
        categoriesTable.setModel(new MyDefaultTableModel(subCategories.size(), 1));
        int i=0;
        categoriesTable.getColumnModel().getColumn(0).
                setHeaderValue("Bookmark Sub-Category Name");
        categoriesTable.getColumnModel().getColumn(0).
                setPreferredWidth(categoriesScrollPane.getWidth());
        for(BookmarkType subCategory:subCategories){
            categoriesTable.setValueAt(subCategory.getName(), i++, 0);
        }
    }
}
