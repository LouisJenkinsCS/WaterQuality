package weather.clientside.gui.administrator;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import weather.ApplicationControlSystem;
import weather.clientside.gui.component.GUIComponentFactory;
import weather.common.dbms.DBMSBookmarkCategoriesManager;
import weather.common.gui.component.BUDialog;

/**
 * This window allows the user to add, edit, or delete the bookmark categories
 * in a generated list.
 * @author Justin Enslin (2012)
 */
public class ManageBookmarkCategoryDialog extends BUDialog {
    
    DBMSBookmarkCategoriesManager categoryManager;
    JTable categoryTable;
    /**
     * The column number of the category header.
     */
    private final int categoryColumnNumber = 0;
    /**
     * The column number of the description header.
     */
    private final int decriptionColumnNumber = 1;

    /**
     * Opens a window to manage the bookmark categories.
     * @param appControl The application control system.
     * @param shouldCenter True if this object should be centered on the monitor
     * that currently shows the window with focus; False if an offset from the
     * window with focus should be used.
     */
    public ManageBookmarkCategoryDialog(ApplicationControlSystem appControl,
            boolean shouldCenter) {
        super(appControl);
        initialize();
        int width = 885 + this.getInsets().left + this.getInsets().right;
        int height = 332 + this.getInsets().top + this.getInsets().bottom;
        Dimension thisDim = new Dimension(width, height);
        this.setSize(thisDim);
        this.setPreferredSize(thisDim);
        this.setMaximumSize(thisDim);
        this.setMinimumSize(thisDim);
        pack();
        super.postInitialize(shouldCenter);
    }
    
    /**
     * Returns this object as a <code>Component</code> for use by inner classes.
     * @return This object as a <code>Component</code>.
     */
    private Component thisComponent() {
        return this;
    }
    
    /**
     * Initializes the GUI components.
     */
    private void initialize(){
        initComponents();
        nothingSelectedLabel.setVisible(false);
        categoryManager = appControl.getDBMSSystem().
                getBookmarkCategoriesManager();
        update();
    }
    
    /**
     * Helper function to update the table.
     */
    private void update(){
        categoryTable = GUIComponentFactory.
                getBookmarkCategoryTable(categoryManager, 
                appControl.getGeneralService().getUser());
        categoryTable.setAutoCreateRowSorter(true);
        categoryTable.getColumnModel().getColumn(categoryColumnNumber).setHeaderValue("Category");
        categoryTable.getColumnModel().getColumn(decriptionColumnNumber).setHeaderValue("Description");
        scrollPane.setViewportView(categoryTable);
        categoryTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        this.validate();
        categoryTable.addMouseListener(doubleClick);
    }

    /**
     * MouseAdapter to open the double-clicked category in the edit window.
     */
    MouseAdapter doubleClick = new MouseAdapter() {
        @Override
        public void mouseClicked(MouseEvent e) {
            if (e.getClickCount() == 2) {
                JTable target = (JTable) e.getSource();
                String category = (String) target.getValueAt(target.getSelectedRow(), 0);
                if ("<Uncategorized>".equals(category)) {
                    JOptionPane.showMessageDialog(thisComponent(),
                            "You cannot alter the default category",
                            "Update Not Allowed", 
                            JOptionPane.INFORMATION_MESSAGE);
                    return;
                }
                new EditBookmarkCategoryDialog(appControl,
                        (String) categoryTable.
                        getValueAt(categoryTable.getSelectedRow(), 0));
            }
        }
    };

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        closeButton = new javax.swing.JButton();
        newCategoryButton = new javax.swing.JButton();
        removeCategoryButton = new javax.swing.JButton();
        scrollPane = new javax.swing.JScrollPane();
        manageSubCategoriesButton = new javax.swing.JButton();
        nothingSelectedLabel = new javax.swing.JLabel();
        displayOrderButton = new javax.swing.JButton();
        editLabel = new javax.swing.JLabel();

        setTitle("Weather Viewer - Manage Bookmark Categories");
        setResizable(false);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        closeButton.setText("Close");
        closeButton.setToolTipText("Close the window without saving");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        getContentPane().add(closeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(812, 276, -1, -1));

        newCategoryButton.setText("Add Category...");
        newCategoryButton.setToolTipText("Create a new category");
        newCategoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newCategoryButtonActionPerformed(evt);
            }
        });
        getContentPane().add(newCategoryButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 276, -1, -1));

        removeCategoryButton.setText("Delete Selected Category");
        removeCategoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeCategoryButtonActionPerformed(evt);
            }
        });
        getContentPane().add(removeCategoryButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(502, 276, -1, -1));
        getContentPane().add(scrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 12, 865, 252));

        manageSubCategoriesButton.setText("Manage Sub-Categories...");
        manageSubCategoriesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageSubCategoriesButtonActionPerformed(evt);
            }
        });
        getContentPane().add(manageSubCategoriesButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(314, 276, -1, -1));

        nothingSelectedLabel.setForeground(new java.awt.Color(204, 0, 0));
        nothingSelectedLabel.setText("No Category Selected");
        getContentPane().add(nothingSelectedLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(684, 280, -1, -1));

        displayOrderButton.setText("Change Display Order...");
        displayOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayOrderButtonActionPerformed(evt);
            }
        });
        getContentPane().add(displayOrderButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(138, 276, -1, -1));

        editLabel.setText("To edit a category, double-click on its name.");
        getContentPane().add(editLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 304, 270, 16));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void newCategoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newCategoryButtonActionPerformed
        new AddBookmarkCategoryWindow(appControl).
                setModalExclusionType(ModalExclusionType.APPLICATION_EXCLUDE);
    }//GEN-LAST:event_newCategoryButtonActionPerformed

    private void removeCategoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeCategoryButtonActionPerformed
        if(categoryTable.getSelectedRow() == -1){
            nothingSelectedLabel.setVisible(true);
        }
        else {
            String categoryToRemove = (String)categoryTable.
                        getValueAt(categoryTable.getSelectedRow(), 0);
            if("<Uncategorized>".equals(categoryToRemove)){
                JOptionPane.showMessageDialog(this, "You cannot remove the default category", 
                        "Illegal Delete", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            int opt = JOptionPane.showConfirmDialog(this, "Warning: This will delete this category and\nall sub-categories associated with it.\n"
                    + "Do you want to continue?", "Delete Bookmark Category",JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if (opt == JOptionPane.NO_OPTION) {
                return;
            }
            else{
                if(appControl.getAdministratorControlSystem()
                        .getGeneralService().getDBMSSystem().getBookmarkCategoriesManager()
                        .removeOne(categoryManager.searchByName(categoryToRemove))){
                    JOptionPane.showMessageDialog(this, "Category Removed Successfully",
                            "Remove Bookmark Category", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "Category Not Removed",
                            "Remove Bookmark Category Error", JOptionPane.ERROR_MESSAGE);
                }
            }

            nothingSelectedLabel.setVisible(false);
        }
        update();
    }//GEN-LAST:event_removeCategoryButtonActionPerformed

    private void manageSubCategoriesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageSubCategoriesButtonActionPerformed
        int index = categoryTable.getSelectedRow();
        if (index != -1) {
            String category = (String) categoryTable.getValueAt(index, 0);
            if ("<Uncategorized>".equals(category)) {
                JOptionPane.showMessageDialog(this, "You cannot change the subcategories of the default category",
                        "Changes Not Allowed", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            new ManageBookmarkSubCategoryDialog(appControl,
                    (String) categoryTable.getValueAt(index, 0));
        } else {
            new ManageBookmarkSubCategoryDialog(appControl);
        }
    }//GEN-LAST:event_manageSubCategoriesButtonActionPerformed

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        update();
    }//GEN-LAST:event_formWindowGainedFocus

    private void displayOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayOrderButtonActionPerformed
        new BookmarkCategoryDisplayOrderWindow(appControl);
    }//GEN-LAST:event_displayOrderButtonActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JButton displayOrderButton;
    private javax.swing.JLabel editLabel;
    private javax.swing.JButton manageSubCategoriesButton;
    private javax.swing.JButton newCategoryButton;
    private javax.swing.JLabel nothingSelectedLabel;
    private javax.swing.JButton removeCategoryButton;
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables
}
