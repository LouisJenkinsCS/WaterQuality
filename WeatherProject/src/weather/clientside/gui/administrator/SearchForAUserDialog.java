package weather.clientside.gui.administrator;

import java.awt.Dimension;
import java.util.Vector;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import weather.AdministratorControlSystem;
import weather.clientside.utilities.MyDefaultTableModel;
import weather.common.data.User;
import weather.common.data.UserType;
import weather.common.dbms.DBMSSystemManager;
import weather.common.gui.component.BUDialog;
/**
 * The <code>SearchForAUserDialog</code> class creates a form that allows
 * for searching for a user.
 * @author Alex Funk
 * @version 2011
 */
public class SearchForAUserDialog extends BUDialog {
    private DBMSSystemManager dbms;
    private Vector<User> users = new Vector<>();
    private String userName;
    private SEARCH_TYPES type;
    private boolean isAdmin;

    public enum SEARCH_TYPES{FIRST_NAME, LAST_NAME, LOGIN_ID};

    /** 
     * Creates new form SearchForAUserDialog.
     * 
     * @param admin Control system unique to the administrator.
     * @param userName Name of user to be searched.
     * @param type The enum to define a user.
     * @param isAdmin Whether on not administrative abilities are active.
     */
    public SearchForAUserDialog(AdministratorControlSystem admin, String userName,
            SEARCH_TYPES type, boolean isAdmin) {
        super(admin);
        this.isAdmin = isAdmin;
        dbms = admin.getGeneralService().getDBMSSystem();
        this.userName=userName;
        this.type=type;
        this.setTitle("Weather Viewer - Result Search For " + userName);
        initComponents();
        refreshWindow();
        
        int width = 457 + this.getInsets().left + this.getInsets().right;
        int height = 347 + this.getInsets().top + this.getInsets().bottom;
        Dimension thisDim = new Dimension(width, height);
        this.setSize(thisDim);
        this.setPreferredSize(thisDim);
        this.setMaximumSize(thisDim);
        this.setMinimumSize(thisDim);
        pack();
        
        super.postInitialize(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        resultdPanel = new javax.swing.JPanel();
        instructionLabel = new javax.swing.JLabel();
        scrollpane = new javax.swing.JScrollPane();
        resultsTable = new javax.swing.JTable();
        ;
        noResultsPanel = new javax.swing.JPanel();
        SearckAgainButton = new javax.swing.JButton();
        MessageLabel = new javax.swing.JLabel();

        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        resultdPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        instructionLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        instructionLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        instructionLabel.setText("Double-Click To Edit A User");
        resultdPanel.add(instructionLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 433, 24));

        resultsTable.setAutoCreateRowSorter(true);
        resultsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        )
    );
    resultsTable.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            resultsTableMouseClicked(evt);
        }
    });
    scrollpane.setViewportView(resultsTable);

    resultdPanel.add(scrollpane, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 33, 433, 290));

    getContentPane().add(resultdPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 12, 433, 323));

    noResultsPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

    SearckAgainButton.setText("Try Another Search");
    SearckAgainButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            SearckAgainButtonActionPerformed(evt);
        }
    });
    noResultsPanel.add(SearckAgainButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(144, 298, 145, 25));

    MessageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    MessageLabel.setToolTipText("");
    noResultsPanel.add(MessageLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 433, 298));

    getContentPane().add(noResultsPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 12, 433, 323));

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void refreshWindow() {
        users.clear();
        users = generateUserList(userName, type);
        if (users.isEmpty()){
            this.noResultsPanel.setVisible(true);
            this.resultdPanel.setVisible(false);
            String labelText = "<html><center>No results were found for<br/>" + userName
                    + ".<br/>Please click below to try again.</center></html>";
            this.MessageLabel.setText(labelText);
        }
        else{
            this.noResultsPanel.setVisible(false);
            this.resultdPanel.setVisible(true);
            this.initializeTable();
        }
    }
        
    private void resultsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultsTableMouseClicked
        JTable target = (JTable) evt.getSource();

        if (evt.getClickCount() == 2) {
            Vector<User> current = users;
            User value = (User) current.get(target.getSelectedRow());
            User user = dbms.getUserManager().obtainUser(value.getLoginId());
            if (user != null) {
                new AddEditUserWindow(adminService, isAdmin, user);
                refreshWindow();
            }
        }
    }//GEN-LAST:event_resultsTableMouseClicked

    private void SearckAgainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearckAgainButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_SearckAgainButtonActionPerformed

    /**
     * This method generates the user list that is used to populate the table.
     * @param name Name that has been searched.
     * @param type The enum to define a user.
     * @return The user list that is used to populate the table.
     */
    private Vector<User> generateUserList(String name, SEARCH_TYPES type) {
        Vector<User> userList = new Vector<>();
        if (type == SEARCH_TYPES.LOGIN_ID) {
            if (dbms.getUserManager().obtainUsersWithLoginIDSubstring(name) != null) {
                userList = dbms.getUserManager().obtainUsersWithLoginIDSubstring(name);
            }
        }
        if (type == SEARCH_TYPES.FIRST_NAME) {
            if (dbms.getUserManager().obtainUsersWithFirstNameSubstring(name)!=null) {
                userList = dbms.getUserManager().obtainUsersWithFirstNameSubstring(name);
            }
        }
        if (type == SEARCH_TYPES.LAST_NAME) {
            if(dbms.getUserManager().obtainUsersWithLastNameSubstring(name)!=null) {
                userList = dbms.getUserManager().obtainUsersWithLastNameSubstring(name);
            }
        }
        
        //Remove only students and guests if user in mot an administrator.
        if(!isAdmin) {
            Vector<User> returnList = new Vector<>();
            for (User user : userList) {
                if (user.getUserType() == UserType.guest
                        || user.getUserType() == UserType.student) {
                    returnList.add(user);
                }
            }
            return returnList;
        }
        
        //Only administrators get here, so return all users.
        return userList;
    }

    /**
     * This method is used to create the basic structure of the table.  Since
     * the headers do not appear for an unknown reason inside a tabbed canvas
     * I was forced to add an extra row and insert them myself.
     */
    private void initializeTable() {
        resultsTable.getColumnModel().getColumn(0).setPreferredWidth(35);
        resultsTable.getColumnModel().getColumn(1).setPreferredWidth(25);
        resultsTable.getColumnModel().getColumn(2).setPreferredWidth(25);
        resultsTable.getColumnModel().getColumn(3).setPreferredWidth(25);
        resultsTable.setModel(new MyDefaultTableModel(users.size(), 4));
        resultsTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        resultsTable.getColumnModel().getColumn(0).setHeaderValue("User Name");
        resultsTable.getColumnModel().getColumn(1).setHeaderValue("Last Name");
        resultsTable.getColumnModel().getColumn(2).setHeaderValue("First Name");
        resultsTable.getColumnModel().getColumn(3).setHeaderValue("User Type");
        for (int i = 0, j = 0; j < users.size(); i++, j++) {
            resultsTable.setValueAt(" " + users.get(j).getLoginId(), i, 0);
            resultsTable.setValueAt(" " + users.get(j).getLastName(), i, 1);
            resultsTable.setValueAt(" " + users.get(j).getFirstName(), i, 2);
            resultsTable.setValueAt(" " + users.get(j).getUserType().name(), i, 3);
        }
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel MessageLabel;
    private javax.swing.JButton SearckAgainButton;
    private javax.swing.JLabel instructionLabel;
    private javax.swing.JPanel noResultsPanel;
    private javax.swing.JPanel resultdPanel;
    private javax.swing.JTable resultsTable;
    private javax.swing.JScrollPane scrollpane;
    // End of variables declaration//GEN-END:variables

}
