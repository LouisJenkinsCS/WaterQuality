package weather.clientside.gui.administrator;

import java.awt.Color;
import java.awt.Component;
import java.util.Vector;
import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import weather.ApplicationControlSystem;
import weather.common.data.Course;
import weather.common.data.User;
import weather.common.dbms.DBMSSystemManager;
import weather.common.dbms.DBMSUserManager;
import weather.common.gui.component.BUDialog;

/**
 * The <code>ListOfStudentsInClassWindow</code> class creates a form that
 * lists all students in a given class.
 * @author Joe Horro
 * @version 2011
 */
public class ListOfStudentsInClassWindow extends BUDialog {

    private DBMSSystemManager dbms;
    private DBMSUserManager userMngr;
    // color variable for table rows
    Color rowColor = new Color(123,197,229);
    Color altRowColor = Color.WHITE;

    /**
     * Builds the list with all students in a specified course
     * @param appControl The control system.
     * @param c The course being listed.
     */
    public ListOfStudentsInClassWindow(ApplicationControlSystem appControl, Course c) {
        super(appControl);
        this.dbms = appControl.getGeneralService().getDBMSSystem();
        userMngr = dbms.getUserManager();

        this.setTitle("Weather Viewer - Students in " + c.getClassName());
        initComponents();

        CustomizedTableModel model = new CustomizedTableModel(userMngr.obtainAllStudentsInCourse(c));
        studentListjTable.setModel(model);

        studentListjTable.setAutoCreateColumnsFromModel(true);
        studentListjTable.setRowSelectionAllowed(false);
        studentListjTable.setAutoCreateRowSorter(true);
        studentListjTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        for(int i = 0; i < studentListjTable.getColumnModel().getColumnCount(); i++){
            TableColumn tc = studentListjTable.getColumnModel().getColumn(i);
            if (i == 0)
                tc.setPreferredWidth(20);
            if ( i == 1 || i == 2)
                tc.setPreferredWidth(15);
            if (i == 3)
                tc.setPreferredWidth(100);
        }

        this.setResizable(false);
        super.postInitialize(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        studentListjTable = new JTable() {

            @Override
            public Component prepareRenderer(TableCellRenderer renderer, int Index_row, int Index_col) {
                Component comp = super.prepareRenderer(renderer, Index_row, Index_col);
                //even index, selected or not selected
                if (Index_row % 2 == 0 && !isCellSelected(Index_row, Index_col)) {
                    comp.setBackground(rowColor);
                } else {
                    comp.setBackground(altRowColor);
                }
                return comp;
            }
        };
        closeWindowjButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        studentListjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        studentListjTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                studentListjTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(studentListjTable);

        closeWindowjButton.setText("Close");
        closeWindowjButton.setToolTipText("Closes this window and returns to the edit class window ");
        closeWindowjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeWindowjButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(closeWindowjButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 629, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(closeWindowjButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeWindowjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeWindowjButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_closeWindowjButtonActionPerformed

    private void studentListjTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_studentListjTableMouseClicked
        if(evt.getClickCount() == 2)
        {
            JTable target = (JTable)evt.getSource();
            int row = target.getSelectedRow();
            // @TODO fill in associated logic after double click.
        }
    }//GEN-LAST:event_studentListjTableMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeWindowjButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable studentListjTable;
    // End of variables declaration//GEN-END:variables

    /**
     * Custom Inner class for use with jTable.
     * Modify this model and its data to alter the table.
     */
    private class CustomizedTableModel extends AbstractTableModel {

        private String[] columnNames;
        private Vector<User> users;

        CustomizedTableModel(Vector<User> users) {
            // fetch column names and what ever else is needed from the database
            this.users = users;
            columnNames = new String[] {"Login Identification", "Last Name",
             "First Name", "Email Address", "Last Login Date"};
        }

        @Override
        public int getColumnCount() {
            return columnNames.length;
        }

        @Override
        public int getRowCount() {
            return users.size();
        }

        @Override
        public String getColumnName(int col) {
            return columnNames[col];
        }

        // Update this method to properly get data to build the jTable
        // Talk to Joe H. if you need help
        @Override
        public Object getValueAt(int row, int col) {
            // get data per row
            if (col == 0) {
                // login id
                return users.elementAt(row).getLoginId();
            } else if (col == 1) {
                // last name
                return users.elementAt(row).getLastName();
            } else if (col == 2) {
                // firstname
                return users.elementAt(row).getFirstName();
            } else if (col == 3) {
                // email
                return users.elementAt(row).getEmailAddress();
            } else if (col == 4) {
                // last log in time
                return users.elementAt(row).getLastLogInDateInPrettyFormat();
            }
            return "no data";
        }

        /**
         * Gets the class in a certain column.
         * @param c The value of the column
         * @return The class in that column.
         */
        @Override
        public Class getColumnClass(int c) {
            return getValueAt(0, c).getClass();
        }
    }

}
