package weather.clientside.gui.administrator;

import java.awt.Dimension;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import javax.swing.JOptionPane;
import weather.AdministratorControlSystem;
import weather.clientside.gui.client.ChooseDate;
import weather.common.dbms.DBMSUserManager;
import weather.common.gui.component.BUDialog;
import weather.common.utilities.ResourceTimeManager;

/**
 * A form to delete all students who have not logged in since a given date and 
 * time.
 * @author Brian Bankes
 */

public class PurgeStudentsWindow extends BUDialog {
    private final DBMSUserManager userManager;
    private final DateFormat cutoffFormat = 
            new SimpleDateFormat("MM/dd/yy hh:mm a");
    private Date cutoffDate = null;
    
    /**
     * Constructor.
     * @param adminService Control system unique to the administrator.
     */
    public PurgeStudentsWindow(AdministratorControlSystem adminService) {
        super(adminService);
        userManager = adminService.getGeneralService().getDBMSSystem().
                getUserManager();
        
        initComponents();
        
        int width = 336 + this.getInsets().left + this.getInsets().right;
        int height = 170 + this.getInsets().top + this.getInsets().bottom;
        Dimension thisDim = new Dimension(width, height);
        this.setSize(thisDim);
        this.setPreferredSize(thisDim);
        this.setMaximumSize(thisDim);
        this.setMinimumSize(thisDim);
        pack();
        super.postInitialize(true);
    }

    

    /** 
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cutoffTimeButton = new javax.swing.JButton();
        cutoffTimeLabel = new javax.swing.JLabel();
        PurgeButton = new javax.swing.JButton();
        topLabel = new javax.swing.JLabel();
        closeButton = new javax.swing.JButton();

        setTitle("Weather Viewer - Purge Inactive Students");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cutoffTimeButton.setText("Select Cutoff Time");
        cutoffTimeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutoffTimeButtonActionPerformed(evt);
            }
        });
        getContentPane().add(cutoffTimeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 72, 150, 26));

        cutoffTimeLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        cutoffTimeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cutoffTimeLabel.setText("<html><center>No Cutoff Time Selected.</center></html>");
        getContentPane().add(cutoffTimeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(174, 72, 150, 48));

        PurgeButton.setText("Purge Students");
        PurgeButton.setToolTipText("");
        PurgeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PurgeButtonActionPerformed(evt);
            }
        });
        getContentPane().add(PurgeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 132, 150, 26));

        topLabel.setText("<html><center>This window will remove all student who have not been active since a certain cutoff time.  After selecting that time, you cam purge the students.</center></html>");
        getContentPane().add(topLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 12, 312, 48));

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        getContentPane().add(closeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(249, 132, 75, 26));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cutoffTimeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutoffTimeButtonActionPerformed
        ChooseDate tempDialog = 
                new ChooseDate(lastHour(cutoffDate == null ? new Date()
                        : cutoffDate), false);
        
        //Stop if no date was selected.
        Date returnedDate = tempDialog.getSelectedDate();
        if (returnedDate == null) {
            return;
        }
        
        //Make sure selected date isn't in the future.
        if(returnedDate.getTime() > System.currentTimeMillis()) {
            JOptionPane.showMessageDialog(this, 
                    "You cannot select a time in the future.", 
                    "Time Not Valid", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        //Set new time.
       cutoffDate = returnedDate;
       cutoffTimeButton.setText("Change Cutoff Time");
       cutoffTimeLabel.setText("<html><center>Selected Cutoff Time:<br/>"
               + cutoffFormat.format(cutoffDate) + "</center></html>");
    }//GEN-LAST:event_cutoffTimeButtonActionPerformed

    private void PurgeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PurgeButtonActionPerformed
        //Make sure there is a date.
        if (cutoffDate == null) {
            JOptionPane.showMessageDialog(this, "Please select a cutoff date " 
                    + "and time.", "No Date Selected", JOptionPane
                            .INFORMATION_MESSAGE);
            return;
        }

        //Must convert date type.
        java.sql.Date sqlDate = new java.sql.Date(cutoffDate.getTime());

        //Count students to be purged.
        int purgeCount = userManager.obtainInactiveStudents(sqlDate).size();
        
        if (purgeCount == 0) {
            JOptionPane.showMessageDialog(this, 
                    "All Students have logged in since the given time.", 
                    "No Inactive Students", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        if (JOptionPane.showConfirmDialog(this, 
                "Are you sure you want to delete " + purgeCount + " students?",
                "Purge Students", JOptionPane.YES_NO_OPTION)
                == JOptionPane.YES_OPTION) {
            if (userManager.removeStudentsBeforeDate(sqlDate)) {
                JOptionPane.showMessageDialog(this,
                        "All students were deleted successfully.",
                        "Students Deleted", JOptionPane.INFORMATION_MESSAGE);
            } else {
              JOptionPane.showMessageDialog(this,
                      "An error has prevented at least one student form being"
                      + "\ndeleted.  Please check the error logs.",
                      "Students Deletion Error", JOptionPane.WARNING_MESSAGE);  
            }
        }
    }//GEN-LAST:event_PurgeButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        dispose();
    }//GEN-LAST:event_closeButtonActionPerformed


    /**
     * Helper function to return the last hour before a given time.
     * @param time <code>Date</code> holding the given time.
     * @return The last hour before the given time.
     */
    private Date lastHour(Date time){
        //If already the start of an hour, return as is.
        if(time.getTime() % ResourceTimeManager.MILLISECONDS_PER_HOUR == 0) {
            return time;
        }
        
        GregorianCalendar cal = new GregorianCalendar();
        cal.setTime(time);
        cal.set(Calendar.MINUTE, 0);
        cal.set(Calendar.SECOND, 0);
        cal.set(Calendar.MILLISECOND, 0);
        return cal.getTime();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton PurgeButton;
    private javax.swing.JButton closeButton;
    private javax.swing.JButton cutoffTimeButton;
    private javax.swing.JLabel cutoffTimeLabel;
    private javax.swing.JLabel topLabel;
    // End of variables declaration//GEN-END:variables
}
