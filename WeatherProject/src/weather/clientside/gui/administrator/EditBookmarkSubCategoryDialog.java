package weather.clientside.gui.administrator;

import java.util.Vector;
import javax.swing.JOptionPane;
import weather.ApplicationControlSystem;
import weather.clientside.gui.component.GUIComponentFactory;
import weather.common.data.bookmark.Bookmark;
import weather.common.data.bookmark.BookmarkCategory;
import weather.common.data.bookmark.BookmarkType;
import weather.common.data.bookmark.CategoryViewRights;
import weather.common.dbms.DBMSBookmarkCategoriesManager;
import weather.common.dbms.DBMSBookmarkEventTypesManager;
import weather.common.dbms.DBMSBookmarkInstanceManager;
import weather.common.gui.component.BUDialog;

/**
 * The <code>EditBookmarkTypeDialog</code> class creates a form used
 * to edit bookmark sub-categories.
 * @author Eric Subach (2010)
 * @author Justin Enslin (2012)
 */
public class EditBookmarkSubCategoryDialog extends BUDialog {

    private DBMSBookmarkEventTypesManager bookmarkTypeManager;
    private DBMSBookmarkCategoriesManager categoryManager;
    private DBMSBookmarkInstanceManager bookmarksManager;
    private BookmarkType originalSubcategory;
    private BookmarkCategory originalCategory;
    
    /**
     * Opens a window to edit the bookmark sub-category represented by the 
     * given name.
     * @param appControl Application control system represented by the client.
     * @param subcategory Subcategory to be edited.
     * @param category Category initial containing the subcategory.
     */
    public EditBookmarkSubCategoryDialog (ApplicationControlSystem appControl, String subcategory,
            String category) {
        super(appControl);
        // Initialize vars and components.
        bookmarkTypeManager = appControl.getDBMSSystem().
                getBookmarkTypesManager();
        categoryManager = appControl.getDBMSSystem().
                getBookmarkCategoriesManager();
        bookmarksManager = appControl.getDBMSSystem().getBookmarkManager();
        originalSubcategory = bookmarkTypeManager.searchByName(subcategory, category);
        originalCategory = categoryManager.searchByName(category);
        initialize();
        setTitle("Weather Viewer - Edit Bookmark Subcategory");
        super.postInitialize(false);
    }
    
    /**
     * Helper method to initialize the window.
     */
    private void initialize(){
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent evt) {
                close();
            }
        });
        initComponents();
        
        GUIComponentFactory.initBookmarkCategoryBoxWithoutDefault(categoryComboBox,
                eventManager, appControl.getGeneralService().getUser());
        
        //Set values from sub-category
        try{
        categoryComboBox.setSelectedItem(
                categoryManager.searchByBookmarkCategoryNumber(
                originalSubcategory.getCategoryNumber()).getName());
        } catch(NullPointerException ex){
            categoryComboBox.setSelectedIndex(0);
        }
        subCatField.setText(originalSubcategory.getName());
        notesArea.setText(originalSubcategory.getNotes());
        
        // Set default button.
        getRootPane().setDefaultButton(editSubCategoryButton);
        
        this.setTitle("");
        nameErrorLabel.setVisible(false);
    }
    
    /**
     * Helper method that displays the <code>leaveWithoutSaving()</code> dialog.
     */
    private void close(){
        if(!changed() || appControl.getGeneralService()
                .leaveWithoutSaving(this)) {
            dispose();
        }
    }
    
    /**
     * Helper method to determine whether or not something has been changed in 
     * the window.
     * @return True if something was changed, false otherwise.
     */
    private boolean changed(){
        if(originalSubcategory.getNotes() == null) {
            originalSubcategory.setNotes("");
        }
        return !(originalSubcategory.getName().equals(subCatField.getText()) 
                && originalSubcategory.getNotes().equals(notesArea.getText()) 
                && categoryManager.searchByBookmarkCategoryNumber(
                originalSubcategory.getCategoryNumber()).getName().equals(
                (String) categoryComboBox.getSelectedItem()));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        viewRightsButtonGroup = new javax.swing.ButtonGroup();
        categoryComboBox = new javax.swing.JComboBox<String>();
        noteScrollPane = new javax.swing.JScrollPane();
        notesArea = new javax.swing.JTextArea();
        subCatField = new javax.swing.JTextField();
        editSubCategoryButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        categoryLabel = new javax.swing.JLabel();
        subCategoryNameLabel = new javax.swing.JLabel();
        notesLabel = new javax.swing.JLabel();
        nameErrorLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Weather Viewer - Edit Bookmark Sub-Categories");

        notesArea.setColumns(20);
        notesArea.setRows(5);
        noteScrollPane.setViewportView(notesArea);

        editSubCategoryButton.setText("Save Changes");
        editSubCategoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editSubCategoryButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Close");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        categoryLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        categoryLabel.setText("Category:");

        subCategoryNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        subCategoryNameLabel.setText("Sub-Category Name:");

        notesLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        notesLabel.setText("Notes:");

        nameErrorLabel.setForeground(new java.awt.Color(204, 0, 0));
        nameErrorLabel.setText("Subcategory Must Have A Name");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(categoryLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(subCategoryNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(notesLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(noteScrollPane, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(subCatField)
                            .addComponent(categoryComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(editSubCategoryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nameErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cancelButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(categoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(categoryLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(subCategoryNameLabel)
                    .addComponent(subCatField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(noteScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(notesLabel))
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(editSubCategoryButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nameErrorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Sees if the edit sub-category button was pressed.
     * @TODO Replace the error dialog with appropriate logger
     * @param evt The ActionEvent.
     */
    private void editSubCategoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editSubCategoryButtonActionPerformed
        String catName = (String) categoryComboBox.getSelectedItem();
        BookmarkCategory cat = categoryManager.searchByName(catName);
        originalSubcategory.setCategoryNumber(cat.getBookmarkCategoryNumber());
        CategoryViewRights rights = cat.getViewRights();
        originalSubcategory.setViewRights(rights);
        String name = subCatField.getText().trim();
        
        //Check for name errors.
        if (name.isEmpty()) {
            nameErrorLabel.setText("Subcategory Must Have A Name");
            nameErrorLabel.setVisible(true);
            return;
        }
        if (!(name.equals(originalSubcategory.getName()) && catName.equals(originalCategory.getName())) 
                && bookmarkTypeManager.searchByName(name, catName) != null) {
            nameErrorLabel.setText("Subcategory Name Already In Use");
            nameErrorLabel.setVisible(true);
            return;
        }
        nameErrorLabel.setVisible(false);
        
        //Save update
        originalSubcategory.setName(name);
        originalSubcategory.setNotes(notesArea.getText());
    
        if(bookmarkTypeManager.update(originalSubcategory)){
            //Update the category of database bookmarks and events in this
            //subcategory.
            Vector<Bookmark> bookmarksToChange = bookmarksManager
                    .searchByTypeNumber(originalSubcategory.getInstanceTypeNumber());
            boolean success = true;
            for (Bookmark bookmark : bookmarksToChange) {
                bookmark.setCategoryNumber(cat.getBookmarkCategoryNumber());
                if(!bookmarksManager.update(bookmark)) {
                    success = false;
                }
            }
            if (success) {
                JOptionPane.showMessageDialog(this, "Bookmark Subcategory Updated Successfully", 
                        "Bookmark Subcategory Updated", JOptionPane.INFORMATION_MESSAGE);
                this.dispose();
            } else {
                JOptionPane.showMessageDialog(this, "Bookmark Subcategory Update Failed",
                        "Bookmark Subcategory Not Updated", JOptionPane.INFORMATION_MESSAGE);
                this.dispose();
            }
        }
        else {
            JOptionPane.showMessageDialog(this, "Bookmark Subcategory Update Failed", 
                    "Bookmark Subcategory Not Updated", JOptionPane.INFORMATION_MESSAGE);
            this.dispose();
        }
    }//GEN-LAST:event_editSubCategoryButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        close();
    }//GEN-LAST:event_cancelButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox<String> categoryComboBox;
    private javax.swing.JLabel categoryLabel;
    private javax.swing.JButton editSubCategoryButton;
    private javax.swing.JLabel nameErrorLabel;
    private javax.swing.JScrollPane noteScrollPane;
    private javax.swing.JTextArea notesArea;
    private javax.swing.JLabel notesLabel;
    private javax.swing.JTextField subCatField;
    private javax.swing.JLabel subCategoryNameLabel;
    private javax.swing.ButtonGroup viewRightsButtonGroup;
    // End of variables declaration//GEN-END:variables

}
