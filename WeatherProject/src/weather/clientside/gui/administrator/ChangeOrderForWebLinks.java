package weather.clientside.gui.administrator;

import java.util.Vector;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import weather.AdministratorControlSystem;
import weather.clientside.utilities.MyDefaultTableModel;
import weather.common.data.WebLink;
import weather.common.data.WebLinkCategories;
import weather.common.dbms.DBMSSystemManager;
import weather.common.dbms.DBMSWebLinkManager;
import weather.common.gui.component.BUDialog;
import weather.common.gui.component.IconProperties;

/**
 * The <code>EditWebLinks</code> class represents an instance of the
 * EditWebLinks window. This allows an administrator to choose a link to edit.
 * When a link is selected for editing, the EditWebLinkWindow is shown.
 *
 * @author Ora Merkel (2009)
 * @author Andrew Bennett (2010)
 * @author Bloomsburg University Software Engineering
 * @version Spring 2010
 */
public class ChangeOrderForWebLinks extends BUDialog {

    private DBMSSystemManager dbms;
    private DBMSWebLinkManager webLinkManager;
    private Vector<WebLink> links;
    private Vector<WebLinkCategories> webLinkCategories;
    private Vector<WebLinkCategories> left_right;
    private MyDefaultTableModel mod;
    private int rows;

    /**
     * Constructor for the Edit Web Link window.
     *
     * @param adminService The GeneralService object that communicates with
     * other parts of the program.
     */
    public ChangeOrderForWebLinks(AdministratorControlSystem adminService) {
        super(adminService);
        this.dbms = adminService.getGeneralService().getDBMSSystem();
        webLinkManager = dbms.getWebLinkManager();
        setRow();
        mod = new MyDefaultTableModel(rows, 2);
        initComponents();
        updateLinkCategoriesComboBox();
        updateRankTab();
        initialwebLinksJTable();
        errorLabel.setVisible(false);
        // Build the drop down dynamically
        webLinkCategories = webLinkManager.obtainAllWebLinkCategories();
        for (WebLinkCategories wc : webLinkCategories) {
            left_right.add(wc);
        }
        links = webLinkManager.getLinksForCategory(categoriesComboBox.getSelectedItem().toString());
        categoriesComboBox.setSelectedIndex(0);
        this.pack();
        super.postInitialize(false);

    }

    /**
     * Constructor for the Edit Web Link window.
     *
     * @param adminService The GeneralService object that communicates with
     * other parts of the program.
     * @param category The category holding to-be-edited web link.
     * @param weblink The link to be edited.
     */
    public ChangeOrderForWebLinks(AdministratorControlSystem adminService, String category, String weblink) {
        super(adminService);
        this.dbms = adminService.getGeneralService().getDBMSSystem();
        webLinkManager = dbms.getWebLinkManager();
        setRow();
        mod = new MyDefaultTableModel(rows, 1);
        initComponents();
        updateLinkCategoriesComboBox();
        updateRankTab();
        initialwebLinksJTable();

        // Build the drop down dynamically
        webLinkCategories = webLinkManager.obtainAllWebLinkCategories();
        links = webLinkManager.getLinksForCategory(categoriesComboBox.getSelectedItem().toString());

        categoriesComboBox.setSelectedItem(category);
        errorLabel.setVisible(false);
        this.pack();
        super.postInitialize(false);
    }

    /**
     * Sets the local variable <code>row</code> to the current size of the list
     * of links.
     */
    private void setRow() {
        webLinkCategories = webLinkManager.obtainAllWebLinkCategories();
        links = webLinkManager.getLinksForCategory(webLinkCategories.get(0).getLinkCategory());
        rows = links.size();
    }

    /**
     * Updates the list of web links to refect the changes in the ranking.
     */
    private void updateRankTab() {
        webLinkCategories = webLinkManager.obtainAllWebLinkCategories();
        this.categoriesComboBox.removeAllItems();
        for (WebLinkCategories wc : webLinkCategories) {
            this.categoriesComboBox.addItem(wc.getLinkCategory());
        }
        this.categoriesComboBox.setSelectedIndex(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        editWebLinkRank = new javax.swing.JTabbedPane();
        moveWebLinkTab = new javax.swing.JPanel();
        url_Category_JLabel1 = new javax.swing.JLabel();
        moveCategoryLeft = new javax.swing.JComboBox<String>();
        moveCategoryRight = new javax.swing.JComboBox<String>();
        url_Category_JLabel4 = new javax.swing.JLabel();
        moveListLeft = new java.awt.List();
        moveListRight = new java.awt.List();
        moveRightToLeft = new javax.swing.JButton();
        moveLeftToRight = new javax.swing.JButton();
        displayOrderTab = new javax.swing.JPanel();
        categoriesComboBox = new javax.swing.JComboBox<String>();
        WebLinks_JScrollPane = new javax.swing.JScrollPane();
        this.WebLinks_JScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);

        this.WebLinks_JScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);

        webLinks_JTable = new javax.swing.JTable();
        upButton = new javax.swing.JButton();
        downButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        errorLabel = new javax.swing.JLabel();
        closeButton = new javax.swing.JButton();

        setTitle("Weather Viewer - Edit Web Links");

        url_Category_JLabel1.setText("Category From:");

        moveCategoryLeft.setMaximumRowCount(20);
        moveCategoryLeft.setToolTipText("A list of web link categories available");
        moveCategoryLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveCategoryLeftActionPerformed(evt);
            }
        });

        moveCategoryRight.setMaximumRowCount(20);
        moveCategoryRight.setToolTipText("A list of web link categories available");
        moveCategoryRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveCategoryRightActionPerformed(evt);
            }
        });

        url_Category_JLabel4.setText("Category To:");

        moveListLeft.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        moveRightToLeft.setText("<--");
        moveRightToLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveRightToLeftActionPerformed(evt);
            }
        });

        moveLeftToRight.setText("-->");
        moveLeftToRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveLeftToRightActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout moveWebLinkTabLayout = new javax.swing.GroupLayout(moveWebLinkTab);
        moveWebLinkTab.setLayout(moveWebLinkTabLayout);
        moveWebLinkTabLayout.setHorizontalGroup(
            moveWebLinkTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(moveWebLinkTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(moveWebLinkTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(moveListLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(url_Category_JLabel1)
                    .addComponent(moveCategoryLeft, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(moveWebLinkTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(moveRightToLeft)
                    .addComponent(moveLeftToRight))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(moveWebLinkTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(url_Category_JLabel4)
                    .addComponent(moveCategoryRight, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(moveListRight, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE))
                .addContainerGap())
        );
        moveWebLinkTabLayout.setVerticalGroup(
            moveWebLinkTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(moveWebLinkTabLayout.createSequentialGroup()
                .addGroup(moveWebLinkTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(moveWebLinkTabLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(moveWebLinkTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(moveWebLinkTabLayout.createSequentialGroup()
                                .addComponent(url_Category_JLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(moveCategoryLeft, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(moveListLeft, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE))
                            .addGroup(moveWebLinkTabLayout.createSequentialGroup()
                                .addComponent(url_Category_JLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(moveCategoryRight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(moveListRight, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE))))
                    .addGroup(moveWebLinkTabLayout.createSequentialGroup()
                        .addGap(98, 98, 98)
                        .addComponent(moveRightToLeft)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(moveLeftToRight)))
                .addContainerGap())
        );

        editWebLinkRank.addTab("Move Web Links", moveWebLinkTab);

        categoriesComboBox.setMaximumRowCount(20);
        categoriesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoriesComboBoxActionPerformed(evt);
            }
        });

        WebLinks_JScrollPane.setAutoscrolls(true);
        WebLinks_JScrollPane.setOpaque(false);

        webLinks_JTable.setModel(mod);
        webLinks_JTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        WebLinks_JScrollPane.setViewportView(webLinks_JTable);

        upButton.setIcon(IconProperties.getArrowUpSmallIcon());
        upButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upButtonActionPerformed(evt);
            }
        });

        downButton.setIcon(IconProperties.getArrowDownSmallIcon());
        downButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("All Categories:");

        errorLabel.setForeground(new java.awt.Color(255, 51, 51));
        errorLabel.setIcon(IconProperties.getResourceInactiveIconImage());
        errorLabel.setText("A web link category was not selected");

        javax.swing.GroupLayout displayOrderTabLayout = new javax.swing.GroupLayout(displayOrderTab);
        displayOrderTab.setLayout(displayOrderTabLayout);
        displayOrderTabLayout.setHorizontalGroup(
            displayOrderTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, displayOrderTabLayout.createSequentialGroup()
                .addGroup(displayOrderTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(displayOrderTabLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(categoriesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(WebLinks_JScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(displayOrderTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(upButton)
                    .addComponent(downButton))
                .addGap(41, 41, 41))
            .addGroup(displayOrderTabLayout.createSequentialGroup()
                .addComponent(errorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        displayOrderTabLayout.setVerticalGroup(
            displayOrderTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displayOrderTabLayout.createSequentialGroup()
                .addGroup(displayOrderTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(categoriesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(displayOrderTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(displayOrderTabLayout.createSequentialGroup()
                        .addComponent(upButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(downButton))
                    .addComponent(WebLinks_JScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addComponent(errorLabel)
                .addContainerGap())
        );

        editWebLinkRank.addTab("Display Order", displayOrderTab);

        closeButton.setText("Close");
        closeButton.setToolTipText("Closes this window and returns to the main window");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(editWebLinkRank, javax.swing.GroupLayout.PREFERRED_SIZE, 458, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(closeButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(editWebLinkRank)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(closeButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This method is called when the Search button is clicked. The
     * SearchWebLinks window is opened.
     *
     * @param evt The event that the search button is clicked.
     */
    /**
     * This method is called when the "ENTER" key is pressed on the keyboard.
     * The SearchWebLinks window is opened.
     *
     * @param evt The event that the "ENTER" key was pressed.
     */
    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        dispose();
}//GEN-LAST:event_closeButtonActionPerformed

    private void moveCategoryLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveCategoryLeftActionPerformed
        left_right = webLinkManager.obtainAllWebLinkCategories();
        if (moveCategoryLeft.getItemCount() != left_right.size()) {
            return;
        }
        moveListLeft.removeAll();
        int r = 0;
        for (WebLinkCategories wc : webLinkManager.obtainAllWebLinkCategories()) {
            if (wc.getLinkCategory().equals(moveCategoryLeft.getSelectedItem().toString())) {
                left_right.removeElementAt(r);
                this.updateRightComboBox();
            }
            r++;
        }
        links = webLinkManager.getLinksForCategory(moveCategoryLeft.getSelectedItem().toString());
        for (int i = 0; i < links.size(); i++) {
            moveListLeft.add(links.get(i).getName());
        }
    }//GEN-LAST:event_moveCategoryLeftActionPerformed

    private void moveCategoryRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveCategoryRightActionPerformed
        if (moveCategoryRight.getItemCount() != moveCategoryLeft.getItemCount() - 1) {
            return;
        }
        moveListRight.removeAll();
        links = webLinkManager.getLinksForCategory(moveCategoryRight.getSelectedItem().toString());
        for (int i = 0; i < links.size(); i++) {
            moveListRight.add(links.get(i).getName());
        }
    }//GEN-LAST:event_moveCategoryRightActionPerformed

    private void moveRightToLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveRightToLeftActionPerformed
        moveLink(moveCategoryRight, moveCategoryLeft, moveListRight.getSelectedItem());
        this.fill_data();
    }//GEN-LAST:event_moveRightToLeftActionPerformed

    private void moveLeftToRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveLeftToRightActionPerformed
        moveLink(moveCategoryLeft, moveCategoryRight, moveListLeft.getSelectedItem());
        this.fill_data();
    }//GEN-LAST:event_moveLeftToRightActionPerformed

    /**
     * Creates the initial web links JTable.
     */
    private void initialwebLinksJTable() {
        webLinks_JTable.getColumnModel().getColumn(0).setHeaderValue("Link Name");
        webLinks_JTable.getColumnModel().getColumn(0).setPreferredWidth(WebLinks_JScrollPane.getWidth() - 3);
        webLinks_JTable.setVisible(true);
    }

    /**
     * Fills data.
     */
    private void fill_data() {
        int row = 0;
        links = webLinkManager.getLinksForCategory(categoriesComboBox.getSelectedItem().toString());
        webLinks_JTable.setModel(mod);
        this.initialwebLinksJTable();
        for (int i = 0; i < links.size(); i++) {
            webLinks_JTable.setValueAt(links.get(i).getName(), row, 0);
            row++;
        }
        //this.webLinks_JTable.setSize(600, links.size()*20);
        //webLinks_JTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        webLinks_JTable.updateUI();
    }
    private void categoriesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoriesComboBoxActionPerformed
        this.fill_data();
    }//GEN-LAST:event_categoriesComboBoxActionPerformed

    private void upButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upButtonActionPerformed
        links = webLinkManager.getLinksForCategory(this.categoriesComboBox.getSelectedItem().toString());
        int i;
        i = webLinks_JTable.getSelectedRow();
        if (i == -1) {
            errorLabel.setVisible(true);
            return;
        }
        if (i == 0) {
            errorLabel.setVisible(false);
            return;
        }
        errorLabel.setVisible(false);
        int old_order = links.get(i).getOrderRank();
        links.get(i).setOrderRank(links.get(i - 1).getOrderRank());
        links.get(i - 1).setOrderRank(old_order);
        webLinkManager.updateWebLink(links.get(i));
        webLinkManager.updateWebLink(links.get(i - 1));
        this.fill_data();
        webLinks_JTable.setRowSelectionInterval(i - 1, i - 1);
    }//GEN-LAST:event_upButtonActionPerformed

    private void downButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downButtonActionPerformed
        links = webLinkManager.getLinksForCategory(this.categoriesComboBox.getSelectedItem().toString());
        int i;
        i = webLinks_JTable.getSelectedRow();
        if (i == -1) {
            errorLabel.setVisible(true);
            return;
        }
        if (i == webLinks_JTable.getRowCount() - 1) {
            errorLabel.setVisible(false);
            return;
        }
        errorLabel.setVisible(false);
        int old_order = links.get(i).getOrderRank();
        links.get(i).setOrderRank(links.get(i + 1).getOrderRank());
        links.get(i + 1).setOrderRank(old_order);
        webLinkManager.updateWebLink(links.get(i));
        webLinkManager.updateWebLink(links.get(i + 1));
        this.fill_data();
        webLinks_JTable.setRowSelectionInterval(i + 1, i + 1);
    }//GEN-LAST:event_downButtonActionPerformed

    /**
     * Moves the web link to a different place in the list.
     *
     * @param from The original place in the list.
     * @param to The new place in the list.
     * @param webLinkName The name of the web link.
     */
    private void moveLink(JComboBox from, JComboBox to, String webLinkName) {
        // Both combo boxes must be different to move a Web Link
        if (from.getSelectedItem().toString().equals(to.getSelectedItem().toString())) {
            JOptionPane.showMessageDialog(this, "You must select two different categories to move a Web Link");
            return;
        }

        WebLink toUpdate = null;
        int newCatID = -1;

        // Get the category that the weblink is in
        links = webLinkManager.getLinksForCategory(from.getSelectedItem().toString());
        for (int i = 0; i < links.size(); i++) {
            if (links.get(i).getName().equals(webLinkName)) {
                toUpdate = links.get(i);
            }
        }

        // Find the category we want to move it too
        for (int i = 0; i < webLinkCategories.size(); i++) {
            if (webLinkCategories.get(i).getLinkCategory().equals(to.getSelectedItem().toString())) {
                newCatID = webLinkCategories.get(i).getLinkCategoryNumber();
            }
        }

        // Make sure we found what we were looking for
        if (toUpdate == null || newCatID == -1) {
            JOptionPane.showMessageDialog(this, "An error has occurred while updating the weblink.");
            return;
        }

        toUpdate.setLinkCategoryNumber(newCatID);
        webLinkManager.updateWebLink(toUpdate);

        // Refresh both lists
        moveCategoryRightActionPerformed(null);
        moveCategoryLeftActionPerformed(null);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane WebLinks_JScrollPane;
    private javax.swing.JComboBox<String> categoriesComboBox;
    private javax.swing.JButton closeButton;
    private javax.swing.JPanel displayOrderTab;
    private javax.swing.JButton downButton;
    private javax.swing.JTabbedPane editWebLinkRank;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JComboBox<String> moveCategoryLeft;
    private javax.swing.JComboBox<String> moveCategoryRight;
    private javax.swing.JButton moveLeftToRight;
    private java.awt.List moveListLeft;
    private java.awt.List moveListRight;
    private javax.swing.JButton moveRightToLeft;
    private javax.swing.JPanel moveWebLinkTab;
    private javax.swing.JButton upButton;
    private javax.swing.JLabel url_Category_JLabel1;
    private javax.swing.JLabel url_Category_JLabel4;
    private javax.swing.JTable webLinks_JTable;
    // End of variables declaration//GEN-END:variables

    /**
     * Builds the category drop down list dynamically, then sets the index to 0.
     */
    private void updateLinkCategoriesComboBox() {
        webLinkCategories = webLinkManager.obtainAllWebLinkCategories();
        //Categories_ComboBox.removeAllItems();
        moveCategoryLeft.removeAllItems();
        moveCategoryRight.removeAllItems();
        left_right = webLinkManager.obtainAllWebLinkCategories();
        for (WebLinkCategories wc : left_right) {
            moveCategoryLeft.addItem(wc.getLinkCategory());
        }
        moveCategoryLeft.setSelectedIndex(0);
        //moveCategoryRight.setSelectedIndex(0);
    }

    /**
     * Updates the web link list on the right after a web link is moved to the
     * left.
     */
    private void updateRightComboBox() {
        moveCategoryRight.removeAllItems();
        for (WebLinkCategories wc : left_right) {
            moveCategoryRight.addItem(wc.getLinkCategory());
        }
        moveCategoryRight.setSelectedIndex(0);
    }
}
