package weather.clientside.gui.administrator;

import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.*;
import java.sql.Date;
import java.text.SimpleDateFormat;
import java.util.LinkedList;
import java.util.TimeZone;
import java.util.logging.Level;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.text.JTextComponent;
import weather.GeneralService;
import weather.clientside.manager.DiaryManager;
import weather.clientside.manager.NotesAndDiaryPanelManager;
import weather.clientside.utilities.RightClickMenu;
import weather.clientside.utilities.StorageSpaceTester;
import weather.clientside.utilities.WeatherFileChooser;
import weather.common.data.AccessRights;
import weather.common.data.Instructor;
import weather.common.data.User;
import weather.common.data.note.InstructorNote;
import weather.common.data.note.NoteFileInstance;
import weather.common.data.resource.ResourceRange;
import weather.common.dbms.DBMSFileManager;
import weather.common.dbms.DBMSNoteManager;
import weather.common.gui.component.BUDialog;
import weather.common.gui.component.IconProperties;
import weather.common.utilities.DateRangeSelectionWindow;
import weather.common.utilities.CommonLocalFileManager;
import weather.common.utilities.PropertyManager;
import weather.common.utilities.WeatherLogger;

/**
 * This is the form for creating new instructor notes.  They will be assigned to
 * the current diary resource.
 * 
 * @author Andrew Bennett (2010)
 * @author Joe Van Lente (2010)
 * @author Chris Vitello (2012)
 * @version Spring 2012
 */
public class CreateInstructorNoteWindow extends BUDialog { 
    private GeneralService service;
    private User user;
    private long startOfFirstDayInMillis;
    private long startOfLastDayInMillis;
    private int noteCameraNumber;
    private int noteStationNumber;
    private DefaultListModel<String> fileListModel;
    private LinkedList<NoteFileInstance> attachedFiles;
    private boolean modified;
    private NotesAndDiaryPanelManager noteManager;
    private String dateFormatString = PropertyManager.
            getGeneralProperty("dateFormatString");
    private SimpleDateFormat dateFormatDDMMYYYY = 
            new SimpleDateFormat(dateFormatString);
    private TimeZone timeZone;
    
    /**
     * Constructor for this class.
     * 
     * @param service The GeneralService for the weather application.
     * @param noteManager The main GUI's note/diary panel manager.
     */
    public CreateInstructorNoteWindow(GeneralService service, 
            NotesAndDiaryPanelManager noteManager) {
        this.service = service;
        this.noteManager = noteManager;
        fileListModel = new DefaultListModel<>();

        initComponents();
        
        //Get DiaryManager infomation.
        this.noteCameraNumber = DiaryManager.getResource().getResourceNumber();
        this.noteStationNumber = DiaryManager.getRelatedResource()
                .getResourceNumber();
        this.timeZone = DiaryManager.getResource().getTimeZone().getTimeZone();
        dateFormatDDMMYYYY.setTimeZone(timeZone);
        startOfFirstDayInMillis = DiaryManager.getDate().getTime();
        startOfLastDayInMillis = DiaryManager.getDate().getTime();
        Date start = new Date(startOfFirstDayInMillis);
        Date end = new Date(startOfLastDayInMillis);
        this.startTimeField.setText(dateFormatDDMMYYYY.format(start));
        this.endTimeField.setText(dateFormatDDMMYYYY.format(end));
        
        //Setup files.
        attachLabel.setVisible(false);
        attachLabel.setIcon(IconProperties.getAttachmentIconImage());
        user = service.getUser();
        attachedFiles = new LinkedList<>();

        //Finish setup
        addCommonListeners();
        this.instructorLabel.setText(service.getUser().getLastName() + ", " +
                service.getUser().getFirstName());
        this.locationLabel.setText("Location: " + DiaryManager.getResource()
                .getName());
        modified = false;
        radPersonal.setSelected(true);
        
        int width = 600 + this.getInsets().left + this.getInsets().right;
        int height = 578 + this.getInsets().top + this.getInsets().bottom;
        Dimension thisDim = new Dimension(width, height);
        this.setSize(thisDim);
        this.setPreferredSize(thisDim);
        this.setMaximumSize(thisDim);
        this.setMinimumSize(thisDim);
        pack();
        
        super.postInitialize(!noteManager.isExternal());
    }

    /** 
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        accessRightsGroup = new javax.swing.ButtonGroup();
        popupMenu = new javax.swing.JPopupMenu();
        removeItem = new javax.swing.JMenuItem();
        instructorJLabel = new javax.swing.JLabel();
        notesTimeRangeJLabel = new javax.swing.JLabel();
        timeRangeToJLabel = new javax.swing.JLabel();
        endTimeField = new javax.swing.JTextField();
        changeRangeButton = new javax.swing.JButton();
        accessRightsPanel = new javax.swing.JPanel();
        radAllUsers = new javax.swing.JRadioButton();
        radAllStudents = new javax.swing.JRadioButton();
        radCourseStudents = new javax.swing.JRadioButton();
        radInstructorsOnly = new javax.swing.JRadioButton();
        radPersonal = new javax.swing.JRadioButton();
        startTimeField = new javax.swing.JTextField();
        noteScrollPane = new javax.swing.JScrollPane();
        noteArea = new javax.swing.JTextArea();
        attachButton = new javax.swing.JButton();
        createButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        titleLabel = new javax.swing.JLabel();
        titleField = new javax.swing.JTextField();
        instructorLabel = new javax.swing.JLabel();
        scrollPane = new javax.swing.JScrollPane();
        fileList = new javax.swing.JList();
        attachLabel = new javax.swing.JLabel();
        clearButton = new javax.swing.JButton();
        printButton = new javax.swing.JButton();
        locationLabel = new javax.swing.JLabel();

        removeItem.setText("Remove");
        removeItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeItemActionPerformed(evt);
            }
        });
        popupMenu.add(removeItem);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Weather Viewer - Instructor Class Notes");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        instructorJLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        instructorJLabel.setText("Instructor: ");
        getContentPane().add(instructorJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 40, 76, 16));

        notesTimeRangeJLabel.setText("Time Range For Note:");
        getContentPane().add(notesTimeRangeJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 72, -1, -1));

        timeRangeToJLabel.setText("to");
        getContentPane().add(timeRangeToJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(303, 72, -1, -1));

        endTimeField.setEditable(false);
        getContentPane().add(endTimeField, new org.netbeans.lib.awtextra.AbsoluteConstraints(318, 69, 135, -1));

        changeRangeButton.setText("Edit Time Range");
        changeRangeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeRangeButtonActionPerformed(evt);
            }
        });
        getContentPane().add(changeRangeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(461, 68, -1, 25));

        accessRightsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Note User Access Rights"));
        accessRightsPanel.setToolTipText("Who can access this specific class note");

        accessRightsGroup.add(radAllUsers);
        radAllUsers.setText("All Users");
        accessRightsPanel.add(radAllUsers);

        accessRightsGroup.add(radAllStudents);
        radAllStudents.setText("All Students");
        accessRightsPanel.add(radAllStudents);

        accessRightsGroup.add(radCourseStudents);
        radCourseStudents.setText("Course Enrolled Students");
        accessRightsPanel.add(radCourseStudents);

        accessRightsGroup.add(radInstructorsOnly);
        radInstructorsOnly.setText("Instructors Only");
        accessRightsPanel.add(radInstructorsOnly);

        accessRightsGroup.add(radPersonal);
        radPersonal.setText("Personal");
        accessRightsPanel.add(radPersonal);

        getContentPane().add(accessRightsPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 105, 578, 50));

        startTimeField.setEditable(false);
        getContentPane().add(startTimeField, new org.netbeans.lib.awtextra.AbsoluteConstraints(163, 69, 135, -1));

        noteScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("NOTES"));

        noteArea.setColumns(20);
        noteArea.setLineWrap(true);
        noteArea.setRows(5);
        noteArea.setWrapStyleWord(true);
        noteScrollPane.setViewportView(noteArea);

        getContentPane().add(noteScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 201, 580, 239));

        attachButton.setText("Attach File");
        attachButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attachButtonActionPerformed(evt);
            }
        });
        getContentPane().add(attachButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 452, -1, -1));

        createButton.setText("Create Note");
        createButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createButtonActionPerformed(evt);
            }
        });
        getContentPane().add(createButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(268, 545, -1, -1));

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        getContentPane().add(closeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(525, 545, -1, -1));

        titleLabel.setText("Title:");
        getContentPane().add(titleLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(165, 170, -1, -1));

        titleField.setColumns(100);
        getContentPane().add(titleField, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 167, 205, 22));

        instructorLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        instructorLabel.setPreferredSize(new java.awt.Dimension(34, 14));
        getContentPane().add(instructorLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(96, 40, 490, 16));

        scrollPane.setBorder(null);

        fileList.setBackground(new java.awt.Color(236, 233, 216));
        fileList.setBorder(javax.swing.BorderFactory.createTitledBorder("FILES"));
        fileList.setModel(fileListModel);
        fileList.setFixedCellWidth(150);
        fileList.setLayoutOrientation(javax.swing.JList.HORIZONTAL_WRAP);
        fileList.setVisibleRowCount(-1);
        fileList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                fileListMouseReleased(evt);
            }
        });
        fileList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fileListKeyPressed(evt);
            }
        });
        scrollPane.setViewportView(fileList);

        getContentPane().add(scrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(62, 489, 490, 44));
        getContentPane().add(attachLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(22, 489, 14, 17));

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });
        getContentPane().add(clearButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 545, -1, -1));

        printButton.setText("Print");
        printButton.setEnabled(false);
        printButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printButtonActionPerformed(evt);
            }
        });
        getContentPane().add(printButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(497, 452, 91, -1));

        locationLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        getContentPane().add(locationLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 12, 576, 16));
        locationLabel.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * The event the change range button was clicked. Opens a new 
     * DateSelectionWindow to get the new desired range for the note and then
     * updates the date range information fields.
     * 
     * @param evt The event the changeButton was clicked.
     */
    private void changeRangeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeRangeButtonActionPerformed
       //Select new dates without times.
        ResourceRange currentRange = new ResourceRange
                (new Date(startOfFirstDayInMillis), 
                new Date(startOfLastDayInMillis));
        ResourceRange newRange = DateRangeSelectionWindow
                .getNewResourceRange(currentRange, timeZone, false, true,
                !noteManager.isExternal());
        
        if (newRange != null) {
            this.startTimeField.setText(dateFormatDDMMYYYY.format(newRange
                    .getStartTime()));
            this.startOfFirstDayInMillis = newRange.getStartTime().getTime();
            this.endTimeField.setText(dateFormatDDMMYYYY.format(newRange
                    .getStopTime()));
            this.startOfLastDayInMillis = newRange.getStopTime().getTime();
        }
    }//GEN-LAST:event_changeRangeButtonActionPerformed

    /**
     * The event the close button was clicked. Simply disposes the window.
     * 
     * @param evt The event the cancelButton a was clicked.
     */
    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        exit();
    }//GEN-LAST:event_closeButtonActionPerformed

    /**
     * The event the window is closing. The user clicked the 'X'.
     * Asks the user if they really wanted to close the form.
     * 
     * @param evt The WindowEvent when 'X' is clicked.
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        exit();
    }//GEN-LAST:event_formWindowClosing

    /**
     * Checks for modifications and closes screen if user decides to close or 
     * if no modifications were made.
     */
    private void exit() {
        if (modified) {
            int ans = JOptionPane.showConfirmDialog(this, "The note will not be "
                    + "saved. Continue?", "Please Confirm", JOptionPane.YES_NO_OPTION);
            if (ans == JOptionPane.NO_OPTION) {
                return;
            }
        }
        noteManager.updateClassNoteNoteDates();
        this.dispose();
    }

    
    /**
     * The event when the create button was clicked. Checks to see if all fields
     * are filled that are required then creates a new note in the database.
     * 
     * @param evt The event the createButton was clicked.
     */
    private void createButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createButtonActionPerformed
        InstructorNote note = new InstructorNote();

        note.setNoteTitle(titleField.getText().trim());
        note.setInstructorNumber(service.getUser().getUserNumber());
        Date start = new Date(startOfFirstDayInMillis);
        Date end = new Date(startOfLastDayInMillis);
        note.setStartTime(start);
        note.setEndTime(end);

        if(this.radAllUsers.isSelected()) {
            note.setAccessRights(AccessRights.Everyone);
        }
        else if(this.radAllStudents.isSelected()) {
            note.setAccessRights(AccessRights.AllStudents);
        }
        else if(this.radCourseStudents.isSelected()) {
            note.setAccessRights(AccessRights.CourseStudents);
        }
        else if(this.radInstructorsOnly.isSelected()) {
            note.setAccessRights(AccessRights.Instructors);
        } else {
            //Store personal notes as "Private."
            note.setAccessRights(AccessRights.Private);
        }
        
        note.setText(this.noteArea.getText());
        note.setCameraNumber(this.noteCameraNumber);
        note.setStationNumber(this.noteStationNumber);

        DBMSNoteManager noteMgr = service.getDBMSSystem().getNoteManager();
        DBMSFileManager fileMgr = service.getDBMSSystem().getFileManager();
        
        noteMgr.insertNote(note);

        if (note.getNoteNumber() == -1) {
            String msg = "An error occurred while trying to save the note.";
            JOptionPane.showMessageDialog(this, msg);
            WeatherLogger.log(Level.SEVERE, msg);
            return;
        }

        Instructor inst = new Instructor(user);

        for (NoteFileInstance f : attachedFiles) {
            f.setNoteNumber(note.getNoteNumber());
            boolean success;
            success = fileMgr.insertNotesFile(f);
            if (!success) {
                String msg = "File " + f.getFileName() + " could not be stored.";
                noteMgr.removeNote(inst, note);
                JOptionPane.showMessageDialog(this, "Error: " + msg + " Note was not sent.");
                WeatherLogger.log(Level.SEVERE, msg);
                return;
            }
        }

        noteManager.setClassNotes();
        JOptionPane.showMessageDialog(this, "Instructor Note Created Successfully.");
        clear();
    }//GEN-LAST:event_createButtonActionPerformed


    /**
     * Handles action event for the attach button.
     * @param evt The action event generated by the attach button.
     */
    private void attachButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attachButtonActionPerformed
        if(loadFile()) {
            attachLabel.setVisible(true);
        }
    }//GEN-LAST:event_attachButtonActionPerformed

    /**
     * Loads a file into the notes.
     *
     * @return True if the load was successful, false otherwise.
     */
    private boolean loadFile() {
        File file = WeatherFileChooser.openFileChooser(WeatherFileChooser.OPEN,
                new File(CommonLocalFileManager.getRootDirectory()),
                "Attach File", this);
        if (file == null) {
            return false;
        }
        FileInputStream fis;
        try {
            fis = new FileInputStream(file);
            int size = 0;
            while (fis.read() != -1) {
                size++;
            }
            fis.close();

            byte[] fileData = new byte[size];
            fis = new FileInputStream(file);
            fis.read(fileData);
            fis.close();

            NoteFileInstance nfi = new NoteFileInstance(
                    -1, -1, service.getUser().getUserNumber(), file.getName(), fileData);
            attachedFiles.add(nfi);
            fileListModel.addElement(nfi.getFileName());
        } catch (FileNotFoundException e) {
            JOptionPane.showMessageDialog(this, "Unable to load file.");
            WeatherLogger.log(Level.SEVERE, "Unable to load file.");
            return false;
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "An I/O error has occurred.");
            WeatherLogger.log(Level.SEVERE, "I/O error :" + e.getMessage());
            return false;
        }
        return true;
    }
    
    /**
     * Handles key event for file list; removes file from list if delete key is
     * pressed while an attached file is selected.
     * @param evt The key event.
     */
    private void fileListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fileListKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            removeSelectedFile();
        }
    }//GEN-LAST:event_fileListKeyPressed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        int resp = JOptionPane.showConfirmDialog(this, "The note will not be saved. "
                + "Continue?", "Please Confirm", JOptionPane.YES_NO_OPTION);
        if (resp == JOptionPane.YES_OPTION) {
            clear();
        }
    }//GEN-LAST:event_clearButtonActionPerformed
    
    private void fileListMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fileListMouseReleased
        //Handle removals.
        if (evt.isPopupTrigger()) {
            popupMenu.show(evt.getComponent(), evt.getX(), evt.getY());            
            fileList.setSelectedIndex(fileList.locationToIndex(evt.getPoint()));
            return;
        }
        
        //If code get here, user is saving.
        if (attachedFiles.size() == 0) {
            return;
        }

        int index = fileList.locationToIndex(evt.getPoint());
        NoteFileInstance nfi = attachedFiles.get(index);
        
        //Get location from user.
        String chosenDirectory = WeatherFileChooser
                .openDirectoryChooser(new File(CommonLocalFileManager
                        .getDataDirectory()), "Save File...", null, this);
        if (chosenDirectory == null) {
            fileList.clearSelection();
            return;
        }
        File dest = new File(chosenDirectory + File.separator
                + nfi.getFileName());
        if (dest.exists()) {
            JOptionPane.showMessageDialog(this,
                    "The file is already saved at this location.");
            fileList.clearSelection();
            return;
        }

        try {
            FileOutputStream fout = new FileOutputStream(dest);
            fout.write(nfi.getFileData());
            fout.close();
        } catch (Exception e) {
            fileList.clearSelection();
            JOptionPane.showMessageDialog(this, "An error occurred while trying to save the file.");
            //Test for remaining space in application home, which has no effect
            //if the save was not there.
            StorageSpaceTester.testApplicationHome();
            return;
        }
        fileList.clearSelection();
        JOptionPane.showMessageDialog(this, "File saved.");
        
         //Test for remaining space in application home, which has no effect
         //if the save was not there.
         StorageSpaceTester.testApplicationHome();
    }//GEN-LAST:event_fileListMouseReleased

    private void removeItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeItemActionPerformed
        if (popupMenu.getInvoker() == fileList) {
            removeSelectedFile();
        }
    }//GEN-LAST:event_removeItemActionPerformed

    private void printButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_printButtonActionPerformed

    /**
     * Removes the selected file from the file list which shows attached files.
     */
    private void removeSelectedFile() {
        int index = fileList.getSelectedIndex();
        try {
            attachedFiles.remove(index);
            fileListModel.remove(index);
        }
        catch (Exception e) {
            return;  // This just happens when the file list itself is selected, but not any particular file. No action needed.
        }
        attachLabel.setVisible(fileListModel.size() > 0);
    }

    /**
     * Helper method to restore screen to its default state.
     */
    private void clear() {
        radPersonal.setSelected(true);
        titleField.setText("");
        noteArea.setText("");
        attachedFiles.clear();
        fileListModel.clear();
        attachLabel.setVisible(false);
        createButton.setEnabled(true);
        modified = false;
    }

    /**
     * Adds listeners that are common to several components.
     */
    private void addCommonListeners() {
        JTextComponent[] fields = new JTextComponent[] {
            startTimeField, endTimeField, titleField, noteArea
        };

        RightClickMenu.addMenuTo(fields);
        
        PopupMenuListener popupMenuListener = new PopupMenuListener() {

            @Override
            public void popupMenuWillBecomeVisible(PopupMenuEvent e) {                
            }

            @Override
            public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {                
            }

            @Override
            public void popupMenuCanceled(PopupMenuEvent e) {
                fileList.clearSelection();
            }
        };
        
        popupMenu.addPopupMenuListener(popupMenuListener);

        DocumentListener docLsr = new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                modified = true;
            }
            @Override
            public void removeUpdate(DocumentEvent e) {
                modified = true;
            }
            @Override
            public void changedUpdate(DocumentEvent e) {
            }
        };

        for (JTextComponent f : fields) {
            f.getDocument().addDocumentListener(docLsr);
        }

        ActionListener radLsr = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                modified = true;
            }
        };

        for (JRadioButton r : new JRadioButton[]{radAllStudents, radAllUsers, 
            radCourseStudents, radInstructorsOnly, radPersonal}) {
            r.addActionListener(radLsr);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup accessRightsGroup;
    private javax.swing.JPanel accessRightsPanel;
    private javax.swing.JButton attachButton;
    private javax.swing.JLabel attachLabel;
    private javax.swing.JButton changeRangeButton;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton closeButton;
    private javax.swing.JButton createButton;
    private javax.swing.JTextField endTimeField;
    private javax.swing.JList fileList;
    private javax.swing.JLabel instructorJLabel;
    private javax.swing.JLabel instructorLabel;
    private javax.swing.JLabel locationLabel;
    private javax.swing.JTextArea noteArea;
    private javax.swing.JScrollPane noteScrollPane;
    private javax.swing.JLabel notesTimeRangeJLabel;
    private javax.swing.JPopupMenu popupMenu;
    private javax.swing.JButton printButton;
    private javax.swing.JRadioButton radAllStudents;
    private javax.swing.JRadioButton radAllUsers;
    private javax.swing.JRadioButton radCourseStudents;
    private javax.swing.JRadioButton radInstructorsOnly;
    private javax.swing.JRadioButton radPersonal;
    private javax.swing.JMenuItem removeItem;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTextField startTimeField;
    private javax.swing.JLabel timeRangeToJLabel;
    private javax.swing.JTextField titleField;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
}
