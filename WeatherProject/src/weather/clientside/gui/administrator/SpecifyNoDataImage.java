package weather.clientside.gui.administrator;

import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.*;
import weather.ApplicationControlSystem;
import weather.clientside.gui.client.ImageRightClickMenu;
import weather.clientside.gui.component.PopupListener;
import weather.clientside.utilities.ImageFilter;
import weather.clientside.utilities.WeatherFileChooser;
import weather.common.data.resource.ImageInstance;
import weather.common.dbms.DBMSSystemManager;
import weather.common.dbms.mysql.MySQLResourceManager;
import weather.common.gui.component.BUDialog;
import weather.common.gui.component.IconProperties;
import weather.common.utilities.ImageFileTester;
import weather.common.utilities.CommonLocalFileManager;
import weather.common.utilities.WeatherException;
import weather.common.utilities.WeatherLogger;

/**
 * Allows an administrator to set the No-Data Image for the program.
 * For this window we only get the current pictures from database and send 
 * pictures to database
 * 
 * @author kc70024
 */
public class SpecifyNoDataImage extends BUDialog {
    
    private String path = "";
    private final DBMSSystemManager system;
    private final MySQLResourceManager rm;
    private File ndFile;
    private String noDataPath;
    private ImageRightClickMenu rightClickMenu;
    
    /**
     * Creates new form setNoDataImage.
     */
    public SpecifyNoDataImage(ApplicationControlSystem appControl){
        super(appControl);
        this.system = appControl.getGeneralService().getDBMSSystem();
        this.rm = (MySQLResourceManager) system.getResourceManager();
        initComponents();
        path = "";
        initializeImages();
        this.addRightClickMenu();
        
        int width = 637 + this.getInsets().left + this.getInsets().right;
        int height = 484 + this.getInsets().top + this.getInsets().bottom;
        Dimension thisDim = new Dimension(width, height);
        this.setSize(thisDim);
        this.setPreferredSize(thisDim);
        this.setMaximumSize(thisDim);
        this.setMinimumSize(thisDim);
        pack();
        
        super.postInitialize(true);
    }

    /**
     * Initializes the default images.
     */
    private void initializeImages() {
        if (rm.getDefaultGenericNoDataImage() == null) {
            this.noDataImageJLabel.setIcon(null);
            noDataImageJLabel.setText("\t<no image in database>.");
        } else {
            this.noDataPath = "A sample No-Data image.";
            this.showSelectedImage();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        selectImageButton = new javax.swing.JButton();
        updateImageButton = new javax.swing.JButton();
        noDataImageJLabel = new javax.swing.JLabel();
        doubleClickLabel = new javax.swing.JLabel();
        informationLabel = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();

        setTitle("Weather Viewer - Specify No-Data Image");
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        selectImageButton.setText("Select a Different No-Data Image");
        selectImageButton.setToolTipText("Select Image from Local Disk");
        selectImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectImageButtonActionPerformed(evt);
            }
        });
        getContentPane().add(selectImageButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 68, 221, 25));
        this.setIconImage(IconProperties.getTitleBarIconImage());
        this.setTitle("Specify No-Data Image");

        updateImageButton.setText("Submit Image to System");
        updateImageButton.setToolTipText("Update the Picture as No-Data Picture");
        updateImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateImageButtonActionPerformed(evt);
            }
        });
        getContentPane().add(updateImageButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(245, 68, 173, 25));

        noDataImageJLabel.setToolTipText("Right Click To Get More Options");
        noDataImageJLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(noDataImageJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 101, 613, 344));

        doubleClickLabel.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        doubleClickLabel.setText("(Right-click on the image to get more options.)");
        getContentPane().add(doubleClickLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(188, 457, 261, 15));

        informationLabel.setText("<html> The default “no data” image for all resources is shown below.<br> This image is used when custom images for the resources are not available.\n<br/>(Please note that changes will only affect videos obtained from the system going forward.)</html>");
        getContentPane().add(informationLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 12, 554, 48));
        informationLabel.getAccessibleContext().setAccessibleName("<html> The default “no data” image for all resources is shown below.<br> This image is used when custom images for the resources are not available.\n<br/>(Please note that changes will only affect videos obtained from the system going forward.)</html>");

        saveButton.setText("Save Image to Local System");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        getContentPane().add(saveButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 68, 195, 25));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * When the select image button is click this method is called.
     * Allows the user to select an image to be used as the No-Data Image.
     * @param evt the event that caused this method to be called.
     */
    private void selectImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectImageButtonActionPerformed
        File file = WeatherFileChooser.openFileChooser(WeatherFileChooser.OPEN,
                new File(CommonLocalFileManager.getPictureDirectory()), null, 
                "Select Default No-Data Image", new ImageFilter(), null, this);
        // Show open dialog and get image
        if (file != null) {
            path = file.toString();
            this.noDataPath = file.toString();
            this.ndFile = file;
            
            int testResult = this.testPic();
            if (testResult == 1) {
                this.showSelectedImage();
            } else {
                JOptionPane.showMessageDialog(this, "This is not a valid image.",
                        "File Type Error", JOptionPane.ERROR_MESSAGE);
                this.noDataPath = "";
                path = "";
                this.initializeImages();
            }
            this.addRightClickMenu();
        }
    }//GEN-LAST:event_selectImageButtonActionPerformed

    /**
     * Update button is called
     * @param evt 
     */
    private void updateImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateImageButtonActionPerformed
        if (path.isEmpty()) {
            return;
        }
        updateNoDataImage();
        this.noDataPath = "";
        path = "";
        this.initializeImages();
    }//GEN-LAST:event_updateImageButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        if(rightClickMenu == null) {
            JOptionPane.showMessageDialog(this, "No image is showing.", "Cannot Save Image",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        rightClickMenu.saveAction();
    }//GEN-LAST:event_saveButtonActionPerformed

    /**
     * Updates the No-Data picture.
     */
    private void updateNoDataImage() {
        if (this.noDataPath.equals("")) {
            return;
        }
        try {
            int ans = JOptionPane.showConfirmDialog(this, "If you change"
                    + " the default image, you will lose the old data. Do you want to continue?");
            if (ans == JOptionPane.NO_OPTION) {
                return;
            }
            
            ImageInstance imgDefault = new ImageInstance();
            ndFile = new File(this.noDataPath);
            imgDefault.readFile(ndFile);
            this.noDataPath = "";
            if (rm.setDefaultGenericNoDataImage(imgDefault)) {
                JOptionPane.showMessageDialog(this,
                        "Update of default image was successful",
                        "Update Successful",
                        JOptionPane.INFORMATION_MESSAGE); 
            } else {
                JOptionPane.showMessageDialog(this,
                        "Update of default image was NOT successful",
                        "Update Not Successful",
                        JOptionPane.INFORMATION_MESSAGE); 
            }
            this.noDataPath = "";
            path = "";
            
        } catch (WeatherException ex) {
            WeatherLogger.log(Level.SEVERE, "Unable to read no data image from file.", ex);
            JOptionPane.showMessageDialog(this,
                    "Update of default image was NOT successful",
                    "Update Not Successful",
                    JOptionPane.INFORMATION_MESSAGE);
        }

    }

    /**
     * Gets the current image.
     *
     * @return The image.
     * @throws WeatherException
     */
    private Image getImage() throws WeatherException {
        Image img = null;
        if (path.isEmpty()) {
            img = rm.getDefaultGenericNoDataImage().getImage();
        } else {
            try {
                img = ImageIO.read(new File(path));
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Cannot open the Image",
                        "Open Image Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        return img;

    }

    /**
     * Tests to see if the picture exists.
     * Resets path if image is not good.
     * 
     * @return 1 if it is labelNumber valid picture and the correct size,
     *          2 if it does not exist (indicated by IOException), 
     */
    private int testPic() {
        String img = this.noDataPath;
        File imgFile;
        try {
            imgFile = new File(img);
            ImageIO.read(imgFile);
            if (!ImageFileTester.isImageFile(imgFile)) {
                throw new IOException();
            }
            return 1;
        } catch (IOException ex) {
            noDataPath = "";
            return 2;
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel doubleClickLabel;
    private javax.swing.JLabel informationLabel;
    private javax.swing.JLabel noDataImageJLabel;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton selectImageButton;
    private javax.swing.JButton updateImageButton;
    // End of variables declaration//GEN-END:variables

    
    /**
     * Make the dimensions of a source image even and returns it. Odd dimensions
     * are decreased by one.
     *
     * @param source The source image.
     * @return The source image with even dimensions.
     */
    private BufferedImage evenImageDims(BufferedImage source) {

        int width = (source.getWidth() / 2) * 2;
        int height = (source.getHeight() / 2) * 2;
        BufferedImage destination = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
        Graphics2D g = destination.createGraphics();
        AffineTransform at = AffineTransform.getScaleInstance((double) width / source.getWidth(), (double) height / source.getHeight());
        g.drawRenderedImage(source, at);
        return destination;
    }
    
    /**
     * Sets the image to the default No-Data image.
     */
    private void showSelectedImage() {
        this.noDataImageJLabel.setText("");
        BufferedImage target = null;
        try {
            if (!path.equals("")) {
                //new image selected
                try {
                    target = (BufferedImage) (ImageIO.read(new File(path)));
                    target = evenImageDims(target);
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(this, "Cannot open the image.");
                }
            } else {
                //no new image, show old one
                target = (BufferedImage) (rm.getDefaultGenericNoDataImage().getImage());
            }
            this.noDataImageJLabel.setIcon(IconProperties.getSnapShotImage(target.getScaledInstance(noDataImageJLabel.getWidth(),
                    noDataImageJLabel.getHeight(), BufferedImage.TYPE_3BYTE_BGR)));
        } catch (WeatherException e) {
            WeatherLogger.log(Level.SEVERE, "WeatherException while getting default generic nodata image.", e);
        }
    }

    /**
     * Creates the right click menu.
     */
    private void addRightClickMenu() {
        //Get a buffered Image.
        BufferedImage bImage = null;
        try {
            bImage = (BufferedImage)getImage();
        } catch (WeatherException ex) {
            Logger.getLogger(SpecifyNoDataImage.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if(bImage == null){
            if (noDataImageJLabel.getMouseListeners().length > 0) {   //remove old menu
                this.noDataImageJLabel.removeMouseListener(this.noDataImageJLabel.getMouseListeners()[0]);
            }
            rightClickMenu = null;
            return;
        }
        
        //Change to new menu.
        rightClickMenu = new ImageRightClickMenu(bImage, "No Data Image", ".jpeg",
                null, null, true, this);
        if (noDataImageJLabel.getMouseListeners().length > 0) {   //remove old menu
            this.noDataImageJLabel.removeMouseListener(this.noDataImageJLabel.getMouseListeners()[0]);
        }
        noDataImageJLabel.addMouseListener(new PopupListener(rightClickMenu));  //attach new menu
    }
}