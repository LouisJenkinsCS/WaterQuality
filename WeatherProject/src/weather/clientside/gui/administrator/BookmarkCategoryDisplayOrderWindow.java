package weather.clientside.gui.administrator;

import java.util.Vector;
import javax.swing.JScrollPane;
import weather.ApplicationControlSystem;
import weather.clientside.utilities.MyDefaultTableModel;
import weather.common.data.bookmark.BookmarkCategory;
import weather.common.dbms.DBMSBookmarkCategoriesManager;
import weather.common.gui.component.BUDialog;
import weather.common.gui.component.IconProperties;

/**
 * A window to allow the user to change the order in which bookmark categories
 * are displayed.
 * @author Justin Enslin(2012)
 */
public class BookmarkCategoryDisplayOrderWindow extends BUDialog {

    private ApplicationControlSystem applicationControl;
    private DBMSBookmarkCategoriesManager categoryManager;
    
    /**
     * Creates a new <code>BookmarkCategoryWindow</code>.
     * @param applicationControl The application control system.
     */
    public BookmarkCategoryDisplayOrderWindow(
            ApplicationControlSystem applicationControl) {
        super(applicationControl);
        this.applicationControl = applicationControl;
        categoryManager = applicationControl.getDBMSSystem().
                getBookmarkCategoriesManager();
        setModalityType(ModalityType.APPLICATION_MODAL);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        initComponents();
        setTitle("Weather Viewer - Edit Bookmark Category Display Order");
        
        updateTable();
        errorLabel.setVisible(false);
        super.postInitialize(false);
    }

    /**
     * Utility method to update the contents of the table.
     */
    private void updateTable() {
        Vector<BookmarkCategory> categories = categoryManager.obtainAll();
        categoriesTable.setModel(new MyDefaultTableModel(categories.size(), 1));
        int i=0;
        categoriesTable.getColumnModel().getColumn(0).
                setHeaderValue("Bookmark Category Name");
        categoriesTable.getColumnModel().getColumn(0).
                setPreferredWidth(categoriesScrollPane.getWidth());
        for(BookmarkCategory category:categories){
            categoriesTable.setValueAt(category.getName(), i++, 0);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        displayOrderPanel = new javax.swing.JPanel();
        categoriesScrollPane = new javax.swing.JScrollPane();
        categoriesTable = new javax.swing.JTable();
        upButton = new javax.swing.JButton();
        downButton = new javax.swing.JButton();
        errorLabel = new javax.swing.JLabel();
        closeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        categoriesScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        this.categoriesScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);

        this.categoriesScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);

        categoriesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        categoriesScrollPane.setViewportView(categoriesTable);

        upButton.setIcon(IconProperties.getArrowUpSmallIcon());
        upButton.setToolTipText("Move the currently selected web link category up one index");
        upButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upButtonActionPerformed(evt);
            }
        });

        downButton.setIcon(IconProperties.getArrowDownSmallIcon());
        downButton.setToolTipText("Move the currently selected web link category down one index");
        downButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downButtonActionPerformed(evt);
            }
        });

        errorLabel.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        errorLabel.setForeground(new java.awt.Color(255, 51, 51));
        errorLabel.setIcon(IconProperties.getResourceInactiveIconImage());
        errorLabel.setText("A Bookmark Category Was Not Selected");

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout displayOrderPanelLayout = new javax.swing.GroupLayout(displayOrderPanel);
        displayOrderPanel.setLayout(displayOrderPanelLayout);
        displayOrderPanelLayout.setHorizontalGroup(
            displayOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displayOrderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(displayOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(displayOrderPanelLayout.createSequentialGroup()
                        .addComponent(errorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                        .addComponent(closeButton))
                    .addGroup(displayOrderPanelLayout.createSequentialGroup()
                        .addComponent(categoriesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(displayOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(downButton, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(upButton, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        displayOrderPanelLayout.setVerticalGroup(
            displayOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displayOrderPanelLayout.createSequentialGroup()
                .addGroup(displayOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(displayOrderPanelLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(upButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(downButton)
                        .addGap(0, 180, Short.MAX_VALUE))
                    .addComponent(categoriesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(displayOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(errorLabel)
                    .addComponent(closeButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 402, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(displayOrderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(displayOrderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void upButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upButtonActionPerformed
        Vector<BookmarkCategory> categories = categoryManager.obtainAll();
        int i = categoriesTable.getSelectedRow();
        
        //Nothing selected
        if (i == -1) {
            errorLabel.setVisible(true);
            return;
        }
        //First item selected
        if (i == 0) {
            errorLabel.setVisible(false);
            // do nothing - no need to tell the user the obvious
            return;
        }
        
        errorLabel.setVisible(false);
        int old_Rank = categories.get(i).getOrderRank();
        categories.get(i).setOrderRank(categories.get(i - 1).getOrderRank());
        categories.get(i - 1).setOrderRank(old_Rank);
        categoryManager.update(categories.get(i));
        categoryManager.update(categories.get(i - 1));
        this.updateTable();
        categoriesTable.setRowSelectionInterval(i - 1, i - 1);
    }//GEN-LAST:event_upButtonActionPerformed

    private void downButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downButtonActionPerformed
        Vector<BookmarkCategory> categories = categoryManager.obtainAll();
        int i = categoriesTable.getSelectedRow();
        if (i == -1) {
            errorLabel.setVisible(true);
            return;
        }
        if (i == categoriesTable.getRowCount() - 1) {
            errorLabel.setVisible(false);
            return;
        }
        errorLabel.setVisible(false);
        int old_Rank = categories.get(i).getOrderRank();
        categories.get(i).setOrderRank(categories.get(i + 1).getOrderRank());
        categories.get(i + 1).setOrderRank(old_Rank);
        categoryManager.update(categories.get(i));
        categoryManager.update(categories.get(i + 1));
        this.updateTable();
        categoriesTable.setRowSelectionInterval(i + 1, i + 1);
    }//GEN-LAST:event_downButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane categoriesScrollPane;
    private javax.swing.JTable categoriesTable;
    private javax.swing.JButton closeButton;
    private javax.swing.JPanel displayOrderPanel;
    private javax.swing.JButton downButton;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JButton upButton;
    // End of variables declaration//GEN-END:variables

}
