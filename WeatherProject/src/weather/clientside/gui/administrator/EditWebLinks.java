package weather.clientside.gui.administrator;

import java.util.Vector;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import weather.AdministratorControlSystem;
import weather.clientside.utilities.BarebonesBrowser;
import weather.clientside.utilities.MyDefaultTableModel;
import weather.common.data.WebLink;
import weather.common.data.WebLinkCategories;
import weather.common.dbms.DBMSSystemManager;
import weather.common.dbms.DBMSWebLinkManager;
import weather.common.gui.component.BUDialog;
import weather.common.gui.component.IconProperties;

/**
 * The <code>EditWebLinks</code> class represents an
 * instance of the EditWebLinks window. This allows an administrator 
 * to choose a link to edit. When a link is selected 
 * for editing, the EditWebLinkWindow is shown.
 * @author Ora Merkel (2009)
 * @author Andrew Bennett (2010)
 * @author Bloomsburg University Software Engineering
 * @version Spring 2010
 */
public class EditWebLinks extends BUDialog {
    private DBMSSystemManager dbms;
    private DBMSWebLinkManager webLinkManager;
    private Vector<WebLink> links;
    private Vector<WebLinkCategories> webLinkCategories;
    private Vector<WebLinkCategories> left_right;
    private MyDefaultTableModel mod;
    private int rows;
    private String savecheckerurl, savecheckerlinkname;
    /**
     * Constructor for the Edit Web Link window.
     * @param adminService The GeneralService object that communicates with other 
     *              parts of the program.
     */
    public EditWebLinks(AdministratorControlSystem adminService) {
        super(adminService);
        this.dbms = adminService.getGeneralService().getDBMSSystem();
        webLinkManager = dbms.getWebLinkManager();
        setRow();
        mod = new MyDefaultTableModel(rows, 2);
        initComponents();
        updateLinkCategoriesComboBox();
        updateRankTab();
        initialWebLinksJTable();
        errorLabel.setVisible(false);
        // Build the drop down dynamically
        webLinkCategories = webLinkManager.obtainAllWebLinkCategories();
        for (WebLinkCategories wc : webLinkCategories) {
            left_right.add(wc);
        }
        links = webLinkManager.getLinksForCategory(categoryComboBox.getSelectedItem().toString());
        this.pack();
        savecheckerurl = urlTextJTextField.getText();
        savecheckerlinkname = linkNameJTextField.getText();
        super.postInitialize(true);
    }
    /**
     * Constructor for the Edit Web Link window.
     * @param adminService The GeneralService object that communicates with other 
     *              parts of the program.
     * @param category The category holding to-be-edited web link.
     * @param weblink The web link to be edited.
     */
    public EditWebLinks(AdministratorControlSystem adminService, String category, String weblink) {

        this.dbms = adminService.getGeneralService().getDBMSSystem();
        webLinkManager = dbms.getWebLinkManager();
        setRow();
        mod = new MyDefaultTableModel(rows, 1);
        initComponents();
        updateLinkCategoriesComboBox();
        updateRankTab();
        initialWebLinksJTable();

        // Build the drop down dynamically
        webLinkCategories = webLinkManager.obtainAllWebLinkCategories();
        links = webLinkManager.getLinksForCategory(categoryComboBox.getSelectedItem().toString());
        categoryComboBox.setSelectedItem(category);
        webLinksComboBox.setSelectedItem(weblink);
        savecheckerurl = urlTextJTextField.getText();
        savecheckerlinkname = linkNameJTextField.getText();
        errorLabel.setVisible(false);
        this.pack();
        super.postInitialize(true);
    }
    /**
     * Sets the local variable <code>row</code> to the current size
     * of the list of links.
     */
    private void setRow()
    {
        webLinkCategories = webLinkManager.obtainAllWebLinkCategories();
        links=webLinkManager.getLinksForCategory(webLinkCategories.get(0).getLinkCategory());
        rows=links.size();
    }
    
    /**
     * Updates the ranking of the web links after a change was made.
     */
    private void updateRankTab() {
         webLinkCategories = webLinkManager.obtainAllWebLinkCategories();
         this.categoriesComboBox.removeAllItems();
          for (WebLinkCategories wc : webLinkCategories) 
         {
             this.categoriesComboBox.addItem(wc.getLinkCategory());
         }
          this.categoriesComboBox.setSelectedIndex(0);
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        EditWebLinkRank = new javax.swing.JTabbedPane();
        editWebLinksPanel = new javax.swing.JPanel();
        urlCategoryJLabel = new javax.swing.JLabel();
        categoryComboBox = new javax.swing.JComboBox<String>();
        weblinkJLabel = new javax.swing.JLabel();
        webLinksComboBox = new javax.swing.JComboBox<String>();
        testURLJButton = new javax.swing.JButton();
        urlTextJTextField = new javax.swing.JTextField();
        urlLabel = new javax.swing.JLabel();
        urlNameLabel = new javax.swing.JLabel();
        linkNameJTextField = new javax.swing.JTextField();
        updateButton = new javax.swing.JButton();
        deleteLinkButton = new javax.swing.JButton();
        moveWebLinksPanel = new javax.swing.JPanel();
        categoryFromLabel = new javax.swing.JLabel();
        moveCategoryLeft = new javax.swing.JComboBox<String>();
        moveCategoryRight = new javax.swing.JComboBox<String>();
        categoryToLabel = new javax.swing.JLabel();
        moveListLeft = new java.awt.List();
        moveListRight = new java.awt.List();
        moveRightToLeft = new javax.swing.JButton();
        moveLeftToRight = new javax.swing.JButton();
        displayOrderPanel = new javax.swing.JPanel();
        categoriesComboBox = new javax.swing.JComboBox<String>();
        webLinksJScrollPane = new javax.swing.JScrollPane();
        this.webLinksJScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);

        this.webLinksJScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);

        webLinks_JTable = new javax.swing.JTable();
        upButton = new javax.swing.JButton();
        downButton = new javax.swing.JButton();
        allCategoriesLabel = new javax.swing.JLabel();
        errorLabel = new javax.swing.JLabel();
        closeButton = new javax.swing.JButton();

        setTitle("Weather Viewer - Edit Web Links");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        urlCategoryJLabel.setText("Category:");

        categoryComboBox.setMaximumRowCount(20);
        categoryComboBox.setToolTipText("A list of web link categories available");
        categoryComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryComboBoxActionPerformed(evt);
            }
        });

        weblinkJLabel.setText("Web Link:");

        webLinksComboBox.setMaximumRowCount(18);
        webLinksComboBox.setToolTipText("A list of web links associated with the specified category");
        webLinksComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                webLinksComboBoxActionPerformed(evt);
            }
        });

        testURLJButton.setText("Test URL");
        testURLJButton.setToolTipText("Tests the URL given");
        testURLJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testURLJButtonActionPerformed(evt);
            }
        });

        urlTextJTextField.setToolTipText("The URL associated with the name of this web link");

        urlLabel.setText("URL Link:");

        urlNameLabel.setText("Name:");
        urlNameLabel.setToolTipText("The name given to the URL link");

        linkNameJTextField.setToolTipText("This associate with the name of the link");

        updateButton.setText("Update Link");
        updateButton.setToolTipText("Update the web link selected");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        deleteLinkButton.setText("Delete Link");
        deleteLinkButton.setToolTipText("Deletes the selected web link");
        deleteLinkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteLinkButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout editWebLinksPanelLayout = new javax.swing.GroupLayout(editWebLinksPanel);
        editWebLinksPanel.setLayout(editWebLinksPanelLayout);
        editWebLinksPanelLayout.setHorizontalGroup(
            editWebLinksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editWebLinksPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(editWebLinksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(editWebLinksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(weblinkJLabel)
                        .addComponent(urlLabel)
                        .addComponent(urlNameLabel))
                    .addComponent(urlCategoryJLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(editWebLinksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(categoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editWebLinksPanelLayout.createSequentialGroup()
                        .addComponent(updateButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteLinkButton))
                    .addComponent(urlTextJTextField)
                    .addComponent(linkNameJTextField)
                    .addComponent(webLinksComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(testURLJButton)
                .addGap(96, 96, 96))
        );
        editWebLinksPanelLayout.setVerticalGroup(
            editWebLinksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editWebLinksPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(editWebLinksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(editWebLinksPanelLayout.createSequentialGroup()
                        .addComponent(testURLJButton)
                        .addGap(55, 55, 55))
                    .addGroup(editWebLinksPanelLayout.createSequentialGroup()
                        .addGroup(editWebLinksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(categoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(urlCategoryJLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(editWebLinksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(weblinkJLabel)
                            .addComponent(webLinksComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(editWebLinksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(urlTextJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(urlLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(editWebLinksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(linkNameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(urlNameLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(editWebLinksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(deleteLinkButton)
                            .addComponent(updateButton))))
                .addContainerGap(143, Short.MAX_VALUE))
        );

        EditWebLinkRank.addTab("Edit Web Links", editWebLinksPanel);

        categoryFromLabel.setText("Category From:");

        moveCategoryLeft.setMaximumRowCount(20);
        moveCategoryLeft.setToolTipText("A list of web link categories available");
        moveCategoryLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveCategoryLeftActionPerformed(evt);
            }
        });

        moveCategoryRight.setMaximumRowCount(20);
        moveCategoryRight.setToolTipText("A list of web link categories available");
        moveCategoryRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveCategoryRightActionPerformed(evt);
            }
        });

        categoryToLabel.setText("Category To:");

        moveListLeft.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        moveRightToLeft.setText("<--");
        moveRightToLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveRightToLeftActionPerformed(evt);
            }
        });

        moveLeftToRight.setText("-->");
        moveLeftToRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveLeftToRightActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout moveWebLinksPanelLayout = new javax.swing.GroupLayout(moveWebLinksPanel);
        moveWebLinksPanel.setLayout(moveWebLinksPanelLayout);
        moveWebLinksPanelLayout.setHorizontalGroup(
            moveWebLinksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(moveWebLinksPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(moveWebLinksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(moveListLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(categoryFromLabel)
                    .addComponent(moveCategoryLeft, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(moveWebLinksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(moveRightToLeft)
                    .addComponent(moveLeftToRight))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(moveWebLinksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(categoryToLabel)
                    .addComponent(moveCategoryRight, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(moveListRight, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE))
                .addContainerGap())
        );
        moveWebLinksPanelLayout.setVerticalGroup(
            moveWebLinksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(moveWebLinksPanelLayout.createSequentialGroup()
                .addGroup(moveWebLinksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(moveWebLinksPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(moveWebLinksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(moveWebLinksPanelLayout.createSequentialGroup()
                                .addComponent(categoryFromLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(moveCategoryLeft, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(moveListLeft, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE))
                            .addGroup(moveWebLinksPanelLayout.createSequentialGroup()
                                .addComponent(categoryToLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(moveCategoryRight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(moveListRight, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE))))
                    .addGroup(moveWebLinksPanelLayout.createSequentialGroup()
                        .addGap(98, 98, 98)
                        .addComponent(moveRightToLeft)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(moveLeftToRight)))
                .addContainerGap())
        );

        EditWebLinkRank.addTab("Move Web Links", moveWebLinksPanel);

        categoriesComboBox.setMaximumRowCount(20);
        categoriesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoriesComboBoxActionPerformed(evt);
            }
        });

        webLinksJScrollPane.setAutoscrolls(true);
        webLinksJScrollPane.setOpaque(false);

        webLinks_JTable.setModel(mod);
        webLinks_JTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        webLinksJScrollPane.setViewportView(webLinks_JTable);

        upButton.setIcon(IconProperties.getArrowUpSmallIcon());
        upButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upButtonActionPerformed(evt);
            }
        });

        downButton.setIcon(IconProperties.getArrowDownSmallIcon());
        downButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downButtonActionPerformed(evt);
            }
        });

        allCategoriesLabel.setText("All Categories:");

        errorLabel.setForeground(new java.awt.Color(255, 51, 51));
        errorLabel.setIcon(IconProperties.getResourceInactiveIconImage());
        errorLabel.setText("A web link category was not selected");

        javax.swing.GroupLayout displayOrderPanelLayout = new javax.swing.GroupLayout(displayOrderPanel);
        displayOrderPanel.setLayout(displayOrderPanelLayout);
        displayOrderPanelLayout.setHorizontalGroup(
            displayOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, displayOrderPanelLayout.createSequentialGroup()
                .addGroup(displayOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(displayOrderPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(allCategoriesLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(categoriesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(webLinksJScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(displayOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(upButton)
                    .addComponent(downButton))
                .addGap(41, 41, 41))
            .addGroup(displayOrderPanelLayout.createSequentialGroup()
                .addComponent(errorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        displayOrderPanelLayout.setVerticalGroup(
            displayOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displayOrderPanelLayout.createSequentialGroup()
                .addGroup(displayOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(categoriesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(allCategoriesLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(displayOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(displayOrderPanelLayout.createSequentialGroup()
                        .addComponent(upButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(downButton))
                    .addComponent(webLinksJScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addComponent(errorLabel)
                .addContainerGap())
        );

        EditWebLinkRank.addTab("Display Order", displayOrderPanel);

        closeButton.setText("Close");
        closeButton.setToolTipText("Closes this window and returns to the main window");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(EditWebLinkRank, javax.swing.GroupLayout.PREFERRED_SIZE, 458, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(closeButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(EditWebLinkRank)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(closeButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This method is called when the Search button is clicked. The
     * SearchWebLinks window is opened.
     * @param evt The event that the search button is clicked.
     */
    /**
     * This method is called when the "ENTER" key is pressed on the keyboard.
     * The SearchWebLinks window is opened.
     * @param evt The event that the "ENTER" key was pressed.
     */
    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        if(EditWebLinkRank.getSelectedIndex() == 0) {
            if(!savecheckerurl.equals(urlTextJTextField.getText()) || 
                    !savecheckerlinkname.equals(linkNameJTextField.getText())) {
                if(adminService.getGeneralService().leaveWithoutSaving(this))
                    dispose();
            } else {
                dispose();
            }
        } else {
            dispose();
        }
}//GEN-LAST:event_closeButtonActionPerformed

    private void deleteLinkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteLinkButtonActionPerformed
        int ans = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this WebLink?", "Confirm", JOptionPane.YES_NO_OPTION);
        if (ans == JOptionPane.YES_OPTION) {
            for (WebLink wl : webLinkManager.getLinksForCategory(categoryComboBox.getSelectedItem().toString())) {
                if (wl.getURLString().equals(urlTextJTextField.getText())) {
                    webLinkManager.deleteLink(urlTextJTextField.getText());
                    links.remove(webLinksComboBox.getSelectedIndex());
                    webLinksComboBox.removeAllItems();
                    for (int i = 0; i < links.size(); i++) {
                        webLinksComboBox.addItem(links.get(i).getName());
                        if (i == 0) {
                            webLinksComboBox.setSelectedIndex(0);
                        }
                    }
                    return;
                }
            }
            JOptionPane.showMessageDialog(this, "Sorry, this link does not exist in this category.");
        }
}//GEN-LAST:event_deleteLinkButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        boolean isSuccessfull = false;
        int catSelected = categoryComboBox.getSelectedIndex();
        int linkSelected = webLinksComboBox.getSelectedIndex();

        WebLink linkToUpdate = null;
        // iterate through and find the link that matches the one we need
        for (WebLink wl : links) {
            if (webLinksComboBox.getSelectedItem().toString().equals(wl.getName())) {
                linkToUpdate = wl;
                linkToUpdate.setURL(urlTextJTextField.getText().toString());
                linkToUpdate.setName(linkNameJTextField.getText().toString());
            }
        }
        if (linkToUpdate != null) {
            isSuccessfull = webLinkManager.updateWebLink(linkToUpdate);
        } else {
            // @TODO - Possibly throw an error here. Should not happen since
            // we generate everything.
            JOptionPane.showMessageDialog(this, "WebLink not updated successfully.");
        }
        if(isSuccessfull) {
            JOptionPane.showMessageDialog(this, "WebLink updated successfully.");
        }else {
            JOptionPane.showMessageDialog(this, "WebLink not updated successfully.");
        }

        this.adminService.repaintWebLink();
        categoryComboBox.setSelectedIndex(catSelected);
        webLinksComboBox.setSelectedIndex(linkSelected);
        savecheckerurl = urlTextJTextField.getText();
        savecheckerlinkname = linkNameJTextField.getText();
}//GEN-LAST:event_updateButtonActionPerformed

    private void testURLJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testURLJButtonActionPerformed
        BarebonesBrowser.openURL(urlTextJTextField.getText(), this);
}//GEN-LAST:event_testURLJButtonActionPerformed

    private void webLinksComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_webLinksComboBoxActionPerformed
        for (int i = 0; i < links.size(); i++) {
            if (links.get(i).getName().equals(webLinksComboBox.getSelectedItem())) {
                linkNameJTextField.setText(links.get(i).getName());
                urlTextJTextField.setText(links.get(i).getURLString());
            }
        }
}//GEN-LAST:event_webLinksComboBoxActionPerformed

    private void categoryComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryComboBoxActionPerformed
        boolean isEmpty = true;
        webLinksComboBox.removeAllItems();
        links = webLinkManager.getLinksForCategory(categoryComboBox.getSelectedItem().toString());
        for(int i = 0; i < links.size(); i++) {
            webLinksComboBox.addItem(links.get(i).getName());
            isEmpty = false;
        }
        
        if(isEmpty) {
            webLinksComboBox.setEnabled(!isEmpty);
            linkNameJTextField.setText("");
            urlTextJTextField.setText("");
            linkNameJTextField.setEnabled(!isEmpty);
            urlTextJTextField.setEnabled(!isEmpty);
            testURLJButton.setEnabled(!isEmpty);
            updateButton.setEnabled(!isEmpty);
            deleteLinkButton.setEnabled(!isEmpty);
        }
        
        if(!isEmpty){
            webLinksComboBox.setEnabled(!isEmpty);
            linkNameJTextField.setText(links.get(0).getName());
            urlTextJTextField.setText(links.get(0).getURLString());
            linkNameJTextField.setEnabled(!isEmpty);
            urlTextJTextField.setEnabled(!isEmpty);
            testURLJButton.setEnabled(!isEmpty);
            updateButton.setEnabled(!isEmpty);
            deleteLinkButton.setEnabled(!isEmpty);
        }
        savecheckerurl = urlTextJTextField.getText();
        savecheckerlinkname = linkNameJTextField.getText();
}//GEN-LAST:event_categoryComboBoxActionPerformed

    private void moveCategoryLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveCategoryLeftActionPerformed
        left_right=webLinkManager.obtainAllWebLinkCategories();
        if(moveCategoryLeft.getItemCount()!=left_right.size())
            return;
        moveListLeft.removeAll();
        int r=0;
        for(WebLinkCategories wc: webLinkManager.obtainAllWebLinkCategories())
        {
            if(wc.getLinkCategory().equals(moveCategoryLeft.getSelectedItem().toString()))
            {
                left_right.removeElementAt(r);
                this.updateRightComboBox();
            }r++;
        }
        links = webLinkManager.getLinksForCategory(moveCategoryLeft.getSelectedItem().toString());
        for(int i = 0; i < links.size(); i++)
            moveListLeft.add(links.get(i).getName());
    }//GEN-LAST:event_moveCategoryLeftActionPerformed

    private void moveCategoryRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveCategoryRightActionPerformed
        if(moveCategoryRight.getItemCount()!=moveCategoryLeft.getItemCount()-1)
            return;
        moveListRight.removeAll();
        links = webLinkManager.getLinksForCategory(moveCategoryRight.getSelectedItem().toString());
        for(int i = 0; i < links.size(); i++)
            moveListRight.add(links.get(i).getName());
    }//GEN-LAST:event_moveCategoryRightActionPerformed

    private void moveRightToLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveRightToLeftActionPerformed
        moveLink(moveCategoryRight, moveCategoryLeft, moveListRight.getSelectedItem());
        this.fill_data();
    }//GEN-LAST:event_moveRightToLeftActionPerformed

    private void moveLeftToRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveLeftToRightActionPerformed
        moveLink(moveCategoryLeft, moveCategoryRight, moveListLeft.getSelectedItem());
        this.fill_data();
    }//GEN-LAST:event_moveLeftToRightActionPerformed

    private void initialWebLinksJTable()
    {
        webLinks_JTable.getColumnModel().getColumn(0).setHeaderValue("Link Name");
        webLinks_JTable.getColumnModel().getColumn(0).setPreferredWidth(webLinksJScrollPane.getWidth()-3);
        webLinks_JTable.setVisible(true);
    }
    private void fill_data()
    {
         int row=0;
         links=webLinkManager.getLinksForCategory(this.categoriesComboBox.getSelectedItem().toString());
         webLinks_JTable.setModel(mod);
        this.initialWebLinksJTable();
        for(int i=0;i<links.size();i++)
        {
            webLinks_JTable.setValueAt(links.get(i).getName(), row, 0);
            row++;
        }
        //this.webLinks_JTable.setSize(600, links.size()*20);
        //webLinks_JTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        webLinks_JTable.updateUI();        
    }
    private void categoriesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoriesComboBoxActionPerformed
       this.fill_data();
    }//GEN-LAST:event_categoriesComboBoxActionPerformed

    private void upButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upButtonActionPerformed
        links=webLinkManager.getLinksForCategory(this.categoriesComboBox.getSelectedItem().toString());
        int i;
        i=webLinks_JTable.getSelectedRow();
        if(i==-1)
        {
            errorLabel.setVisible(true);
            return;
        }
        if(i==0)
        {
            errorLabel.setVisible(false);
            return;
        }
        errorLabel.setVisible(false);
        int old_order=links.get(i).getOrderRank();
        links.get(i).setOrderRank(links.get(i-1).getOrderRank());
        links.get(i-1).setOrderRank(old_order);
        webLinkManager.updateWebLink(links.get(i));
        webLinkManager.updateWebLink(links.get(i-1));
        this.fill_data();
         webLinks_JTable.setRowSelectionInterval(i-1, i-1);
    }//GEN-LAST:event_upButtonActionPerformed

    private void downButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downButtonActionPerformed
        links=webLinkManager.getLinksForCategory(this.categoriesComboBox.getSelectedItem().toString());
        int i;
        i=webLinks_JTable.getSelectedRow();
        if(i==-1)
        {
            errorLabel.setVisible(true);
            return;
        }
        if(i==webLinks_JTable.getRowCount()-1)
        {
            errorLabel.setVisible(false);
            return;
        }
        errorLabel.setVisible(false);
        int old_order=links.get(i).getOrderRank();
        links.get(i).setOrderRank(links.get(i+1).getOrderRank());
        links.get(i+1).setOrderRank(old_order);
        webLinkManager.updateWebLink(links.get(i));
        webLinkManager.updateWebLink(links.get(i+1));
        this.fill_data();
        webLinks_JTable.setRowSelectionInterval(i+1, i+1);
    }//GEN-LAST:event_downButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if(EditWebLinkRank.getSelectedIndex() == 0) {
            if(!savecheckerurl.equals(urlTextJTextField.getText()) || 
                    !savecheckerlinkname.equals(linkNameJTextField.getText())) {
                if(adminService.getGeneralService().leaveWithoutSaving(this))
                    dispose();
            } else {
                dispose();
            }
        } else {
            dispose();
        }
    }//GEN-LAST:event_formWindowClosing

    /**
     * Moves the link from one list to another.
     * @param from The original place the web link was.
     * @param to The new place the web link will be.
     * @param webLinkName The name of the web link.
     */
    private void moveLink(JComboBox from, JComboBox to, String webLinkName) {
        // Both combo boxes must be different to move a Web Link
        if(from.getSelectedItem().toString().equals(to.getSelectedItem().toString())) {
            JOptionPane.showMessageDialog(this, "You must select two different categories to move a Web Link");
            return;
        }
        
        WebLink toUpdate = null;
        int newCatID = -1;

        // Get the category that the weblink is in
        links = webLinkManager.getLinksForCategory(from.getSelectedItem().toString());
        for(int i = 0; i < links.size(); i++)
            if(links.get(i).getName().equals(webLinkName))
                toUpdate = links.get(i);

        // Find the category we want to move it too
        for(int i = 0; i < webLinkCategories.size(); i++)
            if(webLinkCategories.get(i).getLinkCategory().equals(to.getSelectedItem().toString()))
                newCatID = webLinkCategories.get(i).getLinkCategoryNumber();

        // Make sure we found what we were looking for
        if(toUpdate == null || newCatID == -1) {
            JOptionPane.showMessageDialog(this, "An error has occurred while updating the weblink.");
            return;
        }

        toUpdate.setLinkCategoryNumber(newCatID);
        webLinkManager.updateWebLink(toUpdate);

        // Refresh both lists
        moveCategoryRightActionPerformed(null);
        moveCategoryLeftActionPerformed(null);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane EditWebLinkRank;
    private javax.swing.JLabel allCategoriesLabel;
    private javax.swing.JComboBox<String> categoriesComboBox;
    private javax.swing.JComboBox<String> categoryComboBox;
    private javax.swing.JLabel categoryFromLabel;
    private javax.swing.JLabel categoryToLabel;
    private javax.swing.JButton closeButton;
    private javax.swing.JButton deleteLinkButton;
    private javax.swing.JPanel displayOrderPanel;
    private javax.swing.JButton downButton;
    private javax.swing.JPanel editWebLinksPanel;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JTextField linkNameJTextField;
    private javax.swing.JComboBox<String> moveCategoryLeft;
    private javax.swing.JComboBox<String> moveCategoryRight;
    private javax.swing.JButton moveLeftToRight;
    private java.awt.List moveListLeft;
    private java.awt.List moveListRight;
    private javax.swing.JButton moveRightToLeft;
    private javax.swing.JPanel moveWebLinksPanel;
    private javax.swing.JButton testURLJButton;
    private javax.swing.JButton upButton;
    private javax.swing.JButton updateButton;
    private javax.swing.JLabel urlCategoryJLabel;
    private javax.swing.JLabel urlLabel;
    private javax.swing.JLabel urlNameLabel;
    private javax.swing.JTextField urlTextJTextField;
    private javax.swing.JComboBox<String> webLinksComboBox;
    private javax.swing.JScrollPane webLinksJScrollPane;
    private javax.swing.JTable webLinks_JTable;
    private javax.swing.JLabel weblinkJLabel;
    // End of variables declaration//GEN-END:variables

    /**
     * Builds the category drop down list dynamically, then sets the index to 0.
     */
    private void updateLinkCategoriesComboBox() {
        webLinkCategories = webLinkManager.obtainAllWebLinkCategories();
        categoryComboBox.removeAllItems();
        moveCategoryLeft.removeAllItems();
        moveCategoryRight.removeAllItems();
        left_right=webLinkManager.obtainAllWebLinkCategories();
        for(WebLinkCategories wc : left_right)
        {
            moveCategoryLeft.addItem(wc.getLinkCategory());
        }

        for (WebLinkCategories wc : webLinkCategories) {
            categoryComboBox.addItem(wc.getLinkCategory());
        }
        categoryComboBox.setSelectedIndex(0);
        moveCategoryLeft.setSelectedIndex(0);
        //moveCategoryRight.setSelectedIndex(0);
    }
    /**
     * Updates the right ComboBox after a web link was moved to the left ComboBox.
     */
    private void updateRightComboBox()
    {
        moveCategoryRight.removeAllItems();
        for(WebLinkCategories wc : left_right){
            moveCategoryRight.addItem(wc.getLinkCategory());
        }
        moveCategoryRight.setSelectedIndex(0);
    }
}
