package weather.clientside.gui.administrator;

import java.sql.Date;
import java.util.Vector;
import javax.swing.JOptionPane;
import weather.ApplicationControlSystem;
import weather.clientside.utilities.MyDefaultTableModel;
import weather.common.data.Course;
import weather.common.dbms.DBMSCourseManager;
import weather.common.dbms.DBMSEnrollmentManager;
import weather.common.dbms.DBMSSystemManager;
import weather.common.gui.component.BUDialog;
import weather.common.utilities.ResourceTimeManager;

/**
 * The <code>PurgeClassesWindow</code> class creates a form that loads old classes
 * unused within X years, and allows the user the option to purge them.
 * @author Mike Nacko (2011)
 */
public class PurgeClassesWindow extends BUDialog {
    /**
     * Determines if a de-serialized file is compatible with this class.
     *
     * Maintainers must change this value if and only if the new version
     * of this class is not compatible with old versions. See Sun docs
     * for <a href=http://java.sun.com/products/jdk/1.1/docs/guide
     * /serialization/spec/version.doc.html> details. </a>
     *
     * Not necessary to include in first version of the class, but
     * included here as a reminder of its importance.
     */
    
    private DBMSSystemManager dbms;
    private DBMSCourseManager courseMgr;
    private DBMSEnrollmentManager enrollmentMgr;
    private boolean isAdmin;

    /**
     * Constructor to create form.
     * 
     * @param appControl Control system for the application.
     * @param isAdmin True if the user is an administrator, 
     *                  false if they are an instructor.
     */
    public PurgeClassesWindow(ApplicationControlSystem appControl, boolean isAdmin) {
        super(appControl);
        this.dbms = appControl.getGeneralService().getDBMSSystem();
        this.isAdmin = isAdmin;
        courseMgr = dbms.getCourseManager();
        enrollmentMgr = dbms.getEnrollmentManager();
        initComponents();

        classTable.setRowSelectionAllowed(true);
        classTable.setAutoCreateRowSorter(true);

        updateTable(1);
        super.postInitialize(false);
    }

    /**
     * Loads the classes that have been created the specified number of years
     * before the current date and loads them into the table.
     * 
     * @param years The amount of years for a class to be considered "old".
     */
    private void updateTable(int years) {
        java.util.Date now = new java.util.Date();
        Date since = new Date(now.getTime() - (years * (ResourceTimeManager.MILLISECONDS_PER_NONLEAP_YEAR)));

        Vector<Course> courses = courseMgr.obtainInactiveCourses(since);

        classTable.setModel(new MyDefaultTableModel(courses.size(), 9));
        classTable.getColumnModel().getColumn(0).setHeaderValue("Course Number");
        classTable.getColumnModel().getColumn(1).setHeaderValue("Department");
        classTable.getColumnModel().getColumn(2).setHeaderValue("ClassID");
        classTable.getColumnModel().getColumn(3).setHeaderValue("Section");
        classTable.getColumnModel().getColumn(4).setHeaderValue("Course");
        classTable.getColumnModel().getColumn(5).setHeaderValue("Semester");
        classTable.getColumnModel().getColumn(6).setHeaderValue("Year");
        classTable.getColumnModel().getColumn(7).setHeaderValue("Instructor");
        classTable.getColumnModel().getColumn(8).setHeaderValue("Creation Date");

        for(int i = 0; i < courses.size(); i++) {
            if(!isAdmin)
                if(!courses.get(i).getInstructor().getLoginId().equals(appControl.getGeneralService().getUser().getLoginId()))
                    continue;

            classTable.setValueAt(courses.get(i).getCourseNumber(), i, 0);
            classTable.setValueAt(courses.get(i).getDepartmentName(), i, 1);
            classTable.setValueAt(courses.get(i).getClassIdentifier(), i, 2);
            classTable.setValueAt(courses.get(i).getSection(), i, 3);
            classTable.setValueAt(courses.get(i).getClassName(), i, 4);
            classTable.setValueAt(courses.get(i).getSemester(), i, 5);
            classTable.setValueAt(courses.get(i).getYear(), i, 6);
            classTable.setValueAt(courses.get(i).getInstructor().getFirstName() + " " + courses.get(i).getInstructor().getLastName(), i, 7);
            classTable.setValueAt(courses.get(i).getCreationDateInPrettyFormat(), i, 8);
        }

        classTable.updateUI();
    }

    /** 
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        classTable = new javax.swing.JTable();
        labelShow1 = new javax.swing.JLabel();
        yearsCombo = new javax.swing.JComboBox();
        labelShow2 = new javax.swing.JLabel();
        noResultsLabel = new javax.swing.JLabel();
        purgeClassesButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Weather Viewer - Purge Classes");

        jScrollPane1.setViewportView(classTable);

        labelShow1.setText("Show classes which are");

        yearsCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5" }));

        labelShow2.setText("years old");

        noResultsLabel.setForeground(new java.awt.Color(255, 0, 51));
        noResultsLabel.setText("No old classes matching the specified parameters could be found.");

        purgeClassesButton.setText("Purge Classes");
        purgeClassesButton.setToolTipText("Removes the selected users from the database");
        purgeClassesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                purgeClassesButtonActionPerformed(evt);
            }
        });

        closeButton.setText("Close");
        closeButton.setToolTipText("Closes the window, making no changes");
        closeButton.setMaximumSize(new java.awt.Dimension(99, 23));
        closeButton.setMinimumSize(new java.awt.Dimension(99, 23));
        closeButton.setPreferredSize(new java.awt.Dimension(99, 23));
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelShow1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(yearsCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelShow2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 832, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(noResultsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(purgeClassesButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelShow1)
                    .addComponent(yearsCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelShow2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(purgeClassesButton)
                        .addComponent(noResultsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Generates what happens if Purge Classes button is clicked.
     * @param evt Event that button is clicked.
     */
    private void purgeClassesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_purgeClassesButtonActionPerformed
        int year = Integer.valueOf((String)yearsCombo.getSelectedItem());
        java.util.Date now = new java.util.Date();
        Date since = new Date(now.getTime() - (year * (ResourceTimeManager.MILLISECONDS_PER_NONLEAP_YEAR)));

        Vector<Course> courses = courseMgr.obtainInactiveCourses(since);

        if(courses.isEmpty())
        {
            JOptionPane.showMessageDialog(this, "No courses to remove.");
            return;
        }
        //Verify user wants to remove course
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want"
                + " to remove these courses? This will not remove the students\n"
                + "enrolled other courses.", "Confirm", JOptionPane.YES_NO_OPTION);
        if(confirm != JOptionPane.YES_OPTION) return;
        
        
        // Remove all students from the course, then remove the course
        for(int i = 0; i < courses.size(); i++) {
            enrollmentMgr.removeAllStudentsFromCourse(courses.get(i));
            courseMgr.removeCourse(courses.get(i));
        }

        JOptionPane.showMessageDialog(this, "Inactive classes have been removed.");
        updateTable(year);
}//GEN-LAST:event_purgeClassesButtonActionPerformed

    /**
     * Disposes form.
     * @param evt Event Close button is clicked.
     */
    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        dispose();
}//GEN-LAST:event_closeButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable classTable;
    private javax.swing.JButton closeButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelShow1;
    private javax.swing.JLabel labelShow2;
    private javax.swing.JLabel noResultsLabel;
    private javax.swing.JButton purgeClassesButton;
    private javax.swing.JComboBox yearsCombo;
    // End of variables declaration//GEN-END:variables

}
