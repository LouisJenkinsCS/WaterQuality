package weather.clientside.gui.administrator;

import java.util.Vector;
import javax.swing.JOptionPane;
import weather.AdministratorControlSystem;
import weather.clientside.utilities.BarebonesBrowser;
import weather.clientside.utilities.MyDefaultTableModel;
import weather.common.data.WebLink;
import weather.common.data.WebLinkCategories;
import weather.common.dbms.DBMSSystemManager;
import weather.common.dbms.DBMSWebLinkManager;
import weather.common.gui.component.BUDialog;

/**
 * The <code>EditWebLinks</code> class represents an
 * instance of the EditWebLinks window. This allows an administrator 
 * to choose a link to edit. When a link is selected 
 * for editing, the EditWebLinkWindow is shown.
 * @author Ora Merkel (2009)
 * @author Andrew Bennett (2010)
 * @author Bloomsburg University Software Engineering
 * @version Spring 2010
 */
public class DeleteWebLinks extends BUDialog {
    private DBMSSystemManager dbms;
    private DBMSWebLinkManager webLinkManager;
    private Vector<WebLink> links;
    private Vector<WebLinkCategories> webLinkCategories;
    private Vector<WebLinkCategories> left_right;
    private MyDefaultTableModel mod;
    private int rows;
    
    /**
     * Constructor for the Edit Web Link window.
     * @param adminService The GeneralService object that communicates with other 
     *              parts of the program.
     */
    public DeleteWebLinks(AdministratorControlSystem adminService) {
        super(adminService);
        this.dbms = adminService.getGeneralService().getDBMSSystem();
        webLinkManager = dbms.getWebLinkManager();
        setRow();
        mod = new MyDefaultTableModel(rows, 2);
        initComponents();
        updateLinkCategoriesComboBox();
        // Build the drop down dynamically
        webLinkCategories = webLinkManager.obtainAllWebLinkCategories();
        for (WebLinkCategories wc : webLinkCategories) {
            left_right.add(wc);
        }
        links = webLinkManager.getLinksForCategory(categoryComboBox.getSelectedItem().toString());
        this.pack();
        super.postInitialize(false);
    }
    /**
     * Constructor for the Edit Web Link window.
     * @param adminService The GeneralService object that communicates with 
     *                  other parts of the program.
     * @param category Category holding to-be-edited web link.
     * @param weblink Link to be edited.
     */
    public DeleteWebLinks(AdministratorControlSystem adminService, String category, String weblink) {
        super(adminService);
        this.dbms = adminService.getGeneralService().getDBMSSystem();
        webLinkManager = dbms.getWebLinkManager();
        setRow();
        mod = new MyDefaultTableModel(rows, 1);
        initComponents();
        updateLinkCategoriesComboBox();
        
        // Build the drop down dynamically
        webLinkCategories = webLinkManager.obtainAllWebLinkCategories();
        links = webLinkManager.getLinksForCategory(categoryComboBox.getSelectedItem().toString());

        categoryComboBox.setSelectedItem(category);
        webLinksComboBox.setSelectedItem(weblink);
        this.pack();
        super.postInitialize(false);
    }
    /**
     * Sets the local variable <code>row</code> to the current size
     * of the list of links.
     */
    private void setRow()
    {
        webLinkCategories = webLinkManager.obtainAllWebLinkCategories();
        links=webLinkManager.getLinksForCategory(webLinkCategories.get(0).getLinkCategory());
        rows=links.size();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        EditWebLinkRank = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        urlCategoryJLabel = new javax.swing.JLabel();
        categoryComboBox = new javax.swing.JComboBox<String>();
        weblinkJLabel = new javax.swing.JLabel();
        webLinksComboBox = new javax.swing.JComboBox<String>();
        testURLJButton = new javax.swing.JButton();
        urlTextJTextField = new javax.swing.JTextField();
        urlLabel = new javax.swing.JLabel();
        urlNameLabel = new javax.swing.JLabel();
        linkNameJTextField = new javax.swing.JTextField();
        deleteLinkButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();

        setTitle("Weather Viewer - Edit Web Links");

        urlCategoryJLabel.setText("Category:");

        categoryComboBox.setMaximumRowCount(20);
        categoryComboBox.setToolTipText("A list of web link categories available");
        categoryComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryComboBoxActionPerformed(evt);
            }
        });

        weblinkJLabel.setText("Web Link:");

        webLinksComboBox.setMaximumRowCount(18);
        webLinksComboBox.setToolTipText("A list of web links associated with the specified category");
        webLinksComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                webLinksComboBoxActionPerformed(evt);
            }
        });

        testURLJButton.setText("Test URL");
        testURLJButton.setToolTipText("Tests the URL given");
        testURLJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testURLJButtonActionPerformed(evt);
            }
        });

        urlTextJTextField.setToolTipText("The URL associated with the name of this web link");

        urlLabel.setText("URL Link:");

        urlNameLabel.setText("Name:");
        urlNameLabel.setToolTipText("The name given to the URL link");

        linkNameJTextField.setToolTipText("This associate with the name of the link");

        deleteLinkButton.setText("Delete Link");
        deleteLinkButton.setToolTipText("Deletes the selected web link");
        deleteLinkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteLinkButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(weblinkJLabel)
                        .addComponent(urlLabel)
                        .addComponent(urlNameLabel))
                    .addComponent(urlCategoryJLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(categoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(deleteLinkButton))
                    .addComponent(urlTextJTextField)
                    .addComponent(linkNameJTextField)
                    .addComponent(webLinksComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(testURLJButton)
                .addGap(96, 96, 96))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(testURLJButton)
                        .addGap(55, 55, 55))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(categoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(urlCategoryJLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(weblinkJLabel)
                            .addComponent(webLinksComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(urlTextJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(urlLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(linkNameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(urlNameLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteLinkButton)))
                .addContainerGap(143, Short.MAX_VALUE))
        );

        EditWebLinkRank.addTab("Edit Web Links", jPanel1);

        closeButton.setText("Close");
        closeButton.setToolTipText("Closes this window and returns to the main window");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(EditWebLinkRank, javax.swing.GroupLayout.PREFERRED_SIZE, 458, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(closeButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(EditWebLinkRank)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(closeButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This method is called when the "ENTER" key is pressed on the keyboard.
     * The SearchWebLinks window is opened.
     * @param evt The event that the "ENTER" key was pressed.
     */
    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        dispose();
}//GEN-LAST:event_closeButtonActionPerformed

    private void deleteLinkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteLinkButtonActionPerformed
        int ans = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this WebLink?", "Confirm", JOptionPane.YES_NO_OPTION);
        if (ans == JOptionPane.YES_OPTION) {
            for (WebLink wl : webLinkManager.getLinksForCategory(categoryComboBox.getSelectedItem().toString())) {
                if (wl.getURLString().equals(urlTextJTextField.getText())) {
                    webLinkManager.deleteLink(urlTextJTextField.getText());
                    links.remove(webLinksComboBox.getSelectedIndex());
                    webLinksComboBox.removeAllItems();
                    for (int i = 0; i < links.size(); i++) {
                        webLinksComboBox.addItem(links.get(i).getName());
                        if (i == 0) {
                            webLinksComboBox.setSelectedIndex(0);
                        }
                    }
                    return;
                }
            }
            JOptionPane.showMessageDialog(this, "Sorry, this link does not exist in this category.");
        }
}//GEN-LAST:event_deleteLinkButtonActionPerformed

    private void testURLJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testURLJButtonActionPerformed
        BarebonesBrowser.openURL(urlTextJTextField.getText(), this);
}//GEN-LAST:event_testURLJButtonActionPerformed

    private void webLinksComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_webLinksComboBoxActionPerformed
        for (int i = 0; i < links.size(); i++) {
            if (links.get(i).getName().equals(webLinksComboBox.getSelectedItem())) {
                linkNameJTextField.setText(links.get(i).getName());
                urlTextJTextField.setText(links.get(i).getURLString());
            }
        }
}//GEN-LAST:event_webLinksComboBoxActionPerformed

    private void categoryComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryComboBoxActionPerformed
        boolean isEmpty = true;
        webLinksComboBox.removeAllItems();
        links = webLinkManager.getLinksForCategory(categoryComboBox.getSelectedItem().toString());
        for(int i = 0; i < links.size(); i++) {
            webLinksComboBox.addItem(links.get(i).getName());
            isEmpty = false;
        }
        
        if(isEmpty) {
            webLinksComboBox.setEnabled(!isEmpty);
            linkNameJTextField.setText("");
            urlTextJTextField.setText("");
            linkNameJTextField.setEnabled(!isEmpty);
            urlTextJTextField.setEnabled(!isEmpty);
            testURLJButton.setEnabled(!isEmpty);
            deleteLinkButton.setEnabled(!isEmpty);
        }
        
        if(!isEmpty){
            webLinksComboBox.setEnabled(!isEmpty);
            linkNameJTextField.setText(links.get(0).getName());
            urlTextJTextField.setText(links.get(0).getURLString());
            linkNameJTextField.setEnabled(!isEmpty);
            urlTextJTextField.setEnabled(!isEmpty);
            testURLJButton.setEnabled(!isEmpty);
            deleteLinkButton.setEnabled(!isEmpty);
        }
}//GEN-LAST:event_categoryComboBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane EditWebLinkRank;
    private javax.swing.JComboBox<String> categoryComboBox;
    private javax.swing.JButton closeButton;
    private javax.swing.JButton deleteLinkButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField linkNameJTextField;
    private javax.swing.JButton testURLJButton;
    private javax.swing.JLabel urlCategoryJLabel;
    private javax.swing.JLabel urlLabel;
    private javax.swing.JLabel urlNameLabel;
    private javax.swing.JTextField urlTextJTextField;
    private javax.swing.JComboBox<String> webLinksComboBox;
    private javax.swing.JLabel weblinkJLabel;
    // End of variables declaration//GEN-END:variables

    /**
     * Builds the category drop down list dynamically, then sets the index to 0.
     */
    private void updateLinkCategoriesComboBox() {
        webLinkCategories = webLinkManager.obtainAllWebLinkCategories();
        categoryComboBox.removeAllItems();
        left_right=webLinkManager.obtainAllWebLinkCategories();

        for (WebLinkCategories wc : webLinkCategories) {
            categoryComboBox.addItem(wc.getLinkCategory());
        }
        categoryComboBox.setSelectedIndex(0);
    }
}
