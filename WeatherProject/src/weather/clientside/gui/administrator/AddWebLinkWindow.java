package weather.clientside.gui.administrator;

import java.util.Vector;
import javax.swing.JOptionPane;
import weather.AdministratorControlSystem;
import weather.clientside.utilities.BarebonesBrowser;
import weather.common.data.WebLink;
import weather.common.data.WebLinkCategories;
import weather.common.dbms.DBMSSystemManager;
import weather.common.dbms.DBMSWebLinkManager;
import weather.common.gui.component.BUDialog;
/**
 *
 * The <code>AddWebLinkWindow</code> class represents
 * an instance of the Add WebLink window.
 * @author oimerkel (2009)
 * @author Andrew Bennett (2010)
 * @author Bloomsburg University Software Engineering
 * @version Spring 2010
 */
public class AddWebLinkWindow extends BUDialog {
    private DBMSSystemManager dbms;
    final private DBMSWebLinkManager webLinkManager;
    private String originalName;  //used for when the user wants to update the 
                                  //name of the current link.
    private String originalType;
    private boolean originalWebLink; //used to set the type the link was for updating

    /** 
     * Creates a new AddWebLink window
     * @param adminService The client control object that will allow the window 
     *              to interact with the rest of the program.
     */
    public AddWebLinkWindow(AdministratorControlSystem adminService) {
        super(adminService);
        dbms = adminService.getGeneralService().getDBMSSystem();
        webLinkManager = dbms.getWebLinkManager();
        
        // hard coded values very late change
      
        initComponents();
        loadCategoryList();
        getRootPane().setDefaultButton(addLinkButton);
        weather.clientside.utilities.RightClickMenu.addMenuTo(
                new javax.swing.text.JTextComponent[]{urlText, urlName});
        super.postInitialize(false);
    }

    /**
     * Clears the combo box containing the list of categories, and reloads them.
     */
    private void loadCategoryList() {
        final Vector<WebLinkCategories> wLinksCats = webLinkManager.obtainAllWebLinkCategories();

        categoryComboBox.removeAllItems();
        for (WebLinkCategories s: wLinksCats)
            categoryComboBox.addItem(s.getLinkCategory());
    }

     /**
      * Display for adding a new webLink.  This method will allow the user to
      * display the window for adding a new webLink.
      */
     public void displayForAdd() {
         this.clear();
         urlText.setText("http://www.");
     }

     /**
      * This method clears all the text fields in the window. And sets the
      * categoryComboBox to its first value.
      */
     private void clear() {
         urlText.setText("http://www.");
         this.urlName.setText("");
         this.categoryComboBox.setSelectedIndex(0);
     }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        urlTypeGroup = new javax.swing.ButtonGroup();
        linkInformationPanel = new javax.swing.JPanel();
        urlLabel = new javax.swing.JLabel();
        urlText = new javax.swing.JTextField();
        urlTypeLabel = new javax.swing.JLabel();
        urlNameLabel = new javax.swing.JLabel();
        urlName = new javax.swing.JTextField();
        testURL = new javax.swing.JButton();
        categoryComboBox = new javax.swing.JComboBox<String>();
        addLinkInformLabel = new javax.swing.JLabel();
        cancel_Button = new javax.swing.JButton();
        addLinkButton = new javax.swing.JButton();

        setTitle("Weather Viewer - Add Web Links");

        urlLabel.setText("Relate URL:");

        urlText.setToolTipText("The link added to this category");

        urlTypeLabel.setText("Categories:");

        urlNameLabel.setText("Site's Name:");

        urlName.setToolTipText("The site name of the link");

        testURL.setText("Test URL");
        testURL.setToolTipText("Tests a URL to make sure it is working properly");
        testURL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testURLActionPerformed(evt);
            }
        });

        categoryComboBox.setToolTipText("A list of web link categorys in database");

        addLinkInformLabel.setText("Select a Web Link Category to add the new Web Link:");

        cancel_Button.setText("Cancel");
        cancel_Button.setToolTipText("Exits out of the window.");
        cancel_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancel_ButtonActionPerformed(evt);
            }
        });

        addLinkButton.setText("Add Link");
        addLinkButton.setToolTipText("Adds a link to the database");
        addLinkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addLinkButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout linkInformationPanelLayout = new javax.swing.GroupLayout(linkInformationPanel);
        linkInformationPanel.setLayout(linkInformationPanelLayout);
        linkInformationPanelLayout.setHorizontalGroup(
            linkInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(linkInformationPanelLayout.createSequentialGroup()
                .addGroup(linkInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(linkInformationPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(linkInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(urlNameLabel)
                            .addComponent(urlLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(urlTypeLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(linkInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(categoryComboBox, 0, 227, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, linkInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(urlText, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                                .addComponent(urlName)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, linkInformationPanelLayout.createSequentialGroup()
                                    .addComponent(addLinkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(20, 20, 20)
                                    .addComponent(cancel_Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(testURL))
                    .addGroup(linkInformationPanelLayout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(addLinkInformLabel)))
                .addContainerGap())
        );
        linkInformationPanelLayout.setVerticalGroup(
            linkInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(linkInformationPanelLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(addLinkInformLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(linkInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(categoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(urlTypeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(linkInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(urlLabel)
                    .addComponent(urlText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(testURL))
                .addGap(4, 4, 4)
                .addGroup(linkInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(urlName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(urlNameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(linkInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addLinkButton)
                    .addComponent(cancel_Button))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        linkInformationPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {addLinkButton, cancel_Button});

        linkInformationPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {urlName, urlText});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(linkInformationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(linkInformationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     *  This method adds a new link to the specified category which is determined
     *  based off of the selected index of the categoryComboBox. It then clears
     *  the window and waits for more input.
     *  @param evt The event that the addLinkButton was pressed.
     */
    private void addLinkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addLinkButtonActionPerformed
        if(this.check_URL()) {
            webLinkManager.addLinkForCategory(urlName.getText(),
                    urlText.getText(),categoryComboBox.getSelectedItem().toString());
            adminService.repaintWebLink();
            int ans = JOptionPane.showConfirmDialog
                    (this, "WebLink added successfully. Add Another?",
                    "WebLink Successful", JOptionPane.YES_NO_OPTION);
            
            if(ans == JOptionPane.YES_OPTION)
                clear();
            else
                dispose();
        }
            
}//GEN-LAST:event_addLinkButtonActionPerformed

    /**
     * Check the URL's name and address
     * @return False if the URL already exist in the database, return false otherwise.
     */
    private boolean check_URL()
    {
        for(WebLink wl :webLinkManager.getLinksForCategory(categoryComboBox.getSelectedItem().toString()))
        {
            if(urlText.getText().equals(wl.getURLString()))
            {
               JOptionPane.showMessageDialog(this,"Sorry, URL already exist in this category.");
                return false;
            }
            if(urlName.getText().equals(wl.getName()))
            {
              JOptionPane.showMessageDialog(this,"Sorry, this name already exist in this category.");
                return false;
            }
        }
        return true;
    }
        
        /**
         * This method handles what happens when the user hits the cancel button.
         * @param evt The even the cancelButton is clicked.
         */
        private void cancel_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel_ButtonActionPerformed
           clear();
           this.dispose();
        }//GEN-LAST:event_cancel_ButtonActionPerformed
        /**
         * This method tests the current url provided in the urlText box.
         * @param evt The event that sees if the testURLButton was clicked.
         */
        private void testURLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testURLActionPerformed
            BarebonesBrowser.openURL(urlText.getText(), this);
}//GEN-LAST:event_testURLActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addLinkButton;
    private javax.swing.JLabel addLinkInformLabel;
    private javax.swing.JButton cancel_Button;
    private javax.swing.JComboBox<String> categoryComboBox;
    private javax.swing.JPanel linkInformationPanel;
    private javax.swing.JButton testURL;
    private javax.swing.JLabel urlLabel;
    private javax.swing.JTextField urlName;
    private javax.swing.JLabel urlNameLabel;
    private javax.swing.JTextField urlText;
    private javax.swing.ButtonGroup urlTypeGroup;
    private javax.swing.JLabel urlTypeLabel;
    // End of variables declaration//GEN-END:variables

}
