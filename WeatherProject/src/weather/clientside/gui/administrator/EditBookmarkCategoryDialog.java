package weather.clientside.gui.administrator;

import javax.swing.JOptionPane;
import weather.ApplicationControlSystem;
import weather.common.data.bookmark.BookmarkCategory;
import weather.common.data.bookmark.BookmarkType;
import weather.common.data.bookmark.CategoryViewRights;
import weather.common.dbms.DBMSBookmarkCategoriesManager;
import weather.common.dbms.DBMSBookmarkEventTypesManager;
import weather.common.gui.component.BUDialog;

/**
 * The <code>EditBookmarkCategoryDialog</code> class creates
 * a form used for editing bookmark categories.
 * @author Alex Funk
 * @author Justin Enslin
 * @version 2012
 */
public class EditBookmarkCategoryDialog extends BUDialog{
    private DBMSBookmarkCategoriesManager manager;
    private BookmarkCategory category;

    /**
     * Opens a new <code>EditBookmarkCategoryDialog</code> for the given 
     * category.
     * @param appControl The application control system
     * @param category The name of the category
     */
    public EditBookmarkCategoryDialog(ApplicationControlSystem appControl, 
            String category) {
        super(appControl);
        initComponents();
        nameErrorLabel.setVisible(false);
        setTitle("Weather Viewer - Edit Bookmark Category");
        manager = appControl.getDBMSSystem().getBookmarkCategoriesManager();
        this.category = manager.searchByName(category);
        setModalityType(ModalityType.APPLICATION_MODAL);
        initFields();
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent evt) {
                close();
            }
        });
        postInitialize(false);
    }
    
    /**
     * Initializes the form data from the bookmark category data.
     */
    private void initFields(){
        nameTextField.setText(category.getName());
        noteTextPane.setText(category.getNotes());
        boolean isPublic = category.getViewRights() == CategoryViewRights.system_wide;
        everyoneRadioButton.setSelected(isPublic);
        instructorOnlyRadioButton.setSelected(!isPublic);
    }
    
    /**
     * Helper method that displays the <code>leaveWithoutSaving()</code> dialog.
     */
    private void close(){
        if(!changed() || appControl.getGeneralService()
                .leaveWithoutSaving(this))
            dispose();
    }
    
    /**
     * Helper method to determine whether or not something has been changed in 
     * the window.
     * @return True if something was changed, false otherwise.
     */
    private boolean changed(){
        if(category.getNotes() == null)
            category.setNotes("");
        return !(category.getName().equals(nameTextField.getText()) 
                && category.getNotes().equals(noteTextPane.getText()) 
                && category.getViewRights().equals(
                everyoneRadioButton.isSelected() ? 
                CategoryViewRights.system_wide : 
                CategoryViewRights.instructor_only));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        viewRightsButtonGroup = new javax.swing.ButtonGroup();
        nameLabel = new javax.swing.JLabel();
        instructorOnlyRadioButton = new javax.swing.JRadioButton();
        noteLabel = new javax.swing.JLabel();
        everyoneRadioButton = new javax.swing.JRadioButton();
        nameTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        noteTextPane = new javax.swing.JTextPane();
        saveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        maxNameLabel = new javax.swing.JLabel();
        maxNoteLabel = new javax.swing.JLabel();
        rightsLabel = new javax.swing.JLabel();
        nameErrorLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        nameLabel.setText("Category Name:");

        viewRightsButtonGroup.add(instructorOnlyRadioButton);
        instructorOnlyRadioButton.setText("Instructors Only");

        noteLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        noteLabel.setText("Description:");

        viewRightsButtonGroup.add(everyoneRadioButton);
        everyoneRadioButton.setSelected(true);
        everyoneRadioButton.setText("Everyone");

        jScrollPane1.setViewportView(noteTextPane);

        saveButton.setText("Save Changes");
        saveButton.setToolTipText("Create the new Bookmark Category");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Close");
        cancelButton.setToolTipText("Closes the window without saving");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        maxNameLabel.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        maxNameLabel.setText("(max 100 char)");

        maxNoteLabel.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        maxNoteLabel.setText("(max 250 char)");

        rightsLabel.setText("View Rights:");
        rightsLabel.setToolTipText("Allows the ability to select if everyone can view the category or just the instructor");

        nameErrorLabel.setForeground(new java.awt.Color(204, 0, 0));
        nameErrorLabel.setText("Category Must Have A Name");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nameLabel)
                            .addComponent(noteLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)
                            .addComponent(rightsLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nameTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(everyoneRadioButton)
                                .addGap(16, 16, 16)
                                .addComponent(instructorOnlyRadioButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 101, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(saveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nameErrorLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(maxNoteLabel)
                        .addComponent(maxNameLabel))
                    .addComponent(cancelButton))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxNameLabel)
                    .addComponent(nameLabel))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(maxNoteLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(noteLabel)))
                        .addGap(93, 93, 93))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rightsLabel)
                    .addComponent(everyoneRadioButton)
                    .addComponent(instructorOnlyRadioButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(saveButton)
                    .addComponent(nameErrorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Checks to see if the save button was pressed.
     * @TODO Replace error message with appropriate log.
     * @param evt The ActionEvent.
     */
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        boolean success;
        String name;
        
        // Check for errors
        name = nameTextField.getText().trim();
        if (name.isEmpty()) {
            nameErrorLabel.setText("Category Must Have A Name");
            nameErrorLabel.setVisible(true);
            return;
        }
        if (!name.equals(category.getName()) && manager.get(name) != null) {
            nameErrorLabel.setText("Category Name Already In Use");
            nameErrorLabel.setVisible(true);
            return;
        }
        nameErrorLabel.setVisible(false);
        
        // Get text from inputs.
        category.setName(nameTextField.getText().trim());
        category.setNotes(noteTextPane.getText().trim());
        CategoryViewRights rights;
        if (everyoneRadioButton.isSelected()) {
            rights = CategoryViewRights.system_wide;
        } else {
            rights = CategoryViewRights.instructor_only;
        }
        category.setViewRights(rights);
        success = manager.update(category);
        if (success) {
            DBMSBookmarkEventTypesManager typesManager = appControl
                    .getAdministratorControlSystem().getGeneralService()
                    .getDBMSSystem().getBookmarkTypesManager();
            for(BookmarkType type : typesManager.obtainAll(category.getBookmarkCategoryNumber())) {
                type.setViewRights(rights);
                if(!typesManager.update(type)) {
                    success = false;
                }
            }
            if (success) {
                JOptionPane.showMessageDialog(this, "Bookmark Category Updated Successfully",
                        "Bookmark Category Updated",
                        JOptionPane.INFORMATION_MESSAGE);
                this.dispose();
            } else {
                JOptionPane.showMessageDialog(this, "Bookmark Category Could Not Be Updated",
                        "Bookmark Category Not Updated",
                        JOptionPane.INFORMATION_MESSAGE);
                dispose();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Bookmark Category Could Not Be Updated",
                    "Bookmark Category Not Updated", 
                    JOptionPane.INFORMATION_MESSAGE);
            dispose();
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    /**
     * Checks to see if the cancel button was pressed.
     * @param evt The ActionEvent to check to see if the button was pressed.
     */
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        close();
    }//GEN-LAST:event_cancelButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JRadioButton everyoneRadioButton;
    private javax.swing.JRadioButton instructorOnlyRadioButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel maxNameLabel;
    private javax.swing.JLabel maxNoteLabel;
    private javax.swing.JLabel nameErrorLabel;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JLabel noteLabel;
    private javax.swing.JTextPane noteTextPane;
    private javax.swing.JLabel rightsLabel;
    private javax.swing.JButton saveButton;
    private javax.swing.ButtonGroup viewRightsButtonGroup;
    // End of variables declaration//GEN-END:variables

}
