/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package weather.clientside.gui.administrator;

import java.util.HashMap;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import weather.clientside.utilities.MyDefaultTableModel;
import weather.common.gui.component.BUDialog;

/**
 * Window to display what storage folder names are already in use and 
 * the resource that is associated with it.  If no resource is associated,
 * the window will display the fact.
 * 
 * @author Zach Rothweiler
 * @version Spring 2012
 */
public class ResourceFolderWindow extends BUDialog {
    /**
     * The number of columns for the table.
     */
    private final int numColumns=2;  
    /**
     * The index of the column containing the storage folder name.
     */
    private final int storageColumn=0;
    /**
     * The index of the column containing the resource name.
     */
    private final int resourceColumn=1;
    /**
     * The HashMap used to associate the resource folder with the resource.
     */
    private HashMap<String,String> resourceFolderMap;
    
    //Used to allow the table to be sorted
    private TableRowSorter<MyDefaultTableModel> sorter;
    
    /**
     * Creates a <code>ResourceFolderWindow</code> and fills the table.
     * @param resourceFolderMap A <code>HashMap</code> linking the storage folder
     * with its resource.
     * Storage System.
     */
    public ResourceFolderWindow(HashMap<String,String> resourceFolderMap) {
        super();
        this.resourceFolderMap=resourceFolderMap;
        initComponents();
        setTableValues();
        super.postInitialize(false);
    }

    /**
     * Adds the values from <code>resourceFolderMap</code> to the table.
     */
    private void setTableValues()
    {
        MyDefaultTableModel tableModel= new MyDefaultTableModel(0, 0);
        tableModel.setColumnCount(numColumns);
        tableModel.setRowCount(resourceFolderMap.keySet().size());
        resourceFolderTable.setModel(tableModel);
        sorter = new TableRowSorter<MyDefaultTableModel>(tableModel);
        resourceFolderTable.setRowSorter(sorter);
        resourceFolderTable.getColumnModel().getColumn(storageColumn).
                setHeaderValue("Storage System Folder");
        resourceFolderTable.getColumnModel().getColumn(resourceColumn).
                setHeaderValue("Resource");
        
        int i=0;
        for(String key: resourceFolderMap.keySet()){
            tableModel.setValueAt(key, i, storageColumn);
            tableModel.setValueAt(resourceFolderMap.get(key),i++,resourceColumn);
        }
    }
    

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        resourceFolderScrollPane = new javax.swing.JScrollPane();
        resourceFolderTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Weather Viewer - Storage Folder");
        setResizable(false);

        resourceFolderTable.setModel(new DefaultTableModel(resourceFolderMap.size(),numColumns));
        Object[] headers={"Storage System Folder","Resource"};
        ((DefaultTableModel)resourceFolderTable.getModel()).setColumnIdentifiers(headers);
        resourceFolderScrollPane.setViewportView(resourceFolderTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(resourceFolderScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(resourceFolderScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane resourceFolderScrollPane;
    private javax.swing.JTable resourceFolderTable;
    // End of variables declaration//GEN-END:variables
}


