package weather.clientside.gui.client;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.*;
import java.net.URL;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import java.util.zip.ZipOutputStream;
import javax.swing.*;
import weather.ApplicationControlSystem;
import weather.GeneralService;
import weather.common.data.note.NoteFileInstance;
import weather.common.gui.component.BUDialog;
import weather.common.gui.component.IconProperties;
import weather.clientside.utilities.BarebonesBrowser;
import weather.common.utilities.CommonLocalFileManager;
import weather.common.utilities.WeatherLogger;

/**
 * A window that allows the user to view and save web pages to either a local
 * drive or the database.
 * 
 * @author Nate Hartzler (2012)
 * @author Lucas Stine (2012)
 * @author Xiang Li (2014)
 *
 * @version Spring 2012
 */
public class ViewSaveWebPages extends BUDialog implements PropertyChangeListener/*, ActionListener*/{

    private File file;
    private String path;
    private String fileName;
    private GeneralService service;
    private File zipPath;
    private File tempFile;
    boolean local;
    String message;
    private LinkedList<NoteFileInstance> attachedFiles;
    private DefaultListModel<String> fileListModel;
    private int currentFile;
    private int numFiles;
    private ProgressMonitor progressMonitor;
    private Task task;
    
    /**
     * Creates new BUDialog: ViewSaveWebPages.
     */
    public ViewSaveWebPages(ApplicationControlSystem appControl) {
        super(appControl);
        //Schedule a job for the event-dispatching thread:
        //creating and showing this application's GUI.
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }

        });
    
        super.postInitialize(true);
    }

    /**
     * Initializes the graphics window and instance variables.
     */
    private void createAndShowGUI() {
        fileListModel = new DefaultListModel<String>();
        initComponents();
        this.setTitle("Weather Viewer - View and Save Web Pages GUI");
        setIconImage(IconProperties.getTitleBarIconImage());
        doneLabel.setVisible(false);
        viewPageButton.setVisible(false);
        this.service = appControl.getGeneralService();
        local = false;
        attachedFiles = new LinkedList<NoteFileInstance>();
        currentFile = 0;
        numFiles = 0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        websiteBox = new javax.swing.JTextField();
        saveButton = new javax.swing.JButton();
        doneLabel = new javax.swing.JLabel();
        closeButton = new javax.swing.JButton();
        promptLabel = new javax.swing.JLabel();
        saveDatabaseButton = new javax.swing.JButton();
        viewPageButton = new javax.swing.JButton();
        prieviewButton = new javax.swing.JButton();

        websiteBox.setText("http://www.weather.com");
        websiteBox.setMinimumSize(new java.awt.Dimension(122, 20));
        websiteBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                websiteBoxActionPerformed(evt);
            }
        });

        saveButton.setText("Save To Local Drive");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        doneLabel.setText("Webpage has been saved.");

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        promptLabel.setText("Enter the URL of a Webpage:");

        saveDatabaseButton.setText("Save To Database");
        saveDatabaseButton.setEnabled(false);
        saveDatabaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveDatabaseButtonActionPerformed(evt);
            }
        });

        viewPageButton.setText("View The Saved Page");
        viewPageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewPageButtonActionPerformed(evt);
            }
        });

        prieviewButton.setText("Preview URL");
        prieviewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prieviewButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(websiteBox, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(promptLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(saveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveDatabaseButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(prieviewButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(doneLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(viewPageButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(promptLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(websiteBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(saveDatabaseButton)
                    .addComponent(prieviewButton)
                    .addComponent(closeButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(doneLabel)
                    .addComponent(viewPageButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This button action saves the URL found in the text box to the P drive.
     *
     *
     * @param evt The "Save Page" button is pressed.
     */
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        progressMonitor = new ProgressMonitor(ViewSaveWebPages.this,
                                  "Saving Files",
                                  "", 0, 100);
        progressMonitor.setProgress(0);
        task = new Task();
        task.addPropertyChangeListener(this);
        task.execute();
        saveButton.setEnabled(false);
    }//GEN-LAST:event_saveButtonActionPerformed

/**
 * Not used.
 * @param evt 
 */
    private void websiteBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_websiteBoxActionPerformed

    }//GEN-LAST:event_websiteBoxActionPerformed
/**
 * This method gets called when the close button is clicked.
 * @param evt The "Close" button is clicked.
 */
    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    /**
     * This method is called from the "Save to Database" button.  It saves the 
     * website and then sends the zipped file to the database.
     * TODO: Add getWebPageManager this code should work
     * uncomment global variable: private DBMSWebPage webpageMgr;
     * @param evt "Save to Database" button is pressed.
     */
    private void saveDatabaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveDatabaseButtonActionPerformed
        /*

        webpageMgr = service.getDBMSSystem().getWebPageManager();
        if (saveFile()) {
            doneLabel.setVisible(true);
            viewPageButton.setVisible(true);
            local = false;
        }


        byte[] fileData = new byte[(int) zipPath.length()];

        WebPageInstance wpi = new WebPageInstance(
                service.getUser().getUserNumber(), zipPath.getName(), fileData);
        webpageMgr.insertWebPage(service.getUser(), wpi);
        */
    }//GEN-LAST:event_saveDatabaseButtonActionPerformed

    /**
     * When the View Saved Webpage button is pressed, then this method unzips
     * the folder that contains the HTML file as well as all the files needed
     * to display the page offline.
     * 
     * It then opens the URL in the BarebonesBrowser
     * @param evt Button pushed
     */
    private void viewPageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewPageButtonActionPerformed
        try {
                zipPath = new File(path + File.separator + fileName + "files.zip");
                
                File unzip = new File(path+File.separator+fileName + "Unzip");
                unzip(zipPath, unzip);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Unable to save zip files:\n" + e.getMessage());
                WeatherLogger.log(Level.SEVERE, "Error zipping file: " + e.getMessage());
            }
        BarebonesBrowser.openURL(path + File.separator +
                fileName + "Unzip" + File.separator + fileName + ".html", this);

    }//GEN-LAST:event_viewPageButtonActionPerformed

    /**
     * When preview URL button is pressed, this allows the user to view the
     * web page before it is saved.
     * 
     * @param evt button is pressed
     */
    private void prieviewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prieviewButtonActionPerformed
        BarebonesBrowser.openURL(websiteBox.getText().trim(), this);
    }//GEN-LAST:event_prieviewButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JLabel doneLabel;
    private javax.swing.JButton prieviewButton;
    private javax.swing.JLabel promptLabel;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton saveDatabaseButton;
    private javax.swing.JButton viewPageButton;
    private javax.swing.JTextField websiteBox;
    // End of variables declaration//GEN-END:variables

    /**
     * Checks to see if the supplied tag is an image tag
     *
     * @param tag String to test if it is an HTML image tag.
     * @return true if tag starts with <img.
     */
    private boolean imageTag(String tag) {

        return tag.contains("<img ")&&tag.contains("src");
    }

    /**
     * Checks to see if the supplied tag is an script tag
     *
     * @param tag String to test if it is an HTML script tag.
     * @return true if tag starts with <script.
     */
    private boolean scriptTag(String tag) {

        return tag.contains("<script ");
    }

    /**
     * Checks to see if the supplied tag is an link tag
     *
     * @param tag String to test if it is an HTML link tag.
     * @return true if tag starts with <link.
     */
    private boolean linkTag(String tag) {
        return tag.contains("<link ") && (!tag.contains("\"canonical\""));
    }

    /**
     * Checks to see if the supplied tag contains background attribute
     *
     * @param tag String to test if it is an HTML link tag.
     * @return true if tag starts with <link.
     */
    private boolean backgroundTag(String tag) {
        return tag.contains("background=");
    }

    /**
     * Extracts the name of the image from the supplied HTML tag
     *
     * @param tag Image HTML tag from which the name will be extracted.
     * @return Name contained in the HTML tag.
     */
    private String getTagName(String tag, String typeFrom) {
        String testTag = tag.substring(tag.indexOf(typeFrom));
        try {
            if (testTag.indexOf(" ") != -1) {
                testTag = testTag.substring(testTag.indexOf("=") + 2, testTag.indexOf(" ") - 1);
            } else {
                if (testTag.contains("/>")) {
                    testTag = testTag.substring(testTag.indexOf("=") + 2, testTag.indexOf("/>") - 1);
                } else {
                    testTag = testTag.substring(testTag.indexOf("=") + 2, testTag.indexOf(">") - 1);
                }
            }
            if (testTag.contains("\'") || testTag.contains("\"")) {
                return ("");
            }
        } catch (Exception e) {
            testTag = "";
        }

        /*
         * Old Code--New code above handles a wider variety of tags
         * 
         * char divider; if (tag.contains("\"")) { divider = '\"'; } else {
         * divider = '\''; } tag = tag.substring(tag.indexOf("src")); int
         * endOfPath = tag.indexOf(divider, tag.indexOf(divider) + 1); tag =
         * tag.substring(tag.indexOf(divider), endOfPath);
         */
        while (testTag.contains("/")) {
            testTag = testTag.substring(testTag.indexOf('/') + 1);
        }
        //System.out.println(testTag);
        testTag = testTag.replace("?z", "");
        //Prevent Errors unzipping files with long names
        if(testTag.length()>30)
            testTag=testTag.substring(testTag.length()-30);
        return testTag;
    }

    /**
     * Extracts the attributes of the image from the supplied HTML tag
     * 
     * @param tag Image HTML tag from which the name will be extracted.
     * @param type This is the type of location specifier used in the tag sent 
     * in the "tag" parameter.
     * @return Attributes contained in the HTML tag.
     */
    private String getTagAttributes(String tag, String type) {
        String temp, testAttributes = "";

        String testTag = (tag.replace("<", " "));

        while (testTag.contains(" ")) {
            if (testTag.indexOf(" ", testTag.indexOf(" ") + 1) != -1) {
                temp = testTag.substring(0, testTag.indexOf(" ", testTag.indexOf(" ") + 1));
                testTag = testTag.substring(testTag.indexOf(" ", testTag.indexOf(" ") + 1));

            } else {
                if (testTag.contains("/>"))
                    temp = testTag.substring(0, testTag.indexOf("/>"));
                else
                    temp = testTag.substring(0, testTag.indexOf(">"));
                testTag = "";
            }

            if (!(temp.contains("src") || temp.contains("href") || temp.contains("background")
                    || temp.equals(" img") || temp.equals(" link") || temp.equals(" script"))) {
                testAttributes += temp;
            }


        }
        if (testAttributes.length() > 0 && testAttributes.charAt(0) == ' ') {
            testAttributes = testAttributes.substring(1);
        }
        return testAttributes;
        /*
         * OLD CODE did not work for every tag style
         *
         * String attributes = "";
         * if (testAttributes.contains("\'") || testAttributes.contains("\"")) {
         * return (""); } }
         *
         *
         *
         * //gets rid of front of tag and white space tag = tag.replace(" ",
         * ""); tag = tag.substring(tag.indexOf(type) + 4);
         *
         * while (tag.contains("=")) { temp = tag.substring(0,
         * tag.indexOf("=")); char divider; if (tag.contains("\"")) { divider =
         * '\"'; } else { divider = '\''; } int endOfPath = tag.indexOf(divider,
         * tag.indexOf(divider) + 1) + 1; if (!(temp.equals("src") ||
         * temp.equals("href"))) { attributes += " " + temp; attributes +=
         * tag.substring(tag.indexOf("="), endOfPath); } tag =
         * tag.substring(endOfPath); }
         *
         * return attributes;
         */
    }

    /**
     * Extracts the path and name out of the HTML image tag.
     *
     * @param tag HTML image tag
     * @param fromType This is the type of location specifier used in the tag sent 
     * in the "tag" parameter.
     * @return The path/name.ext out of the HTML image tag.
     */
    private String getPathName(String tag, String fromType) {
        String testTag = tag.substring(tag.indexOf(fromType));
        try {
            if (testTag.indexOf(" ") != -1) {
                testTag = testTag.substring(testTag.indexOf("=") + 2, testTag.indexOf(" ") - 1);
            } else {
                if (testTag.contains("/>")) {
                    testTag = testTag.substring(testTag.indexOf("=") + 2, testTag.indexOf("/>") - 1);
                } else {
                    testTag = testTag.substring(testTag.indexOf("=") + 2, testTag.indexOf(">") - 1);
                }
            }
            if (testTag.contains("\'") || testTag.contains("\"")) {
                return ("");
            }
        } catch (Exception e) {
            testTag = "";
        }

        //System.out.println(testTag);
        return testTag;
    }

    /**
     * Extracts the path and name out of the HTML link tag.
     *
     * @param tag HTML image tag.
     * @return The path/name.ext out of the HTML image tag.
     */
    private String getLinkPathName(String tag) {
        String testTag = tag.substring(tag.indexOf("href"));
        if (testTag.indexOf(" ") != -1) {
            testTag = testTag.substring(testTag.indexOf("=") + 2, testTag.indexOf(" ") - 1);
        } else {
            if (testTag.contains("/>"))
                    testTag=testTag.substring(testTag.indexOf("=")+2, testTag.indexOf("/>")-1);
            else
                testTag = testTag.substring(testTag.indexOf("=") + 2, testTag.indexOf(">") - 1);
        }
        if (testTag.contains("\'") || testTag.contains("\"")) {
            return ("");
        }

        //System.out.println(testTag);
        return testTag;
    }

    /**
     *
     * Checks to see if the string contains a web address. If not, add the
     * address given as input.
     *
     * @param get The address of the image.
     * @return The address of the image.
     */
    private String fixImage(String get) {
        String location = websiteBox.getText().trim();
        if (hasDomain(get)) {
            if (get.contains("http")) {
                return get;
            } else {
                return "http:" + get;
            }
        }
        if (get.contains("..")) {
            get = get.replace("..", "");
            if (location.endsWith("/")) {
                location = location.substring(0, location.length() - 1);
            }
            String tempString;
            for (tempString = location; tempString.contains("/"); tempString = tempString.substring(tempString.indexOf("/") + 1))
            ;
            location = location.substring(0, location.indexOf("/" + tempString));
            return location;
        }
        if (!get.contains("/")) {
            get = "/" + get;
        }



        boolean stop = true;
        //trying getting image from current url
        try {
            URL url = new URL(location + get);
            int g = url.openStream().read();
            //System.out.println(location+get);
        } catch (Exception ex) {
            stop = false;
        }
        if (stop) {
            return location + get;
        }
        stop = true;

        String tempUrl = location;
        tempUrl = location.substring(location.indexOf("www."));
        //try getting image from parrent url
        if (tempUrl.contains("/")) {

            tempUrl = "http://" + tempUrl.substring(0, tempUrl.indexOf("/"));
            try {
                URL url = new URL(tempUrl + get);
                int g = url.openStream().read();
                location = tempUrl;
            } catch (Exception ex) {
                stop = false;
            }
            if (stop) {
                return location + get;
            }
        }
        //System.err.println("BROKEN: " + get);
        return "";
    }

    /**
     * Checks to see if there is a domain in the string.
     *
     * @param get The resource location/name.
     * @return True if get contains a domain, otherwise returns false.
     */
    private boolean hasDomain(String get) {
        Vector<String> domains = new Vector<String>();
        domains.addElement(".org");
        domains.addElement(".com");
        domains.addElement(".edu");
        domains.addElement(".gov");
        domains.addElement(".net");
        domains.addElement(".biz");
        domains.addElement(".info");
        domains.addElement(".mil");
        domains.addElement(".de");
        for (int x = 0; x < domains.size(); x++) {
            if (get.contains(domains.get(x))) {
                return true;
            }
        }
        return false;
    }

    /**
     * Creates a zip file to be sent to the database.
     *
     * @param directory The directory that needs to be zipped.
     * @param zip The zip file being used.
     * @throws IOException Throws IOException if there is an error with file
     * input or output.
     */
    public void zipDirectory(File directory, File zip) throws IOException {
        ZipOutputStream zipFile = new ZipOutputStream(new FileOutputStream(zip));
        zip(directory, directory, zipFile);
        zipFile.close();
    }

    /**
     * Places one file into a directory that is zipped.
     *
     * @param directory A file for the directory.
     * @param base Base file that needs zipped.
     * @param zipFile A ZipOutputDteam that has the zipped files location.
     * @throws IOException Throws IOException if there is an error with file
     * input or output.
     */
    private void zip(File directory, File base,
            ZipOutputStream zipFile) throws IOException {
        File[] files = directory.listFiles();
        byte[] buffer = new byte[8192];
        int read = 0;
        for (int i = 0, n = files.length; i < n; i++) {
            if (files[i].isDirectory()) {
                zip(files[i], base, zipFile);
            } else {
                FileInputStream in = new FileInputStream(files[i]);
                ZipEntry entry = new ZipEntry(files[i].getPath().substring(
                        base.getPath().length() + 1));
                zipFile.putNextEntry(entry);
                while (-1 != (read = in.read(buffer))) {
                    zipFile.write(buffer, 0, read);
                }
            in.close();
            }
        }

    }

    /**
     * Un-zips a zipped file and places the files into a temporary location on
     * the local hard drive.
     *
     * @param zip The zipped file.
     * @param extractTo The location the zipped files go once un-zipped.
     * @throws IOException May throw an input/output exception
     */
    public void unzip(File zip, File extractTo) throws IOException {
        ZipFile archive = new ZipFile(zip);
        Enumeration e = archive.entries();
        while (e.hasMoreElements()) {
            ZipEntry entry = (ZipEntry) e.nextElement();
            File files = new File(extractTo, entry.getName());
            if (entry.isDirectory() && !files.exists()) {
                files.mkdirs();
            } else {
                if (!files.getParentFile().exists()) {
                    files.getParentFile().mkdirs();
                }

                InputStream in = archive.getInputStream(entry);
                BufferedOutputStream out = new BufferedOutputStream(
                        new FileOutputStream(files));

                byte[] buffer = new byte[8192];
                int read;

                while (-1 != (read = in.read(buffer))) {
                    out.write(buffer, 0, read);
                }

                in.close();
                out.close();
            }
        }
    }

    /**
     * Displays an error message.
     * @param message the error to be displayed.
     */
    private void displayError(String message) {
        JOptionPane.showMessageDialog(this, message);
    }

    /**
     * Recursively goes through the directory/file given as the parameter and
     * deletes the files.  
     * 
     * @param current This is the current file or directory to delete.
     */
    private void removeTempFiles(File current) {
        File[] listOfFiles = current.listFiles();
        
        for (int i = 0; i < listOfFiles.length; i++) {
            if (listOfFiles[i].isDirectory()) {
                removeTempFiles(listOfFiles[i]);
            }
            listOfFiles[i].delete();
        }
        
        current.delete();
    }

    /**
     * Overrides the propertyChange method used in Task class.
     * 
     * Whenever the property is changed, this method is called.  It changes
     * the message to display what part of the "savePage()" method is at and 
     * shows the progress on the bar.
     * @param evt 
     */
    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if ("progress" == evt.getPropertyName() ) {
            int progress = (Integer) evt.getNewValue();
            progressMonitor.setProgress(progress);
            String newMessage =message+
                String.format(". (%d%%)\n", progress);
            progressMonitor.setNote(newMessage);
            if (/*progressMonitor.isCanceled() ||*/ task.isDone()) {
                
                /*if (progressMonitor.isCanceled()) {
                    saveButton.setEnabled(true);
                } 
                else{*/
                    progressMonitor.setProgress(100);
                    doneLabel.setVisible(true);
                    viewPageButton.setVisible(true);
                    saveButton.setEnabled(true);
                    local=true;
                //}
                
            }
        }
    }
    
    /**
     * Extends the SwingWorker class. This is used to save the webpage the same
     * time that the progress is displayed.
     */
    class Task extends SwingWorker<Void, Void> {

        
        private final int HTMLWEIGHT=10;
        private final int ANYTAGWEIGHT=20;
     
        /**
         * Creates a HTML file and a folder with the images from the web page. It
         * then zips up the HTML file with web page resources.
         *
         * @return Returns true if there are no errors, otherwise false.
         */
        private boolean saveFile() {
            doneLabel.setVisible(false);
            viewPageButton.setVisible(false);
            path = CommonLocalFileManager.getWebLinkDirectory();
            String dirpath = null;
            boolean error = false;
            setProgress(1);
            Vector<String> images = new Vector<String>();
            Vector<String> newImageNames = new Vector<String>();
            int anyTagCount=0;
            try {
                URL u = new URL(websiteBox.getText().trim());

                fileName = u.toString();
                fileName = fileName.replace("http:", "");
                fileName = fileName.replaceAll("[^A-Za-z0-9]", "");

                tempFile = (new File(path + File.separator + fileName + "tempFile"));
                tempFile.mkdir();
                dirpath = path + File.separator + fileName + "tempFile";
                OutputStream htmlFile = new FileOutputStream(dirpath + File.separator + fileName + ".html");

                InputStream in = u.openStream();

                (new File(dirpath + File.separator + fileName + "files")).mkdir();

                int c = in.read();

                String newName = "";
                int currentTag = 0;
                anyTagCount=0;
                boolean htmlWeight=false;
                message="Downloading .html file";
                while (c > 0) {
                    
                    if (c == '<') {
                        int test=anyTagCount/ANYTAGWEIGHT+1;
                        //check to see if it has reached HTMLWEIGHT precent
                        if(test>HTMLWEIGHT){
                            htmlWeight=true;
                            test=HTMLWEIGHT;
                        }
                        //wait at top htmlWeight precent
                        if(!htmlWeight)
                            setProgress(test);
                        
                        String tag = "";
                        while (c != '>') {
                            tag += (char) c;
                            c = in.read();
                        }
                        tag += '>';
                        

                        if (imageTag(tag)) {
                            currentTag++;
                            //System.out.println(currentTag+tag);
                            images.addElement(getPathName(tag, "src"));
                            newName = "<img src=\"" + fileName + "files" + File.separator + getTagName(tag, "src").replaceAll("[^A-Za-z0-9.]", "-") + "\" " + getTagAttributes(tag, "img") + ">";
                            htmlFile.write(newName.getBytes());
                            /*
                             * If the image could not be parsed correctly then
                             * just add ""
                             */
                            if (!getTagName(tag, "src").equals("")) {
                                newImageNames.addElement(dirpath + File.separator + fileName + "files" + File.separator + getTagName(tag, "src").replaceAll("[^A-Za-z0-9.]", "-"));
                            } else {
                                newImageNames.addElement("");
                            }
                            //System.out.println(newName + ":"+newImageNames.get(currentTag-1)+"\n");
                        } else if (scriptTag(tag) && tag.contains("src")) {
                            currentTag++;
                            //System.out.println(currentTag+tag);
                            images.addElement(getPathName(tag, "src"));
                            newName = "<script src=\"" + fileName + "files" + File.separator + getTagName(tag, "src").replaceAll("[^A-Za-z0-9.]", "-") + "\" " + getTagAttributes(tag, "script") + ">";
                            htmlFile.write(newName.getBytes());
                            /*
                             * If the image could not be parsed correctly then
                             * just add ""
                             */
                            if (!getTagName(tag, "src").equals("")) {
                                newImageNames.addElement(dirpath + File.separator + fileName + "files" + File.separator + getTagName(tag, "src").replaceAll("[^A-Za-z0-9.]", "-"));
                            } else {
                                newImageNames.addElement("");
                            }
                            //System.out.println(newName + ":"+newImageNames.get(currentTag-1)+"\n");
                        } else if (linkTag(tag) && tag.contains("href")) {
                            currentTag++;
                            //System.out.println(currentTag+tag);
                            images.addElement(getPathName(tag, "href"));
                            newName = "<link href=\"" + fileName + "files" + File.separator + getTagName(tag, "href").replaceAll("[^A-Za-z0-9.]", "-") + "\" " + getTagAttributes(tag, "link") + ">";
                            htmlFile.write(newName.getBytes());
                            /*
                             * If the image could not be parsed correctly then
                             * just add ""
                             */
                            if (!getTagName(tag, "href").equals("")) {
                                newImageNames.addElement(dirpath + File.separator + fileName + "files" + File.separator + getTagName(tag, "href").replaceAll("[^A-Za-z0-9.]", "-"));
                            } else {
                                newImageNames.addElement("");
                            }
                            //System.out.println(newName + ":"+newImageNames.get(currentTag-1)+"\n");
                        } else if (backgroundTag(tag)) {
                            currentTag++;
                            //System.out.println(currentTag+tag);
                            images.addElement(getPathName(tag, "background"));
                            newName = "<" + getTagAttributes(tag, "<") + " background=\"" + fileName + "files" + File.separator + getTagName(tag, "background").replaceAll("[^A-Za-z0-9.]", "-") + " >";
                            htmlFile.write(newName.getBytes());
                            if (!getTagName(tag, "background").equals("")) {
                                newImageNames.addElement(dirpath + File.separator + fileName + "files" + File.separator + getTagName(tag, "background").replaceAll("[^A-Za-z0-9.]", "-"));
                            } else {
                                newImageNames.addElement("");
                            }
                        } else {
                            htmlFile.write(tag.getBytes());
                            
                        }
                        anyTagCount++;
                    } else {
                        htmlFile.write(c);
                        
                    }

                    c = in.read();

                }

                in.close();
                htmlFile.flush();
                htmlFile.close();
            } catch (Exception e) {
                displayError("Unable to save webpage.");

                WeatherLogger.log(Level.SEVERE, "Error saving webpage: " + e.getMessage());
                error = true;
            }
            numFiles = images.size();
            message="Downloading helper files";
            for (int i = 0; i < images.size() && !error; i++) {
                currentFile =i;
                int test=HTMLWEIGHT+ (int)((((float) currentFile) /(numFiles-1))*(101.0));
                //System.out.println(test);
                if(test>HTMLWEIGHT&&test<98)
                    setProgress(test);
                try {
                    
                    //Add http:// if not already there
                    images.set(i, fixImage(images.get(i)));

                    //System.out.println("Start: " + images.get(i));

                    //If image could not be fixed then skip
                    if (images.get(i).equals("") || (newImageNames.get(i).equals(""))) {
                        //System.err.println("Trouble with (" + i + ") " + newImageNames.get(i) + ": " + images.get(i));
                    } else {
                        URL url = new URL(images.get(i));
                        InputStream inImage = new BufferedInputStream(url.openStream());
                        ByteArrayOutputStream out = new ByteArrayOutputStream();
                        byte[] buf = new byte[1024];
                        int n = 0;
                        while (-1 != (n = inImage.read(buf))) {
                            out.write(buf, 0, n);
                        }

                        byte[] response = out.toByteArray();

                        FileOutputStream fileImage = new FileOutputStream(newImageNames.get(i));
                        fileImage.write(response);

                        // System.out.println("finish" + newImageNames.get(i));

                        fileImage.close();
                        out.close();
                        inImage.close();
                    }

                } catch (Exception e) {
                    displayError("Unable to save image\n." + newImageNames.get(i));
                    WeatherLogger.log(Level.SEVERE, "Error saving web image: " + e.getMessage());
                }
            }
            if (!error) {
                try {
                    message = "Zipping files";
                    setProgress(98);
                    File toZip = new File(dirpath);
                    zipPath = new File(path + File.separator + fileName + "files.zip");

                    zipDirectory(toZip, zipPath);
                    message = "Deleting temporary folder";
                    setProgress(99);
                    removeTempFiles(tempFile);
                    message = "Done";
                } catch (Exception e) {
                    displayError("Unable to save zip files:\n" );
                    WeatherLogger.log(Level.SEVERE, "Error zipping file: " + e.getMessage());
                    error = true;
                }
            }
            return !error;
        }

        /**
         * Defines what the program will do in the background while the progress
         * bar is displayed.  It saves the webpage and then sets the "finished"
         * message to visible and displays the "View Saved Page" button
         * 
         */
        @Override
        public Void doInBackground() {
            saveFile();
            /*if(!progressMonitor.isCanceled()){*/
                doneLabel.setVisible(true);
                viewPageButton.setVisible(true);
            //}
            saveButton.setEnabled(true);
            return null;
        }

        /**
         * When the webpage is done saving it re-enables the "Save Page" button
         * and sets the progress to 100.
         */
        @Override
        public void done() {
            saveButton.setEnabled(true);
            progressMonitor.setProgress(100);
            super.done();
        }
    }
}
