package weather.clientside.gui.client;

import java.awt.Dimension;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import javax.swing.JPanel;
import weather.ApplicationControlSystem;
import weather.clientside.manager.LessonEntryMoviePanelManager;
import weather.clientside.manager.MovieController;
import weather.common.data.lesson.*;
import weather.common.data.resource.WeatherResourceType;
import weather.common.gui.component.BUDialog;
import weather.common.utilities.Debug;

/**
 * Displays Lessons in a grid with a movieController for BookmarkEvent playback.
 *
 * TODO: Make resizable.
 *
 * @author Justin Gamble - 2012
 */
public class LessonDisplay extends BUDialog {

    /**
     * Movie Controller for the LessonDisplay
     */
    private final MovieController movieController;
    /**
     * Lesson that is being displayed.
     */
    private final Lesson lesson;
    /**
     * The LessonEntries that are events.
     */
    private ArrayList<LessonEntryMoviePanelManager> lessonMovies;
    /**
     * The LessonEntries that are bookmarks.
     */
    private Collection<LessonEntry> lessonBookmarks;
    /**
     * The collection of display panels in order.
     */
    private Collection<JPanel> lessonPanels;
    /**
     * The application control system for this display.
     */
    private ApplicationControlSystem appControl;

    /**
     * Creates new form LessonDisplay
     */
    public LessonDisplay(Lesson l, ApplicationControlSystem acs) {
        appControl = acs;
        lesson = l;
        l.populateLessonEntryCollection(acs);
        if (l.getLessonCollection() == null) {
            Debug.println("The lesson collection is null.");
        }

        Collections.sort((ArrayList<LessonEntry>) l.getLessonCollection());

        movieController = new MovieController(acs, false);
        lessonMovies = new ArrayList<LessonEntryMoviePanelManager>();

        initComponents();
        generatePanels();
        associateMovies();

        this.setTitle("Weather Viewer - Lesson Display");
        lessonLabel.setText(lesson.getName());
        Dimension dim = controlPanel.getSize();
        controlPanel.add(movieController.getControlPanel(dim.width, dim.height));
        controlPanel.setSize(movieController.getWidth(), movieController.getWidth());
        //This is needed because of the JDialog modality we are using, and setReady for avi HAS to be called after the videoSurfaces are showing.
        //also we need to cleanup the videos when the window closes
        this.addWindowListener(new WindowListener() {

            @Override
            public void windowOpened(WindowEvent e) {
                //movieController.setReady();
            }

            @Override
            public void windowClosing(WindowEvent e) {
                Debug.println("lesson window closing");
            }

            @Override
            public void windowClosed(WindowEvent e) {
                if (lessonMovies.size() > 0) {
                    movieController.cleanup();
                }
            }

            @Override
            public void windowIconified(WindowEvent e) {

            }

            @Override
            public void windowDeiconified(WindowEvent e) {

            }

            @Override
            public void windowActivated(WindowEvent e) {
                if (lessonMovies.size() > 0) {
                    movieController.setReady();
                }
            }

            @Override
            public void windowDeactivated(WindowEvent e) {

            }

        });

        super.postInitialize(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        displayPanel = new javax.swing.JPanel();
        lessonLabel = new java.awt.Label();
        jPanel2 = new javax.swing.JPanel();
        controlPanel = new javax.swing.JPanel();

        setTitle("LessonDisplay");
        setResizable(false);

        displayPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        displayPanel.setLayout(new java.awt.GridLayout(1, 0));

        lessonLabel.setAlignment(java.awt.Label.CENTER);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        controlPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        controlPanel.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        controlPanel.setMinimumSize(new java.awt.Dimension(4, 73));
        controlPanel.setPreferredSize(new java.awt.Dimension(700, 52));
        controlPanel.setLayout(new java.awt.BorderLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 670;
        gridBagConstraints.ipady = 40;
        gridBagConstraints.insets = new java.awt.Insets(11, 127, 11, 121);
        jPanel2.add(controlPanel, gridBagConstraints);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lessonLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 710, Short.MAX_VALUE)
                    .addComponent(displayPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lessonLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(displayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel controlPanel;
    private javax.swing.JPanel displayPanel;
    private javax.swing.JPanel jPanel2;
    private java.awt.Label lessonLabel;
    // End of variables declaration//GEN-END:variables

    /**
     * Generates the panels and adds them to the display Panel.
     */
    private void generatePanels() {
        ArrayList<LessonEntry> holder = (ArrayList<LessonEntry>) lesson.getLessonCollection();
        //Set number of columns depending on how many entries in the Lesson.
        if (holder.size() < 6) {
            java.awt.GridLayout gl = new java.awt.GridLayout(2, 2, 0, 0);

            displayPanel.setLayout(gl);
            //displayPanel.setSize((LessonEntryImagePanel.WIDTH-50)*2,LessonEntryImagePanel.HEIGHT*2);
        } else {

            displayPanel.setLayout(new java.awt.GridLayout(2, 3));
        }
        for (LessonEntry le : holder) {
            if (!le.checkBookmarkIsNull(appControl)) { //make sure there is something to load.
                JPanel tempPanel;
                le.setBookmark(appControl);
                Debug.println("Doing something with a lessonEntry");
                if (le.isImageEntry()) {
                    tempPanel = new LessonEntryImagePanel(le);
                } else {
                    //if station just display image from bookmark
                    if (le.getBookmarkResourceID().equals(WeatherResourceType.WeatherStation)) {
                        tempPanel = new LessonEntryImagePanel(le);
                    } else {
                        //do movie panel generation
                        tempPanel = new LessonEntryMoviePanelManager(movieController, le);
                        lessonMovies.add((LessonEntryMoviePanelManager) tempPanel);

                    }
                }
                //Add panels to displayPanel
                displayPanel.add(tempPanel);
            }
            this.pack();
            this.revalidate();
        }
    }

    /**
     * Associates all the event movies with the movie controller, the shortest
     * movie has to be added first.
     */
    private void associateMovies() {
        LessonEntryMoviePanelManager shortest = null;
        for (LessonEntryMoviePanelManager mpm : lessonMovies) {
            displayPanel.remove(mpm);
            mpm.updateMovie();
            displayPanel.add(mpm.getPanel(mpm.getWidth(), mpm.getHeight()), mpm.getDisplayPosition());

            if (shortest == null) {
                shortest = mpm;
            } else {
                if (shortest.getMovieDurationInMillis() > mpm.getMovieDurationInMillis()) {
                    mpm = shortest;
                }
            }
        }
        if (shortest != null) {

            movieController.registerMoviePanelManager(shortest);
            for (LessonEntryMoviePanelManager mpm : lessonMovies) {
                if (mpm == shortest) {
                    continue;
                } else {
                    movieController.registerMoviePanelManager(mpm);
                }

            }

        } else {
            Debug.println("No movies to control.");
        }

    }
}
