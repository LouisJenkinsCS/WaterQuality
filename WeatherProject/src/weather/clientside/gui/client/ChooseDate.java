package weather.clientside.gui.client;

import java.sql.Date;
import java.util.Calendar;
import java.util.GregorianCalendar;
import weather.common.gui.component.BUDialog;

/**
 * This is a date chooser that can be called from any window type. The date can
 * be accessed using the getSelectedDate. Since it is a dialog box the date
 * won't be accessible until the window is closed, so there shouldn't be any
 * issues. If the window is closed, if the date is accessed a null value will be
 * returned.
 * 
 * Structure take from NewNoteDateChooser written by Joe Van Lente (2010)
 *
 * @author Joshua Whiteman
 *
 */
public class ChooseDate extends BUDialog {
    private Date selectedDate;
    private boolean returnEnDOfDay;
    
    /**
     * Explicit constructor.
     * @param date The date to be shown when opened.
     * @param returnEnDOfDay True if the last millisecond of the day should be
     * returned, false if the selected time should be returned.
     */
    public ChooseDate(java.util.Date date, boolean returnEnDOfDay) {
        super();
        initComponents();
        calendar.setTime(date);
        calendar.setComboBoxVisible(!returnEnDOfDay);
        this.returnEnDOfDay = returnEnDOfDay;
        selectedDate = null;
        getRootPane().setDefaultButton(okButton);
        super.postInitialize(false);
    }
    
    public Date getSelectedDate() {
        return selectedDate;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        calendar = new weather.common.utilities.BUCalendar();
        buttonPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();

        setTitle("Select New Date");
        setResizable(false);

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(okButton);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(closeButton);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(buttonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(calendar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(calendar, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Handles action event for the OK button. Starts a new daily entry for the date chosen and updates the
     * resource range in selected components.
     * @param evt The action event.
     */
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        Calendar c = new GregorianCalendar();
        c.setTime(calendar.getDate());
        
        //Set to end of day if wanted.
        if (returnEnDOfDay) {
            c.set(Calendar.HOUR_OF_DAY, 23);
            c.set(Calendar.MINUTE, 59);
            c.set(Calendar.SECOND, 59);
            c.set(Calendar.MILLISECOND, 999);
        }
        
        Date date = new Date(c.getTimeInMillis());
        this.selectedDate = date;
        dispose();
    }//GEN-LAST:event_okButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private weather.common.utilities.BUCalendar calendar;
    private javax.swing.JButton closeButton;
    private javax.swing.JButton okButton;
    // End of variables declaration//GEN-END:variables

}
