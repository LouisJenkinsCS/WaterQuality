package weather.clientside.gui.client;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.TimeZone;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import weather.clientside.manager.NotesAndDiaryPanelManager;
import weather.clientside.utilities.ListCellDateRenderer;
import weather.common.gui.component.BUDialog;
import weather.common.utilities.Debug;
import weather.common.utilities.PropertyManager;


/**
 * This class allows a calling NotesAndDiaryPanelManager to set itself to one of
 * a provided list of dates.
 *
 * @author Alinson Antony(2012).
 * @version 2012
 */
public class ExistingNoteDateChooser extends BUDialog {
    private NotesAndDiaryPanelManager notesAndDiaryWindow;
    private String dateFormatString = PropertyManager
            .getGeneralProperty("dateFormatString");
    private ListCellDateRenderer renderer;
    private SimpleDateFormat df;
    private ArrayList<Date> dateList;
    DefaultListModel<String> diaryModel;

    /**
     * Creates new form ExistingNoteDateChooser.
     * @param notesAndDiaryWindow The calling manager.
     * @param dateList A list of the dates that can be chosen.
     * @param timeZone The <code>TimeZone</code> of the panel.  All dates are
     * maintained at midnight in this time zone.
     */
    public ExistingNoteDateChooser(NotesAndDiaryPanelManager notesAndDiaryWindow,
            ArrayList<Date> dateList, TimeZone timeZone) {
        super();
        
        //Setup formatters
        renderer = new ListCellDateRenderer(dateFormatString);
        renderer.setTimeZone(timeZone);
        df = new SimpleDateFormat(dateFormatString);
        df.setTimeZone(timeZone);
        
        initComponents();
        cmbStartDate.setRenderer(renderer);
        cmbEndDate.setRenderer(renderer);

        this.dateList = dateList;
        this.fillDateComboBoxes();
        this.notesAndDiaryWindow = notesAndDiaryWindow;
      
        diaryModel = new DefaultListModel<>();
        lstViewEntries.setModel(diaryModel);
        this.setSize(325, 275);
        this.setResizable(false);
        super.postInitialize(false);
    }

    /**
     * Fills the combo boxes with all dates of existing entries which are used
     * for selecting a date range.
     */
    private void fillDateComboBoxes() {
        cmbStartDate.removeAllItems();
        cmbEndDate.removeAllItems();
        for (Date d : dateList) {
            cmbStartDate.addItem(d);
            cmbEndDate.addItem(d);
        }
        setDefaultComboBoxSelections();
    }

    /**
     * Ensures that the start date is equal to or earlier than the end date.
     *
     * @return True if the dates are properly chosen.
     */
    private boolean checkDateRange() {
        Date start = (Date) cmbStartDate.getSelectedItem();
        Date end = (Date) cmbEndDate.getSelectedItem();
        if (!start.equals(end) && !start.before(end)) {
            JOptionPane.showMessageDialog(this, 
                "Start date must be the same as or earlier than the end date", 
                "Invalid Date Selection", JOptionPane.ERROR_MESSAGE);
            setDefaultComboBoxSelections();
            return false;
        }
        return true;
    }

    /**
     * Selects the default values for the combo boxes, which is the first date
     * for the start date and the last one for the end date.
     */
    private void setDefaultComboBoxSelections() {
        cmbStartDate.setSelectedIndex(0);
        cmbEndDate.setSelectedIndex(cmbEndDate.getItemCount() - 1);
    }

    /**
    * This is the result of the search for  DIALY_DIARY_MODE.Result will
    * display in this window itself.
    */
    private void searchResult() {
        diaryModel.removeAllElements();
        Date startDate = (Date) cmbStartDate.getSelectedItem();
        Date endDate = (Date) cmbEndDate.getSelectedItem();

        if (startDate.after(endDate)) {
            return;
        }
        for (int i = 0; i < dateList.size(); i++) {
            Date entryDate = dateList.get(i);
            if ((entryDate.after(startDate) && entryDate.before(endDate))
                    || entryDate.equals(startDate) || entryDate.equals(endDate)) {
                diaryModel.addElement(df.format(entryDate));
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        cmbEndDate = new javax.swing.JComboBox<Date>();
        cmbStartDate = new javax.swing.JComboBox<Date>();
        searchFrom = new javax.swing.JLabel();
        searchTo = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstViewEntries = new javax.swing.JList<String>();

        setTitle("Select Retrieval Date");
        setAutoRequestFocus(false);
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setFocusTraversalPolicyProvider(true);
        setMinimumSize(new java.awt.Dimension(325, 257));

        cmbEndDate.setToolTipText("End Date");

        cmbStartDate.setToolTipText("Start Date");

        searchFrom.setText("From");

        searchTo.setText("To");

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(searchFrom)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(searchTo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCancel)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchTo)
                    .addComponent(searchFrom))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearch)
                    .addComponent(btnCancel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lstViewEntries.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstViewEntriesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(lstViewEntries);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 19, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(104, 104, 104)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(45, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        if (checkDateRange()) {
            searchResult();
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void lstViewEntriesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstViewEntriesMouseClicked
        String stringToParse = (String)lstViewEntries.getSelectedValue();
        try {
            notesAndDiaryWindow.updateSelectedDate(df.parse((String)stringToParse));
        } catch (ParseException ex) {
            Debug.println("Unable to parse #" + stringToParse + "#");
        }
        dispose();
    }//GEN-LAST:event_lstViewEntriesMouseClicked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<Date> cmbEndDate;
    private javax.swing.JComboBox<Date> cmbStartDate;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> lstViewEntries;
    private javax.swing.JLabel searchFrom;
    private javax.swing.JLabel searchTo;
    // End of variables declaration//GEN-END:variables
}
