package weather.clientside.gui.client;

import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import weather.ApplicationControlSystem;
import weather.common.data.User;
import weather.common.dbms.DBMSSystemManager;
import weather.common.gui.component.BUDialog;
import weather.common.utilities.Emailer;
import weather.common.utilities.WeatherException;

/**
 * The Contact Administrator window allows the user to email the administrator
 * with any problems or suggestions.
 *
 * @author Andrew Bennett (2010)
 */
public class ContactAdminWindow extends BUDialog {

    private DBMSSystemManager system;
    private User currUser;
    private Vector<weather.common.data.User> userList;
    final Vector<User> admins = new Vector<User>();

    /**
     * Creates a new contactAdminWindow with specific frame and modal type.
     * @param parent The parent frame.
     * @param modal Specifies whether dialog blocks user input to other top-level
     *     windows when shown.
     */
    public ContactAdminWindow(java.awt.Frame parent, boolean modal) {
        super();
        initComponents();
        weather.clientside.utilities.RightClickMenu.addMenuTo(
                new javax.swing.text.JTextComponent[]{problemArea, suggestionsArea});
        super.postInitialize(true);
    }

    /**
     * Creates a new contactAdminWindow using a user defined Application
     * control system.
     * @param appControl The ApplicationControlSystem.
     */
    ContactAdminWindow(ApplicationControlSystem appControl) {
        super(appControl);
        this.currUser = appControl.getGeneralService().getUser();
        initComponents();
        weather.clientside.utilities.RightClickMenu.addMenuTo(
                new javax.swing.text.JTextComponent[]{problemArea, suggestionsArea});
        super.postInitialize(true);
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        problemDesInformLabel = new javax.swing.JLabel();
        problemAreaPane = new javax.swing.JScrollPane();
        problemArea = new javax.swing.JTextArea();
        suggestionLabel = new javax.swing.JLabel();
        suggestionAreaPane = new javax.swing.JScrollPane();
        suggestionsArea = new javax.swing.JTextArea();
        submitButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        customerInformLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Weather Viewer - Contact Administrator");
        setName("contectAdministorDialog"); // NOI18N

        problemDesInformLabel.setText("Please give a description of the problem:");

        problemArea.setColumns(20);
        problemArea.setRows(5);
        problemAreaPane.setViewportView(problemArea);

        suggestionLabel.setText("Suggestions:");

        suggestionsArea.setColumns(20);
        suggestionsArea.setRows(5);
        suggestionAreaPane.setViewportView(suggestionsArea);

        submitButton.setText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        customerInformLabel.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        customerInformLabel.setText("The information provided is emailed to the administrator.  Please allow up to a few days for a reply.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(problemAreaPane, javax.swing.GroupLayout.DEFAULT_SIZE, 609, Short.MAX_VALUE)
                    .addComponent(suggestionAreaPane, javax.swing.GroupLayout.DEFAULT_SIZE, 609, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(customerInformLabel)
                        .addGap(24, 24, 24)
                        .addComponent(submitButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cancelButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(problemDesInformLabel)
                            .addComponent(suggestionLabel))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(problemDesInformLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(problemAreaPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(suggestionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(suggestionAreaPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(customerInformLabel)
                    .addComponent(submitButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * The event that the cancel button was selected. Just closes the window
     * without sending anything.
     * @param evt
     */
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * The event that the submit button was selected. Grabs the entered text
     * from the fields supplied and Emails them to the administrator.
     * @param evt
     */
    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        system = this.appControl.getGeneralService().getDBMSSystem();
        userList = system.getUserManager().obtainAllUsers();
        String message = "";

        if(this.problemArea.getText().isEmpty() && this.suggestionsArea.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(this, "No email sent.");
            return;
        }
            
        if(!this.problemArea.getText().isEmpty())
            message = message + "Problems:\n" + this.problemArea.getText();
        if(!this.suggestionsArea.getText().isEmpty())
            message = message + "\n\nSuggestions:\n" + this.suggestionsArea.getText();

        try {
            Emailer.emailAdmin(message, "Problems/Suggestions from " + currUser.
                    getFirstName() + " " + currUser.getLastName() + ".");
        } catch (WeatherException ex) {
            Logger.getLogger(ContactAdminWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

        JOptionPane.showMessageDialog(this, "Email sent successfully to the administrator.");
        this.dispose();
    }//GEN-LAST:event_submitButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel customerInformLabel;
    private javax.swing.JTextArea problemArea;
    private javax.swing.JScrollPane problemAreaPane;
    private javax.swing.JLabel problemDesInformLabel;
    private javax.swing.JButton submitButton;
    private javax.swing.JScrollPane suggestionAreaPane;
    private javax.swing.JLabel suggestionLabel;
    private javax.swing.JTextArea suggestionsArea;
    // End of variables declaration//GEN-END:variables

}
