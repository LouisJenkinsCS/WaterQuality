package weather.clientside.gui.client;

import weather.ApplicationControlSystem;
import weather.common.gui.component.BUDialog;
import weather.common.gui.component.IconProperties;

/**
 * TODO: WINDOW UNDER PROGRESS
 * @author Alex Funk
 * @version 2011
 */
public class StudentSearchDialog extends BUDialog {

    public static enum INSTANCE_TYPE{BOOKMARK, EVENT};
    public static enum SEARCH_TYPE{DATE_TIME, CATEGORY, NAME};
    /**
     * Creates a new search for a student or guest type where the search type
     * is specified.
     * @param clientControl The ApplicationControlSystem.
     * @param instanceType The type of instance either bookmark or event.
     * @param searchType Declare how the user is going to search for a bookmark
     *                   or event.
     */
    public StudentSearchDialog(ApplicationControlSystem clientControl,
            INSTANCE_TYPE instanceType, SEARCH_TYPE searchType, String title) {
        super(clientControl);
        initComponents();
        this.setTitle(title);
        setIconImage(IconProperties.getTitleBarIconImage());
        if (instanceType == INSTANCE_TYPE.BOOKMARK &&
                searchType == SEARCH_TYPE.CATEGORY){
            //TODO: correct panel to lead to bookmark
        }
        else if(instanceType == INSTANCE_TYPE.EVENT &&
                searchType == SEARCH_TYPE.CATEGORY){
            //TODO: correct panel
        }
        else if(instanceType == INSTANCE_TYPE.BOOKMARK
                &&
                searchType == SEARCH_TYPE.DATE_TIME){
            //TODO: correct panel to lead to bookmark
        }
        else if(instanceType == INSTANCE_TYPE.EVENT &&
                searchType == SEARCH_TYPE.DATE_TIME){
            //TODO: correct panel
        }
        if (instanceType == INSTANCE_TYPE.BOOKMARK &&
                searchType == SEARCH_TYPE.NAME){
            //TODO: correct panel to lead to bookmark
        }
        else if(instanceType == INSTANCE_TYPE.EVENT &&
                searchType == SEARCH_TYPE.NAME){
            //TODO: correct panel
        }

        super.postInitialize(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        underDevelopmentPanel1 = new weather.clientside.gui.administrator.UnderDevelopmentPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(underDevelopmentPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(underDevelopmentPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private weather.clientside.gui.administrator.UnderDevelopmentPanel underDevelopmentPanel1;
    // End of variables declaration//GEN-END:variables

}
