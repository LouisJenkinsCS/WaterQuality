package weather.clientside.gui.client;

import java.sql.Date;
import java.util.TimeZone;
import javax.swing.JOptionPane;
import weather.clientside.manager.NotesAndDiaryPanelManager;
import weather.common.gui.component.BUDialog;
import weather.common.utilities.BUCalendar;
import weather.common.utilities.ResourceTimeManager;

/**
 * This is a date chooser for the NotesAndDiaryPanelManager which which allows
 * new dates to be chosen.  It can also retrieve existing data if a date with
 * data is selected.
 *
 * @author Joe Van Lente (2010)
 *
 * @version Spring 2010
 */
public class NewNoteDateChooser extends BUDialog {
    NotesAndDiaryPanelManager ndMgr;

    /**
     * Explicit constructor.
     * 
     * @param ndMgr The notes and diary panel manager.
     * @param date The date to be shown when opened.
     * @param timeZone The <code>TimeZone</code> of the panel.  All dates are
     * maintained at midnight in this time zone.
     */
    public NewNoteDateChooser(NotesAndDiaryPanelManager ndMgr, 
            java.util.Date date, TimeZone timeZone) {
        super();
        this.ndMgr = ndMgr;
        initComponents();
        calendar.setTimeZone(timeZone);
        java.util.Date dateAtMidnight = ResourceTimeManager.
                getStartOfDayDateFromMilliseconds(date.getTime(), timeZone);
        calendar.setTime(dateAtMidnight);
        getRootPane().setDefaultButton(okButton);
        super.postInitialize(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        calendar = new BUCalendar(true, true, false);
        buttonPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();

        setTitle("Select New Date");
        setResizable(false);

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(okButton);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(closeButton);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(buttonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(calendar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(calendar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Handles action event for the OK button. Starts a new daily entry for the date chosen and updates the
     * resource range in selected components.
     * @param evt The action event.
     */
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        Date date = new Date(calendar.getDate().getTime());
        Date now = new Date(System.currentTimeMillis());

        // If the date they chose is after the current date, don't allow it to
        // be updated.
        if (date.after(now)) {
            JOptionPane.showMessageDialog(this, "You may only choose a date " +
                    "that is before or on the current date.");
            return;
        }

        ndMgr.updateSelectedDate(date);
        dispose();
    }//GEN-LAST:event_okButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private weather.common.utilities.BUCalendar calendar;
    private javax.swing.JButton closeButton;
    private javax.swing.JButton okButton;
    // End of variables declaration//GEN-END:variables

}
