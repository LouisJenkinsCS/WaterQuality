package weather.serverside.old_weather_underground_retrieval;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.Date;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.GregorianCalendar;
import java.util.TimeZone;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import weather.StorageControlSystem;
import weather.common.data.resource.Resource;
import weather.common.data.resource.ResourceRange;
import weather.common.gui.component.BUDialog;
import weather.common.utilities.DateRangeSelectionWindow;
import weather.common.utilities.ResourceTimeManager;

/**
 * This is the main form of the program that retrieves old data from Weather
 * Underground weather stations.
 * @author Brian Bankes
 */
public class OldWeatherUndergroundFileRetrieverMainForm extends BUDialog {
    
    /**
     * The <code>StorageControlSystem</code> with access to the file system
     * where all video storage occurs. As of 7/13/16, this must be an instance
     * of <code>StorageControlSystemLocalImpl</code>.
     */
    private final StorageControlSystem storage;
    
    /**
     * An <code>ArrayList</code> of type <code>Resource</code> containing all of
     * the selected weather station resources.
     */
    private final ArrayList<Resource> selectedStationResources;
    
    /**
     * The current date range for which videos will be made, as selected by the
     * user.  It is null until a selection is made.
     */
    private ResourceRange selectedRange = null;
    
    /**
     * The number of day in the selected range, which is zero until a range is
     * selected.
     */
    private int daysInSelectedRange = 0;
    
    /**
     * Flag to indicate when the background thread is running.
     */
    private boolean isWorkerRunning = false;
    
    /**
     * Creates new form OldWeatherUndergroundFileRetrieverMainForm
     * 
     * @param storage The <code>StorageControlSystem</code> with access to the
     * file system where all video storage occurs. As of 5/27/16, this must be
     * an instance of <code>StorageControlSystemLocalImpl</code>.
     * @param activeStationResources An <code>ArrayList</code> of type 
     * <code>Resource</code> containing all of the active weather station 
     * resources.
     */
    public OldWeatherUndergroundFileRetrieverMainForm(StorageControlSystem storage,
            ArrayList<Resource> activeStationResources) {
        super();
        
        this.storage = storage;
        this.selectedStationResources = new ArrayList<>();
        initComponents();
        this.progressLabel.setVisible(false);
        this.progressBar.setVisible(false);

        //Add check boxes to weather station panel.
        for (final Resource resource : activeStationResources) {
            final JCheckBox checkBox = new JCheckBox(resource.getResourceName());
            checkBox.addItemListener(new ItemListener() {

                @Override
                public void itemStateChanged(ItemEvent e) {
                    if (checkBox.isSelected()) {
                        selectedStationResources.add(resource);
                    } else {
                        selectedStationResources.remove(resource);
                    }
                }
            });
            this.weatherStationsPanel.add(checkBox);
            checkBox.setSelected(false);
        }

        int width = 478 + this.getInsets().left + this.getInsets().right;
        int height = 284 + this.getInsets().top + this.getInsets().bottom;
        Dimension thisDim = new Dimension(width, height);
        this.setSize(thisDim);
        this.setPreferredSize(thisDim);
        this.setMaximumSize(thisDim);
        this.setMinimumSize(thisDim);
        pack();
        super.postInitialize(true);
    }

    /**
     * Sets timeRangeLabel to the current range according to the selected date 
     * range using the local time zone implicitly.
     */
    private void setTimeRange() {
        StringBuilder newLabel = new StringBuilder();
        SimpleDateFormat timeFormat = new SimpleDateFormat("M/dd/yyyy");

        //Set label txet.
        newLabel.append("<html><center><b>");
        newLabel.append("Selected Range:<br/>");
        newLabel.append(timeFormat.format(selectedRange.getStartTime()));
        newLabel.append(" to<br/>");
        newLabel.append(timeFormat.format(selectedRange.getStopTime()));
        newLabel.append("</b></center></html>");

        //Place text on label.
        timeRangeLabel.setText(newLabel.toString());
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        timeRangeButton = new javax.swing.JButton();
        timeRangeLabel = new javax.swing.JLabel();
        getDataButton = new javax.swing.JButton();
        overrideExistingCheckBox = new javax.swing.JCheckBox();
        topLabel = new javax.swing.JLabel();
        closeButton = new javax.swing.JButton();
        progressLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        weatherStationScrollPane = new javax.swing.JScrollPane();
        weatherStationsPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Past Days Weather Underground Data Retrieval Utility");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        timeRangeButton.setText("Select Date Range");
        timeRangeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeRangeButtonActionPerformed(evt);
            }
        });
        getContentPane().add(timeRangeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 40, 150, 26));

        timeRangeLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        timeRangeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        timeRangeLabel.setText("<html><center>No Date Range Selected.</center></html>");
        getContentPane().add(timeRangeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 78, 150, 48));

        getDataButton.setText("Retrieve Data");
        getDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getDataButtonActionPerformed(evt);
            }
        });
        getContentPane().add(getDataButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 246, 150, 26));

        overrideExistingCheckBox.setSelected(true);
        overrideExistingCheckBox.setText("<html><b>Override Existing Data</b></html>");
        getContentPane().add(overrideExistingCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 138, 150, 40));
        overrideExistingCheckBox.getAccessibleContext().setAccessibleName("<html><b>Override Existing Data</b></html>");

        topLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        topLabel.setText("BU Weather Viewer Weather Underground Data Retriever");
        getContentPane().add(topLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(51, 12, 376, 16));

        closeButton.setText("Exit");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        getContentPane().add(closeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(316, 246, 150, 26));

        progressLabel.setToolTipText("");
        getContentPane().add(progressLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 190, 454, 16));
        getContentPane().add(progressBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 218, 454, 16));

        weatherStationScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Active Weather Stations"));
        weatherStationScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        weatherStationsPanel.setLayout(new javax.swing.BoxLayout(weatherStationsPanel, javax.swing.BoxLayout.Y_AXIS));
        weatherStationScrollPane.setViewportView(weatherStationsPanel);

        getContentPane().add(weatherStationScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(174, 40, 292, 138));
        weatherStationScrollPane.getAccessibleContext().setAccessibleName("Active Weather Stations");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void timeRangeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeRangeButtonActionPerformed
        //The starting range will be the selected range unlass there is none,
        //in which case is is today.
        ResourceRange startingRange;
        if (selectedRange == null) {
            Date startOfToday = ResourceTimeManager
                .getStartOfDayDateFromMilliseconds(System.currentTimeMillis(), 
                TimeZone.getDefault());
            startingRange = new ResourceRange(startOfToday, startOfToday);
        } else {
            startingRange = new ResourceRange(selectedRange.getStartTime(),
                selectedRange.getStopTime());
        }
        
        ResourceRange newRange = DateRangeSelectionWindow
            .getNewResourceRange(startingRange, TimeZone.getDefault(),
            false, true, false);
        if (newRange != null) {
            this.selectedRange = newRange;
            setTimeRange();
            timeRangeButton.setText("Change Date Range");
            
            //Find the number of days in the range.
            long elapsedMillis = selectedRange.getStopTime().getTime()
                    - selectedRange.getStartTime().getTime();
            //A fraction is possible with DST.
            double daysAsDouble = ((double) elapsedMillis) 
                    / ResourceTimeManager.MILLISECONDS_PER_DAY + 1;
            long daysAsLong = Math.round(daysAsDouble);
            daysInSelectedRange = (int) daysAsLong;
        }
    }//GEN-LAST:event_timeRangeButtonActionPerformed

    private void getDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getDataButtonActionPerformed
        if (selectedRange == null || selectedStationResources.isEmpty()) {
            String message = "Please select a date range and at least "
                    + "one resource.";
            JOptionPane.showMessageDialog(this, message, "Missing Input", 
                    JOptionPane.INFORMATION_MESSAGE);
        } else {
            //Disable controls.
            closeButton.setEnabled(false);
            timeRangeButton.setEnabled(false);
            getDataButton.setEnabled(false);
            overrideExistingCheckBox.setEnabled(false);
            for (Component checkBox : weatherStationsPanel.getComponents()) {
                checkBox.setEnabled(false);
            }
            
            //Show progress bar.
            progressLabel.setVisible(true);
            progressLabel.setText("Starting...");
            progressBar.setVisible(true);
            
            //Show worker is running.
            isWorkerRunning = true;
            
            //Start Backgroud thread to make videos.
            (new VideoWorker()).execute();
        }
    }//GEN-LAST:event_getDataButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        //Can't close if worker is running.
        if (!isWorkerRunning) {
            this.dispose();
        }
    }//GEN-LAST:event_formWindowClosing

    
    /**
     * A function to make this object available to the inner class.
     * @return This object as a <code>Component</code>.
     */
    private Component getThisWindow() {
        return this;
    }
    
    /**
     * Private class that uses a background thread to get the data
     */
    private class VideoWorker extends SwingWorker<Void, Void> {
        
        //Track success of data retriever.
        private int dataRetrievedOrPressent = 0;
        private int moreDataOnSystemErrors = 0;
        private int noDataOnWebErrors = 0;
        private int programErrors = 0;
        
        //The total number of files that could be retrieved.
        private final int total = daysInSelectedRange 
                * selectedStationResources.size();
        
        //Minimum percentage to show as completed. (So the user knows processing
        //has started.
        private final int minimum = 4;

        @Override
        protected Void doInBackground() throws Exception {
            //Start progress bar.
            progressBar.setValue(minimum);
            //Loop through all active resources to make videos.
            for (Resource resource : selectedStationResources) {
                //Convert selected range to local time zone.
                Date localStartTime = ResourceTimeManager
                        .changeDateTimeZone(selectedRange.getStartTime(),
                                TimeZone.getDefault(),
                                resource.getTimeZone().getTimeZone());
                Date localStopTime = ResourceTimeManager
                        .changeDateTimeZone(selectedRange.getStopTime(),
                                TimeZone.getDefault(),
                                resource.getTimeZone().getTimeZone());
                //Make calendar end points for video-making loop.
                GregorianCalendar startCal = new GregorianCalendar();
                startCal.setTime(localStartTime);
                startCal.setTimeZone(resource.getTimeZone().getTimeZone());
                GregorianCalendar stopCal = new GregorianCalendar();
                stopCal.setTime(localStopTime);
                stopCal.setTimeZone(resource.getTimeZone().getTimeZone());
                //Loop through the range for this resource.
                GregorianCalendar loopCal = new GregorianCalendar();
                loopCal.setTime(localStartTime);
                loopCal.setTimeZone(resource.getTimeZone().getTimeZone());
                for (; loopCal.getTimeInMillis() <= stopCal.getTimeInMillis();
                        loopCal.add(GregorianCalendar.DATE, 1)) {
                    int result = OldWeatherUndergroundFileRetriever
                            .getOldData(storage, resource, loopCal, 
                                    overrideExistingCheckBox.isSelected());
                    
                    //Record result.
                    switch (result) {
                        case 0:
                            dataRetrievedOrPressent++;
                            break;
                        case 1:
                            moreDataOnSystemErrors++;
                            break;
                        case 2:
                            noDataOnWebErrors++;
                            break;
                        default:
                            programErrors++;
                            break;
                    }
                    
                    //Compute and set new progress bar value and label text.
                    int totalAttempts = dataRetrievedOrPressent 
                            + moreDataOnSystemErrors + noDataOnWebErrors 
                            + programErrors;
                    progressLabel
                            .setText("Resource/Date Combinations Examined: "
                            + totalAttempts + " of " + total);
                    int percentage = (100 * totalAttempts) / total;
                    progressBar.setValue(Math.max(minimum, percentage));
                }
            }
            return null;
        }

        @Override
        protected void done() {
            //Show results.
            StringBuilder message = new StringBuilder("The process has ");
            message.append("finished.\n\nHere are the results:\n");
            message.append("Total Attempts: ").append(total)
                    .append("\n");
            if (overrideExistingCheckBox.isSelected()) {
                message.append("Files made or overridden: ");
            } else {
                message.append("Files made or retained: ");
            }
            message.append(dataRetrievedOrPressent).append("\n");
            if (overrideExistingCheckBox.isSelected()) {
                message.append("Files NOT overridden due to more data being ");
                message.append("found on the file system than the Internet: ");
                message.append(moreDataOnSystemErrors).append("\n");
            }
            if (overrideExistingCheckBox.isSelected()) {
                message.append("Files NOT made or overridden due to ");
            } else {
                message.append("Files NOT made due to ");
            }
            message.append("no data being found on the Internet: ");
            message.append(noDataOnWebErrors).append("\n");
            if (overrideExistingCheckBox.isSelected()) {
                message.append("Files NOT made or overridden due to ");
            } else {
                message.append("Files NOT made or retained due to ");
            }
            message.append("an error in saving the data: ");
            message.append(programErrors);
            JOptionPane.showMessageDialog(getThisWindow(), message.toString(),
                    "Process Complete", JOptionPane.INFORMATION_MESSAGE);
            
            //Wait, then enable controls after user clicks.
            closeButton.setEnabled(true);
            timeRangeButton.setEnabled(true);
            getDataButton.setEnabled(true);
            overrideExistingCheckBox.setEnabled(true);
            for (Component checkBox : weatherStationsPanel.getComponents()) {
                checkBox.setEnabled(true);
            }
            
            //Also hide and reset progress bar.
            progressLabel.setVisible(false);
            progressBar.setVisible(false);
            progressBar.setValue(0);
            
            //Show worker is done running.
            isWorkerRunning = false;
        }
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JButton getDataButton;
    private javax.swing.JCheckBox overrideExistingCheckBox;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel progressLabel;
    private javax.swing.JButton timeRangeButton;
    private javax.swing.JLabel timeRangeLabel;
    private javax.swing.JLabel topLabel;
    private javax.swing.JScrollPane weatherStationScrollPane;
    private javax.swing.JPanel weatherStationsPanel;
    // End of variables declaration//GEN-END:variables
}
