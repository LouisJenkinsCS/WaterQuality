/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package weather.serverside.gui.component;

import weather.serverside.utilities.ServiceControl;
import weather.serverside.utilities.WeatherServiceNames;
import weather.serverside.utilities.ServiceCheckThread;

/**
 * Displays the status of a single service.  This includes the service name,
 * whether it is running, and the option to interact with the service.
 * @author Zach Rothweiler
 */
public class ServiceStatusPanel extends javax.swing.JPanel {
    private WeatherServiceNames service;
    private ServiceCheckThread serviceStatusChecker;
    private int frequencyOfCheck;


    /**
     * Creates a new ServiceStatusPanel, default kept for functionality with
     * design editor.
     */
    public ServiceStatusPanel() {
        this(WeatherServiceNames.UNKNOWN);
    }

    /**
     * Creates a panel to view the status of a given service, and allows a user
     * to start, stop, or restart a service.
     * @param service The name of the service to monitor.
     */
    public ServiceStatusPanel(WeatherServiceNames service){
        this.service=service;
        this.frequencyOfCheck=5000;//will come from server property file, not implemented yet.
        initComponents();


        serviceNameLabel.setText(service.getLongName()+":");

        serviceStatusChecker=new ServiceCheckThread(frequencyOfCheck,
                service,serviceStatus);
        serviceStatusChecker.start();
    }

    /**
     * Changes the service to be monitored to the given service.
     * @param service The new service to monitor.
     */
    public void setService(WeatherServiceNames service){
        this.service=service;
        serviceStatusChecker.stopRunning();
        serviceStatusChecker=new ServiceCheckThread(frequencyOfCheck,service,serviceStatus);
    }

    private void updateStatus(){
        String status=null;
        do{
            serviceStatus.setText(status=ServiceControl.checkService(service));
        }while(status.equalsIgnoreCase(ServiceControl.START_PENDING) ||
                status.equalsIgnoreCase(ServiceControl.STOP_PENDING));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonPanel = new javax.swing.JPanel();
        startButton = new javax.swing.JButton();
        restartButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        labelPanel = new javax.swing.JPanel();
        serviceNameLabel = new javax.swing.JLabel();
        serviceStatus = new javax.swing.JLabel();

        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        restartButton.setText("Restart");
        restartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restartButtonActionPerformed(evt);
            }
        });

        stopButton.setText("Stop");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buttonPanelLayout = new javax.swing.GroupLayout(buttonPanel);
        buttonPanel.setLayout(buttonPanelLayout);
        buttonPanelLayout.setHorizontalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(startButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(restartButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(stopButton)
                .addContainerGap())
        );
        buttonPanelLayout.setVerticalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startButton)
                    .addComponent(restartButton)
                    .addComponent(stopButton))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        serviceNameLabel.setText("jLabel1");

        serviceStatus.setText("jLabel2");

        javax.swing.GroupLayout labelPanelLayout = new javax.swing.GroupLayout(labelPanel);
        labelPanel.setLayout(labelPanelLayout);
        labelPanelLayout.setHorizontalGroup(
            labelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(labelPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(serviceNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 111, Short.MAX_VALUE)
                .addComponent(serviceStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        labelPanelLayout.setVerticalGroup(
            labelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(labelPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(labelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(serviceNameLabel)
                    .addComponent(serviceStatus))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(labelPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(buttonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(labelPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Starts the service.
     * @param evt The button event that triggers the action.
     */
    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        ServiceControl.startService(service);
        updateStatus();
    }//GEN-LAST:event_startButtonActionPerformed

    /**
     * Stops the service.
     * @param evt The button event that triggers the action.
     */
    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        ServiceControl.stopService(service);
        updateStatus();
    }//GEN-LAST:event_stopButtonActionPerformed

    /**
     * Restarts the service.
     * @param evt The button event that triggers the action.
     */
    private void restartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restartButtonActionPerformed
        ServiceControl.restartService(service);
        updateStatus();
    }//GEN-LAST:event_restartButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JPanel labelPanel;
    private javax.swing.JButton restartButton;
    private javax.swing.JLabel serviceNameLabel;
    private javax.swing.JLabel serviceStatus;
    private javax.swing.JButton startButton;
    private javax.swing.JButton stopButton;
    // End of variables declaration//GEN-END:variables
}
