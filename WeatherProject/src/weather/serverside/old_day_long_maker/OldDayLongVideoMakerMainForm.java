package weather.serverside.old_day_long_maker;

import java.awt.Component;
import java.awt.Dimension;
import java.sql.Date;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.GregorianCalendar;
import java.util.TimeZone;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import weather.StorageControlSystem;
import weather.common.data.resource.Resource;
import weather.common.data.resource.ResourceRange;
import weather.common.gui.component.BUDialog;
import weather.common.utilities.DateRangeSelectionWindow;
import weather.common.utilities.ResourceTimeManager;

/**
 * This is the main form of the program that makes full-day videos for days in
 * the past
 * @author Brian Bankes
 */
public class OldDayLongVideoMakerMainForm extends BUDialog {
    
    /**
     * The <code>StorageControlSystem</code> with access to the file system
     * where all video storage occurs. As of 5/27/16, this must be an instance
     * of <code>StorageControlSystemLocalImpl</code>.
     */
    private final StorageControlSystem storage;
    
    /**
     * An <code>ArrayList</code> of type <code>Resource</code> containing all of
     * the active video-making resources.
     */
    private final ArrayList<Resource> activeVideoResources;
    
    /**
     * The current date range for which videos will be made, as selected by the
     * user.  It is null until a selection is made.
     */
    private ResourceRange selectedRange = null;
    
    /**
     * The number of day in the selected range, which is zero until a range is
     * selected.
     */
    private int daysInSelectedRange = 0;
    
    /**
     * Flag to indicate when the background thread is running.
     */
    private boolean isWorkerRunning = false;
    
    /**
     * Creates new form OldDayLongVideoMakerMainForm
     * 
     * @param storage The <code>StorageControlSystem</code> with access to the
     * file system where all video storage occurs. As of 5/27/16, this must be
     * an instance of <code>StorageControlSystemLocalImpl</code>.
     * @param activeVideoResources An <code>ArrayList</code> of type 
     * <code>Resource</code> containing all of the active video-making 
     * resources.
     */
    public OldDayLongVideoMakerMainForm(StorageControlSystem storage,
            ArrayList<Resource> activeVideoResources) {
        super();
        
        this.activeVideoResources = activeVideoResources;
        this.storage = storage;
        initComponents();
        this.progressLabel.setVisible(false);
        this.progressBar.setVisible(false);
        
        int width = 478 + this.getInsets().left + this.getInsets().right;
        int height = 226 + this.getInsets().top + this.getInsets().bottom;
        Dimension thisDim = new Dimension(width, height);
        this.setSize(thisDim);
        this.setPreferredSize(thisDim);
        this.setMaximumSize(thisDim);
        this.setMinimumSize(thisDim);
        pack();
        super.postInitialize(true);
    }

    /**
     * Sets timeRangeLabel to the current range according to the selected date 
     * range using the local time zone implicitly.
     */
    private void setTimeRange() {
        StringBuilder newLabel = new StringBuilder();
        SimpleDateFormat timeFormat = new SimpleDateFormat("M/dd/yyyy");

        //Set label txet.
        newLabel.append("<html><center><b>");
        newLabel.append("Selected Range:<br/>");
        newLabel.append(timeFormat.format(selectedRange.getStartTime()));
        newLabel.append(" to<br/>");
        newLabel.append(timeFormat.format(selectedRange.getStopTime()));
        newLabel.append("</b></center></html>");

        //Place text on label.
        timeRangeLabel.setText(newLabel.toString());
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        timeRangeButton = new javax.swing.JButton();
        timeRangeLabel = new javax.swing.JLabel();
        makeVideosButton = new javax.swing.JButton();
        overrideExistingCheckBox = new javax.swing.JCheckBox();
        makeLowQualityCopiesCheckBox = new javax.swing.JCheckBox();
        topLabel = new javax.swing.JLabel();
        closeButton = new javax.swing.JButton();
        progressLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        convertMOVFilesCheckBox = new javax.swing.JCheckBox();
        helpButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Past Days Video-Making Utility");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        timeRangeButton.setText("Select Date Range");
        timeRangeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeRangeButtonActionPerformed(evt);
            }
        });
        getContentPane().add(timeRangeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 40, 150, 26));

        timeRangeLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        timeRangeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        timeRangeLabel.setText("<html><center>No Date Range Selected.</center></html>");
        getContentPane().add(timeRangeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 75, 150, 48));

        makeVideosButton.setText("Make Videos");
        makeVideosButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                makeVideosButtonActionPerformed(evt);
            }
        });
        getContentPane().add(makeVideosButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 188, 150, 26));

        overrideExistingCheckBox.setSelected(true);
        overrideExistingCheckBox.setText("<html><b>Override Existing<br/>Videos</b></html>");
        getContentPane().add(overrideExistingCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(336, 40, 130, 40));

        makeLowQualityCopiesCheckBox.setSelected(true);
        makeLowQualityCopiesCheckBox.setLabel("<html><b>Make Low-Quality<br/>Copies</b></html>");
        getContentPane().add(makeLowQualityCopiesCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(184, 80, 130, 40));

        topLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        topLabel.setText("BU Weather Viewer Past Days 24-Hour Video Builder");
        getContentPane().add(topLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(69, 12, 340, 16));

        closeButton.setText("Exit");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        getContentPane().add(closeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(316, 188, 150, 26));

        progressLabel.setToolTipText("");
        getContentPane().add(progressLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 132, 454, 16));
        getContentPane().add(progressBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 160, 454, 16));

        convertMOVFilesCheckBox.setSelected(true);
        convertMOVFilesCheckBox.setText("<html><b>Convert MOV Files<br/>To MP4 Files</b></html>");
        getContentPane().add(convertMOVFilesCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(184, 40, 130, 40));

        helpButton.setText("<html><center>Help With Making MP4 Files</center></html>");
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });
        getContentPane().add(helpButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(336, 80, 130, 40));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void timeRangeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeRangeButtonActionPerformed
        //The starting range will be the selected range unlass there is none,
        //in which case is is today.
        ResourceRange startingRange;
        if (selectedRange == null) {
            Date startOfToday = ResourceTimeManager
                .getStartOfDayDateFromMilliseconds(System.currentTimeMillis(), 
                TimeZone.getDefault());
            startingRange = new ResourceRange(startOfToday, startOfToday);
        } else {
            startingRange = new ResourceRange(selectedRange.getStartTime(),
                selectedRange.getStopTime());
        }
        
        ResourceRange newRange = DateRangeSelectionWindow
            .getNewResourceRange(startingRange, TimeZone.getDefault(),
            false, true, false);
        if (newRange != null) {
            this.selectedRange = newRange;
            setTimeRange();
            timeRangeButton.setText("Change Date Range");
            
            //Find the number of days in the range.
            long elapsedMillis = selectedRange.getStopTime().getTime()
                    - selectedRange.getStartTime().getTime();
            //A fraction is possible with DST.
            double daysAsDouble = ((double) elapsedMillis) 
                    / ResourceTimeManager.MILLISECONDS_PER_DAY + 1;
            long daysAsLong = Math.round(daysAsDouble);
            daysInSelectedRange = (int) daysAsLong;
        }
    }//GEN-LAST:event_timeRangeButtonActionPerformed

    private void makeVideosButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makeVideosButtonActionPerformed
        if (selectedRange == null) {
            JOptionPane.showMessageDialog(this, "Please select a date range", 
                    "No Range Selected.", JOptionPane.INFORMATION_MESSAGE);
        } else {
            //Disable controls.
            closeButton.setEnabled(false);
            timeRangeButton.setEnabled(false);
            makeVideosButton.setEnabled(false);
            makeLowQualityCopiesCheckBox.setEnabled(false);
            overrideExistingCheckBox.setEnabled(false);
            convertMOVFilesCheckBox.setEnabled(false);
            helpButton.setEnabled(false);
            
            //Show progress bar.
            progressLabel.setVisible(true);
            progressLabel.setText("Starting...");
            progressBar.setVisible(true);
            
            //Show worker is running.
            isWorkerRunning = true;
            
            //Start Backgroud thread to make videos.
            (new VideoWorker()).execute();
        }
    }//GEN-LAST:event_makeVideosButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        //Can't close if worker is running.
        if (!isWorkerRunning) {
            this.dispose();
        }
    }//GEN-LAST:event_formWindowClosing

    private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonActionPerformed
        StringBuilder message = new StringBuilder();
        message.append("If the check box to convert MOV files to MP4 files\n");
        message.append("is checked, the program will do the conversion for\n");
        message.append("a given resource on a given day before attempting\n");  
        message.append("to make that day-long video.  Regardless, if there\n");
        message.append("are not enough MP4 videos to complete an attempt,\n");
        message.append("the program will try to make more by copying any\n");
        message.append("available AVI files.");
        JOptionPane.showMessageDialog(this, message.toString(),
            "MP4 File Creation Help", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_helpButtonActionPerformed

    /**
     * A function to make this object available to the inner class.
     * @return This object as a <code>Component</code>.
     */
    private Component getThisWindow() {
        return this;
    }
    
    /**
     * Private class that uses a background thread to make the videos
     */
    private class VideoWorker extends SwingWorker<Void, Void> {
        
        //Track success of video maker.
        private int videosMadeOrPressent = 0;
        private int missingDataErrors = 0;
        private int videoMakingErrors = 0;
        
        //The total number of videos that could be made.
        private final int total = daysInSelectedRange 
                * activeVideoResources.size();
        
        //Minimum percentage to show as completed. (So the user knows processing
        //has started.
        private final int minimum = 4;

        @Override
        protected Void doInBackground() throws Exception {
            //Start progress bar.
            progressBar.setValue(minimum);
            //Loop through all active resources to make videos.
            for (Resource resource : activeVideoResources) {
                //Convert selected range to local time zone.
                Date localStartTime = ResourceTimeManager
                        .changeDateTimeZone(selectedRange.getStartTime(),
                                TimeZone.getDefault(),
                                resource.getTimeZone().getTimeZone());
                Date localStopTime = ResourceTimeManager
                        .changeDateTimeZone(selectedRange.getStopTime(),
                                TimeZone.getDefault(),
                                resource.getTimeZone().getTimeZone());
                //Make calendar end points for video-making loop.
                GregorianCalendar startCal = new GregorianCalendar();
                startCal.setTime(localStartTime);
                startCal.setTimeZone(resource.getTimeZone().getTimeZone());
                GregorianCalendar stopCal = new GregorianCalendar();
                stopCal.setTime(localStopTime);
                stopCal.setTimeZone(resource.getTimeZone().getTimeZone());
                //Loop through the range for this resource.
                GregorianCalendar loopCal = new GregorianCalendar();
                loopCal.setTime(localStartTime);
                loopCal.setTimeZone(resource.getTimeZone().getTimeZone());
                for (; loopCal.getTimeInMillis() <= stopCal.getTimeInMillis();
                        loopCal.add(GregorianCalendar.DATE, 1)) {
                    //Get time as Date object.
                    Date date = new Date(loopCal.getTimeInMillis());
                    
                    //Automatically convert any MOV videos to MP4 format, if 
                    //requested.
                    if (convertMOVFilesCheckBox.isSelected()) {
                        storage.convertMOVVideosToMP4Videos(resource
                                .getResourceNumber(), date);
                    }
                    
                    //Try to make a video.
                    int result = OldDayLongVideoMaker
                            .makeOldVideo(storage, resource, date,
                                    overrideExistingCheckBox.isSelected(),
                                    makeLowQualityCopiesCheckBox.isSelected());
                    
                    //Record result.
                    switch (result) {
                        case 0:
                            videosMadeOrPressent++;
                            break;
                        case 1:
                            missingDataErrors++;
                            break;
                        default:
                            videoMakingErrors++;
                            break;
                    }
                    
                    //Compute and set new progress bar value and label text.
                    int totalAttempts = videosMadeOrPressent 
                            + missingDataErrors + videoMakingErrors;
                    progressLabel
                            .setText("Resource/Date Combinations Examined: "
                            + totalAttempts + " of " + total);
                    int percentage = (100 * totalAttempts) / total;
                    progressBar.setValue(Math.max(minimum, percentage));
                }
            }
            return null;
        }

        @Override
        protected void done() {
            //Show results.
            String videoString;
            if (makeLowQualityCopiesCheckBox.isSelected()) {
                videoString = "Video pairs ";
            } else {
                videoString = "Videos ";
            }
            StringBuilder message = new StringBuilder("The process has ");
            message.append("finished.\n\nHere are the results:\n");
            message.append("Total Attempts: ").append(total)
                    .append("\n");
            if (overrideExistingCheckBox.isSelected()) {
                message.append(videoString).append("made or overridden: ");
            } else {
                message.append(videoString).append("made or retained: ");
            }
            message.append(videosMadeOrPressent).append("\n");
            if (overrideExistingCheckBox.isSelected()) {
                message.append(videoString).append("NOT made or overridden ");
            } else {
                message.append(videoString).append("NOT made or retained ");
            }
            message.append("due to an insufficient amount of source data: ");
            message.append(missingDataErrors).append("\n");
            if (overrideExistingCheckBox.isSelected()) {
                message.append(videoString).append("NOT made or overridden ");
            } else {
                message.append(videoString).append("NOT made or retained ");
            }
            message.append("due to errors in the video-making process: ");
            message.append(videoMakingErrors);
            JOptionPane.showMessageDialog(getThisWindow(), message.toString(),
                    "Process Complete", JOptionPane.INFORMATION_MESSAGE);
            
            //Wait, then enable controls after user clicks.
            closeButton.setEnabled(true);
            timeRangeButton.setEnabled(true);
            makeVideosButton.setEnabled(true);
            makeLowQualityCopiesCheckBox.setEnabled(true);
            overrideExistingCheckBox.setEnabled(true);
            convertMOVFilesCheckBox.setEnabled(true);
            helpButton.setEnabled(true);
            
            //Also hide and reset progress bar.
            progressLabel.setVisible(false);
            progressBar.setVisible(false);
            progressBar.setValue(0);
            
            //Show worker is done running.
            isWorkerRunning = false;
        }
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JCheckBox convertMOVFilesCheckBox;
    private javax.swing.JButton helpButton;
    private javax.swing.JCheckBox makeLowQualityCopiesCheckBox;
    private javax.swing.JButton makeVideosButton;
    private javax.swing.JCheckBox overrideExistingCheckBox;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel progressLabel;
    private javax.swing.JButton timeRangeButton;
    private javax.swing.JLabel timeRangeLabel;
    private javax.swing.JLabel topLabel;
    // End of variables declaration//GEN-END:variables
}
