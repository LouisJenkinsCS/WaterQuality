package weather.developer;

import java.awt.Dimension;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.sql.Date;
import java.text.SimpleDateFormat;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import weather.AdministratorControlSystem;
import weather.ApplicationControlSystem;
import weather.ClientControlSystem;
import weather.GeneralService;
import weather.InstructorControlSystem;
import weather.clientside.applicationimpl.AdminControlImpl;
import weather.clientside.applicationimpl.ApplicationControlImpl;
import weather.clientside.applicationimpl.ClientControlImpl;
import weather.clientside.applicationimpl.GeneralServiceImpl;
import weather.clientside.applicationimpl.InstructorControlImpl;
import weather.clientside.utilities.JTextFieldLimit;
import weather.common.gui.component.BUDialog;
import weather.common.data.version.Version;
import weather.common.dbms.DBMSSystemManager;
import weather.common.dbms.DBMSVersionManager;
import weather.common.gui.component.IconProperties;
import weather.common.gui.component.SplashScreenWindow;
import weather.common.utilities.Debug;
import weather.common.utilities.PropertyManager;
import weather.common.utilities.ScreenInteractionUtility;

/**
 * This form allows the Bloomsburg University program creators the update the 
 * version information in the public database.  It is designed to be used as a
 * stand-alone program and has its own main method.
 * @author Brian Bankes
 */
public class DeveloperForm extends BUDialog {

    DBMSVersionManager versionManager;
    SimpleDateFormat releaseDateFormatter = new SimpleDateFormat("MM/dd/yy");

    /**
     * Constructor.
     * @param appControl The program's <code>ApplicationControlSystem</code>.
     */
    public DeveloperForm(ApplicationControlSystem appControl) {
        super(appControl);
        initComponents();
        
        //Set input field properties.
        majorVersionTextField.setDocument(new JTextFieldLimit(2));
        minorVersionTextField.setDocument(new JTextFieldLimit(2));
        minorReleaseTextField.setDocument(new JTextFieldLimit(2));
        notesTextArea.setDocument(new JTextFieldLimit(20000));
        notesTextArea.setLineWrap(true);
        notesTextArea.setWrapStyleWord(true);
        
        //Add versions to combo box.
        versionManager = this.appControl.getDBMSSystem().getVersionManager();
        for (Version version : versionManager.getAllVersions()) {
            versionComboBox.addItem(version.toString());
        }
        
        //Set size
        int width = 543 + this.getInsets().left + this.getInsets().right;
        int height = 551 + this.getInsets().top + this.getInsets().bottom;
        Dimension thisDim = new Dimension(width, height);
        this.setSize(thisDim);
        this.setPreferredSize(thisDim);
        this.setMaximumSize(thisDim);
        this.setMinimumSize(thisDim);
        pack();
        
        super.postInitialize(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        selectLabel = new javax.swing.JLabel();
        versionComboBox = new javax.swing.JComboBox();
        majorVersionTextField = new javax.swing.JTextField();
        minorVersionTextField = new javax.swing.JTextField();
        minorReleaseTextField = new javax.swing.JTextField();
        majorVersionLabel = new javax.swing.JLabel();
        minorVersionLabel = new javax.swing.JLabel();
        minorReleaseLabel = new javax.swing.JLabel();
        notesLabel = new javax.swing.JLabel();
        notesScrollPane = new javax.swing.JScrollPane();
        notesTextArea = new javax.swing.JTextArea();
        buttonPanel = new javax.swing.JPanel();
        insertUpdateButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        releaseDateLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Weather Viewer Version Updater");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        selectLabel.setText("Select Version to Insert or Update:");
        getContentPane().add(selectLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 12, 199, 16));

        versionComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<New Version>" }));
        versionComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                versionComboBoxActionPerformed(evt);
            }
        });
        getContentPane().add(versionComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(217, 12, 117, 22));

        majorVersionTextField.setToolTipText("");
        getContentPane().add(majorVersionTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(152, 46, 25, 22));

        minorVersionTextField.setToolTipText("");
        getContentPane().add(minorVersionTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(328, 46, 25, 22));

        minorReleaseTextField.setToolTipText("");
        getContentPane().add(minorReleaseTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(506, 46, 25, 22));

        majorVersionLabel.setText("Major Version Number:");
        majorVersionLabel.setToolTipText("");
        getContentPane().add(majorVersionLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 46, 134, 16));

        minorVersionLabel.setText("Minor Version Number:");
        minorVersionLabel.setToolTipText("");
        getContentPane().add(minorVersionLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(189, 46, 133, 16));

        minorReleaseLabel.setText("Minor Release Number:");
        getContentPane().add(minorReleaseLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(365, 46, 135, 16));

        notesLabel.setText("Release Notes:");
        notesLabel.setToolTipText("");
        getContentPane().add(notesLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 80, 86, 16));

        notesScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        notesTextArea.setColumns(20);
        notesTextArea.setRows(5);
        notesScrollPane.setViewportView(notesTextArea);

        getContentPane().add(notesScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 102, 519, 400));
        notesScrollPane.getAccessibleContext().setAccessibleDescription("");

        buttonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 12, 0));

        insertUpdateButton.setText("Insert New Version");
        insertUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertUpdateButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(insertUpdateButton);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(closeButton);

        getContentPane().add(buttonPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 514, 519, 25));
        getContentPane().add(releaseDateLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(346, 12, 185, 16));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        checkToClose();
    }//GEN-LAST:event_formWindowClosing

    private void versionComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_versionComboBoxActionPerformed
        //Check if the option to insert a new version is selected.
        if (versionComboBox.getSelectedIndex() == 0) {
            releaseDateLabel.setVisible(false);
            majorVersionTextField.setText("");
            majorVersionLabel.setEnabled(true);
            majorVersionTextField.setEnabled(true);
            minorVersionTextField.setText("");
            minorVersionLabel.setEnabled(true);
            minorVersionTextField.setEnabled(true);
            minorReleaseTextField.setText("");
            minorReleaseLabel.setEnabled(true);
            minorReleaseTextField.setEnabled(true);
            notesTextArea.setText("");
            insertUpdateButton.setText("Insert New Version");
            return;
        }
        
        //If code gets here, there is a version to update.
        
        Version version = versionManager.getVersionFromString(versionComboBox
                .getSelectedItem().toString());
        
        //Update release date label.
        releaseDateLabel.setVisible(true);
        releaseDateLabel.setText("Release Date: " + releaseDateFormatter
                .format(version.getReleaseDate()));
        
        //Only notes can be edited.
        majorVersionTextField.setText("" + version.getMajorVersion());
        majorVersionLabel.setEnabled(false);
        majorVersionTextField.setEnabled(false);
        minorVersionTextField.setText("" + version.getMinorVersion());
        minorVersionLabel.setEnabled(false);
        minorVersionTextField.setEnabled(false);
        minorReleaseTextField.setText("" + version.getMinorRelease());
        minorReleaseLabel.setEnabled(false);
        minorReleaseTextField.setEnabled(false);
        notesTextArea.setText(version.getVersionNotes());
        insertUpdateButton.setText("Update Notes");
    }//GEN-LAST:event_versionComboBoxActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        checkToClose();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void insertUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertUpdateButtonActionPerformed
        //Check if version is bad on a new insert.
        if (versionComboBox.getSelectedIndex() == 0) {
            if (!this.validateNewVersion()) {
                return;
            }
        }
        
        //Construct object for this save or update.
        int majorVersion = Integer.parseInt(majorVersionTextField.getText());
        int minorVersion = Integer.parseInt(minorVersionTextField.getText());
        int minorRelease = Integer.parseInt(minorReleaseTextField.getText());
        Version enteredVersion = new Version(majorVersion, minorVersion, 
                minorRelease);
        if(!notesTextArea.getText().trim().isEmpty()) {
            enteredVersion.setVersionNotes(notesTextArea.getText());
        }
        enteredVersion.setReleaseDate(new Date(System.currentTimeMillis()));
        
        //Check if the option to insert a new version is selected.
        if (versionComboBox.getSelectedIndex() == 0) {
            versionManager.insertVersion(enteredVersion);
            versionComboBox.addItem(enteredVersion.toString());
            versionComboBox.setSelectedItem(enteredVersion.toString());
            JOptionPane.showMessageDialog(this,
                    "The new version has been added.", "New Version Added", 
                    JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        //If code gets here, this is a click to edit existing notes.
        versionManager.updateVersionNotes(enteredVersion);
        JOptionPane.showMessageDialog(this,
                "The version notes have been updated.", "Notes Updated",
                JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_insertUpdateButtonActionPerformed

    /**
     * The is a main program that will create and show an instance of 
     * <code>DeveloperForm</code>.
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        // Creates a splash screen that will be displayed until the user presses
        // a key or clicks a mouse button.
        new SplashScreenWindow();
        
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                DBMSSystemManager dbms = null;
                try {
                    dbms = getDBMSSystemManager(); // Database System
                } catch (InstantiationException | IllegalAccessException | ClassNotFoundException ex) {
                }

                //Make sure there is s connection to the Bloomsburg database.
                if (dbms == null || !dbms.isBUConnectionOpen()) {
                    String message = "A connection to the BU database was not "
                            + "established.\nThe program must close.";
                    JOptionPane pane = new JOptionPane(message, 
                            JOptionPane.ERROR_MESSAGE);
                    JDialog dialog = pane.createDialog("No Connection");
                    dialog.setIconImage(IconProperties.getTitleBarIconImage());
                    ScreenInteractionUtility.positionWindow(dialog, true);
                    dialog.setVisible(true);
                    System.exit(-1);
                }
                
                GeneralService generalService = new GeneralServiceImpl(dbms);

                ClientControlSystem clientControl = new ClientControlImpl(generalService);

                InstructorControlSystem instructorControl = new InstructorControlImpl(generalService);

                AdministratorControlSystem adminControl = new AdminControlImpl(generalService);

                ApplicationControlImpl applicationControl 
                        = new ApplicationControlImpl(generalService,
                        clientControl, instructorControl, adminControl, dbms);
                Debug.println("got controls");

                //Show input window.
                new DeveloperForm(applicationControl);
            }
        });
    }
    
    /**
     * Gets the DBMS.
     * @return The DBMS.
     * @throws InstantiationException
     * @throws IllegalAccessException
     * @throws ClassNotFoundException 
     */
    private static DBMSSystemManager getDBMSSystemManager() 
            throws InstantiationException, IllegalAccessException, ClassNotFoundException {
        PropertyManager.configure();
        String dbmsClassName = PropertyManager.getGeneralProperty("dbmsClassName");
        Method dbmsInstanceGetter;
        try {
            dbmsInstanceGetter = Class.forName(dbmsClassName).getDeclaredMethod("getInstance");
            return (DBMSSystemManager) dbmsInstanceGetter.invoke(null);
        } catch (NoSuchMethodException | InvocationTargetException ex) {
            return null;
        }
    }
    
    /**
     * Checks if user wants to close program and closes it if so.
     */
    private void checkToClose() {
        String message;
        if (hasUnsavedData()) {
            message = "You have entered unsaved data.\n"
                    + "Are you sure you want to exit?";
        } else {
            message = "Are you sure you want to exit?";
        }
        int dialogResult = JOptionPane.showConfirmDialog(this, message,
                "Confirm Exit", JOptionPane.YES_NO_OPTION);

        if (dialogResult == JOptionPane.YES_OPTION) {
            appControl.getGeneralService().getDBMSSystem()
                    .closeDatabaseConnections();
            System.exit(0);
        }
    }
    
    /**
     * A helper function to test if a new version number is valid.  A valid
     * version must be made of positive integers and be newer than the newest
     * saved version.
     * @return True if the entered version is valid; False otherwise.
     */
    private boolean validateNewVersion() {
        //Make sure number fields are positive integers.
        int majorVersion;
        int minorVersion;
        int minorRelease;
        try {
            majorVersion = Integer.parseInt(majorVersionTextField.getText());
            if (majorVersion < 0) {
                throw new Exception();
            }
            minorVersion = Integer.parseInt(minorVersionTextField.getText());
            if (minorVersion < 0) {
                throw new Exception();
            }
            minorRelease = Integer.parseInt(minorReleaseTextField.getText());
            if (minorRelease < 0) {
                throw new Exception();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, 
                "The version number must be made of non-negitive integers.", 
                "Please Correct Version Number", JOptionPane.WARNING_MESSAGE);
            return false;
        }
        
        //Make sure new version is newer than any in the database.
        Version enteredVersion = new Version(majorVersion, minorVersion, 
                minorRelease);
        Version newestDBVersion = versionManager.getMostResentVersion();
        if (!(enteredVersion.compareTo(newestDBVersion) > 0)) {
            JOptionPane.showMessageDialog(this, 
                "The version number must be newer than the newest saved version.", 
                "Please Correct Version Number", JOptionPane.WARNING_MESSAGE);
            return false;
        } else {
            return true;
        }
    }
    
    /**
     * Helper function to check for unsaved data.  This function assumes the
     * user has asked to close the form, so it should only to called in that
     * case.
     * @return True if there is unsaved data; False otherwise.
     */
    private boolean hasUnsavedData() {
        //Check if the option to insert a new version is selected, in whick case
        //any data is unsaved.
        if (versionComboBox.getSelectedIndex() == 0) {
            if (!majorVersionTextField.getText().trim().isEmpty()) {
                return true;
            }
            if (!minorVersionTextField.getText().trim().isEmpty()) {
                return true;
            }
            if (!minorReleaseTextField.getText().trim().isEmpty()) {
                return true;
            }
            if (!notesTextArea.getText().trim().isEmpty()) {
                return true;
            }
            return false;
        }
        
        //Check if the notes of an existing version have been edited.
        Version selectedVersion = versionManager
                .getVersionFromString(versionComboBox.getSelectedItem()
                .toString());
        return !notesTextArea.getText().trim().equals(selectedVersion
                .getVersionNotes());
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton closeButton;
    private javax.swing.JButton insertUpdateButton;
    private javax.swing.JLabel majorVersionLabel;
    private javax.swing.JTextField majorVersionTextField;
    private javax.swing.JLabel minorReleaseLabel;
    private javax.swing.JTextField minorReleaseTextField;
    private javax.swing.JLabel minorVersionLabel;
    private javax.swing.JTextField minorVersionTextField;
    private javax.swing.JLabel notesLabel;
    private javax.swing.JScrollPane notesScrollPane;
    private javax.swing.JTextArea notesTextArea;
    private javax.swing.JLabel releaseDateLabel;
    private javax.swing.JLabel selectLabel;
    private javax.swing.JComboBox versionComboBox;
    // End of variables declaration//GEN-END:variables
}
