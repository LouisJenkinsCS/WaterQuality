package weather.common.utilities;

import java.io.File;
import java.io.IOException;
import java.util.concurrent.locks.ReentrantLock;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Provides logging capabilities to monitor and trace program execution.
 *
 * There is a logger for each system and multiple handlers for each logger.
 *
 * Messages may be sent to multiple files based on standard logging levels and
 * message content. For more information about log levels and how handlers work,
 * see <code>java.util.logging.Level</code> and
 * <code>http://java.sun.com/javase/6/docs/technotes/guides/logging/overview.html</code>.
 *
 * NOTE: Logger class is thread-safe, but making sure logs are initialized only
 *       once requires a lock.
 *
 * NOTE: Logs will be generated on the local computer where the program is run,
 *       therefore there are separate logs generated by the client and server.
 *
 * NOTE: To have the system log only severe errors, set LOG_LEVEL = Level.SEVERE
 *       and set the LOG_LEVELS array to only contain Level.SEVERE.
 *
 * @author Eric Subach (2010)
 * UPDATE: (2013) Brian Zaiser - added a (commented out) method, 
 * getDatabaseServerLog, added a type to the enum; per Curt Jones
 */
public class WeatherTracer {
    // Loggers for each system.
    private static Logger mainLog, retrievalLog, storageLog, movieLog, 
            watchdogLog, databaseServerLog;
    // Handlers for each system.
    private static FileHandler mainHandler,
                               retrievalInfo, retrievalFine, retrievalFinest, retrievalSevere,
                               storageHandler,
                               movieHandler,
                               watchdogInfo, watchdogFine, watchdogFinest, watchdogSevere,
                               databaseServerHandler;

    // Base file paths.
    //private static String mainBase, retrievalBase, storageBase, movieBase, watchdogBase;
    // Max bytes per log file.
    private static int mainMax, retrievalMax, storageMax, movieMax, watchdogMax, databaseServerMax;
    // Number of log files in rotation.
    private static int mainFiles, retrievalFiles, storageFiles, movieFiles, watchdogFiles, databaseServerFiles;
    // File suffix.
    private static final String SUFFIX = "log";
    // Subdirectory to hold the logs.
    private static final String SUBDIR = "logs/WeatherLogging";

    // Have logs been instantiated.
    private static boolean instantiated;
    // File seperator character (different OS's use different chars).
    private static final String FILE_SEP = "/";

    // The base log level of the logger. Only message with levels higher than or
    // equal to this value will be passed on to the attached handlers.
    private static final Level LOG_LEVEL = Level.ALL;
    // Have seperate log files for these levels.
    private static final Level[] LOG_LEVELS = { Level.SEVERE,
                                                //Level.WARNING,
                                                //Level.CONFIG,
                                                //Level.INFO,
                                                //Level.FINE,
                                                //Level.FINER,
                                                Level.FINEST };

    public static enum LogType {
        MAIN ("", "Main"),
        RETRIEVAL ("RetrievalSystem", "Retrieval"),
        STORAGE ("StorageSystem", "Storage"),
        MOVIE ("MovieSystem", "Movie"),
        WATCHDOG ("ServerWatchdog", "Watchdog"),
        DATABASE_SERVER("DatabaseServer", "Database");

        // Base path for log.
        private String basePath;
        // Base name for log file, excluding levels.
        private String baseName;

        
        public String getBasePath () {
            return (basePath);
        }

        public String getBaseName () {
            return (baseName);
        }

        LogType (String basePath, String baseName) {
            this.basePath = basePath;
            this.baseName = baseName;
        }
    }

    // Locks for each log type and for constructor.
    private static ReentrantLock lock = new ReentrantLock (),
                                 mainLock,
                                 retrievalLock,
                                 storageLock,
                                 watchdogLock,
                                 databaseServerLock;


    private Logger log;
    // Whether the log is on or off.
    private boolean isLogging;
    // Name of the class issuing log statements.
    private String className;


    //@TODO JavaDocs
    private WeatherTracer (WeatherTracer.LogType type, String name) {
        // If first time being called, instantiate all variables.

        // This must be locked to avoid being called multiple times.
        lock.lock ();

        try {
            if (!instantiated) {
                instantiated = true;

                // Set max bytes per log file.
                movieMax = 1048597;
                retrievalMax = 1048597;
                storageMax = 1048597;
                watchdogMax = 1048597;
                databaseServerMax = 1048597;

                // Set number of files in rotation.
                movieFiles = 5;
                retrievalFiles = 5;
                storageFiles = 5;
                watchdogFiles = 5;
                databaseServerFiles = 5;

                Debug.println ("Initializing loggers.");
                initializeLoggers ();

                Debug.println ("Instantiating handlers.");
                // Instantiate handlers.
                try {
                    addHandlers (WeatherTracer.LogType.MOVIE, movieMax, movieFiles, true);
                    addHandlers (WeatherTracer.LogType.RETRIEVAL, retrievalMax, retrievalFiles, true);
                    addHandlers (WeatherTracer.LogType.STORAGE, storageMax, storageFiles, true);
                    addHandlers (WeatherTracer.LogType.WATCHDOG, watchdogMax, watchdogFiles, true);
                    addHandlers (WeatherTracer.LogType.DATABASE_SERVER, databaseServerMax, databaseServerFiles, true);
                }
                // If there were any errors, log them with old logs and turn
                // logging off.
                catch (Exception e) {
                    Debug.println ("ERROR: Unable to open log files.");
                    e.printStackTrace();
                    WeatherLogger.log (Level.SEVERE, "Unable to open log files.", e);

                    isLogging = false;
                }

                // Set logger to use based on given type.
                switch (type) {
                    case MAIN:
                        log = mainLog;
                        break;
                    case RETRIEVAL:
                        log = retrievalLog;
                        break;
                    case STORAGE:
                        log = storageLog;
                        break;
                    case MOVIE:
                        log = movieLog;
                        break;
                    case WATCHDOG:
                        log = watchdogLog;
                        break;
                    case DATABASE_SERVER:
                        log = databaseServerLog;
                        break;
                }

                Debug.println ("Initialized logging system.");
                // Log setup of logging system.
                configPad ("Initialized logging system.");
            }
        }
        finally {
            lock.unlock ();
        }

        // Set name of calling class.
        className = name;

        // Set logger to use based on given type.
        switch (type) {
            case MAIN:
                log = mainLog;
                break;
            case RETRIEVAL:
                log = retrievalLog;
                break;
            case STORAGE:
                log = storageLog;
                break;
            case MOVIE:
                log = movieLog;
                break;
            case WATCHDOG:
                log = watchdogLog;
                break;
            case DATABASE_SERVER:
                log = databaseServerLog;
                break;
        }

        isLogging = true;
    }
    

    /*
    private WeatherTracer (LogType type, String name) {
        isLogging = false;
    }
    */


    private void initializeLoggers () {
        // Get loggers.
        movieLog = Logger.getLogger ("movie");
        retrievalLog = Logger.getLogger ("retrieval");
        storageLog = Logger.getLogger ("storage");
        watchdogLog = Logger.getLogger ("watchdog");
        databaseServerLog = Logger.getLogger("databaseServer");

        // Set log levels.
        movieLog.setLevel (LOG_LEVEL);
        retrievalLog.setLevel (LOG_LEVEL);
        storageLog.setLevel (LOG_LEVEL);
        watchdogLog.setLevel (LOG_LEVEL);
        databaseServerLog.setLevel(LOG_LEVEL);
        
        // Don't log to parents.
        movieLog.setUseParentHandlers (false);
        retrievalLog.setUseParentHandlers (false);
        storageLog.setUseParentHandlers (false);
        watchdogLog.setUseParentHandlers (false);
        databaseServerLog.setUseParentHandlers(false);
    }


    /**
     * Add file handlers to the log file of specified type.
     *
     * @param type Log type.
     * @param maxCharsPerFile Max characters per file before rotation.
     * @param numFilesRotate Number of files in rotation.
     * @param isAppend Flag to choose to append to already created files.
     * @throws IOException
     */
    private void addHandlers (WeatherTracer.LogType type, int maxCharsPerFile, int numFilesRotate, boolean isAppend) throws IOException {
        String fullPath;
        String dirPath;
        int i;
        int length;
        File file;
        FileHandler handler;
        Logger logger = null;


        length = LOG_LEVELS.length;

        // Set logger to use based on given type.
        switch (type) {
            case MAIN:
                logger = mainLog;
                break;
            case RETRIEVAL:
                logger = retrievalLog;
                break;
            case STORAGE:
                logger = storageLog;
                break;
            case MOVIE:
                logger = movieLog;
                break;
            case WATCHDOG:
                logger = watchdogLog;
                break;
            case DATABASE_SERVER:
                logger = databaseServerLog;
                break;
        }

        // Set up each handler to add to the logger.
        for (i = 0; i < length; i++) {
            // Get full path name. %g specifies log rotation number.
            //fullPath = FILE_SEP + type.getBasePath () + FILE_SEP + SUBDIR + FILE_SEP + type.getBaseName () + "." + LOG_LEVELS[i].getName ().toLowerCase () + ".%g." + SUFFIX;
            dirPath = FILE_SEP + SUBDIR + FILE_SEP + type.getBasePath () + FILE_SEP + type.getBaseName () + "." + LOG_LEVELS[i].getName ().toLowerCase ();
            fullPath = dirPath + FILE_SEP + "log%g." + SUFFIX;
            
            file = new File (dirPath);

            // Make directories if they do not exist.
            if (!file.exists ()) {
                file.mkdirs ();
            }

            try{
                handler = new FileHandler (fullPath, maxCharsPerFile, numFilesRotate, isAppend);

                // Set handler log level.
                handler.setLevel (LOG_LEVELS[i]);

                // Set handler format.
                handler.setFormatter (new WeatherLogFormatter ());

                // Add handler to logger.
                logger.addHandler (handler);
            }
            catch(IOException ioe){
                System.err.println(ioe);
                ioe.printStackTrace();
            }
        }
    }


    /*
    public WeatherLogging (String path, String name, LogType[] logs) {

    }
    */


    /**
     * Get the name of the class which is issuing the log statements.
     *
     * NOTE: This method must only be called within the getLog methods,
     *        otherwise it will work incorrectly.
     */
    private static String getCallingClassName () {
        StackTraceElement[] stack;
        String name;

        // Get stack trace and find class that called constructor of this class.
        try {
            stack = Thread.currentThread ().getStackTrace ();
            name = stack[3].getClassName ();
            
            // Strip package prefix.
            name = name.substring (name.lastIndexOf (".") + 1);
        }
        catch (Exception e) {
            name = "";
        }

        return (name);
    }

    /**
     * Get a logger for the DatabaseServer.
     * 
     * @return A logger for the DatabaseServer.
     */
    public static WeatherTracer getDatabaseServerLog() {
        String name = getCallingClassName();
        WeatherTracer newLog = new WeatherTracer(WeatherTracer.LogType.DATABASE_SERVER, name);
        
        return (newLog);
    } 

    /**
     * Get a logger for server watchdog.
     *
     * @return A logger for server watchdog.
     */
    public static WeatherTracer getWatchdogLog () {
        String name = getCallingClassName ();
        WeatherTracer newLog = new WeatherTracer (WeatherTracer.LogType.WATCHDOG, name);

        return (newLog);
    }


    /**
     * Get a logger for retrieval system.
     *
     * @return A logger for retrieval system.
     */
    public static WeatherTracer getRetrievalLog () {
        String name = getCallingClassName ();
        WeatherTracer newLog = new WeatherTracer (WeatherTracer.LogType.RETRIEVAL, name);

        return (newLog);
    }


    /**
     * Get a logger for storage system.
     *
     * @return A logger for storage system.
     */
    public static WeatherTracer getStorageLog () {
        String name = getCallingClassName ();
        WeatherTracer newLog = new WeatherTracer (WeatherTracer.LogType.STORAGE, name);

        return (newLog);
    }


    /**
     * Get a logger for movie maker system.
     *
     * @return A logger for movie maker system.
     */
    public static WeatherTracer getMovieLog () {
        String name = getCallingClassName ();
        WeatherTracer newLog = new WeatherTracer (WeatherTracer.LogType.MOVIE, name);

        return (newLog);
    }


    /**
     * Get main logger.
     *
     * @return Main logger.
     */
    public static WeatherTracer getMainLog () {
        String name = getCallingClassName ();
        WeatherTracer newLog = new WeatherTracer (WeatherTracer.LogType.MAIN, name);

        return (newLog);
    }


    /**
     * Log a severe message.
     */
    public void severe (String msg) {
        if (isLogging) {
            //log.severe (msg);
            log.logp (Level.SEVERE, className, null, msg);
        }
    }


    /**
     * Log a severe message with associated exception object.
     */
    public void severe (String msg, Throwable e) {
        if (isLogging) {
            //log.log (Level.SEVERE, msg, e);
            log.logp (Level.SEVERE, className, null, msg, e);
        }
    }


    /**
     * Log a warning message.
     */
    public void warning (String msg) {
        if (isLogging) {
            //log.warning (msg);
            log.logp (Level.WARNING, className, null, msg);
        }
    }

    /**
     * Log an info message.
     */
    public void info (String msg) {
        if (isLogging) {
            //log.info (msg);
            log.logp (Level.INFO, className, null, msg);
        }
    }

    /**
     * Log a config message.
     */
    public void config (String msg) {
        if (isLogging) {
            //log.config (msg);
            log.logp (Level.CONFIG, className, null, msg);
        }
    }

    /**
     * Log a config message with padding.
     */
    public void configPad (String msg) {
        if (isLogging) {
            //log.config ("====================");
            //log.config (msg);
            //log.config ("====================");
            log.logp (Level.CONFIG, "", null, "====================");
            log.logp (Level.CONFIG, "", null, msg);
            log.logp (Level.CONFIG, "", null, "====================");
        }
    }

    /**
     * Log a fine message.
     */
    public void fine (String msg) {
        if (isLogging) {
            //log.fine (msg);
            log.logp (Level.FINE, className, null, msg);
        }
    }

    /**
     * Log a finer message.
     */
    public void finer (String msg) {
        if (isLogging) {
            //log.finer (msg);
            log.logp (Level.FINER, className, null, msg);
        }
    }

    /**
     * Log a finest message.
     */
    public void finest (String msg) {
        if (isLogging) {
            //log.finest (msg);
            log.logp (Level.FINEST, className, null, msg);
        }
    }


    /**
     * Log a message.
     */
    public void log (Level level, String msg) {
        if (isLogging) {
            //log.log (level, msg);
            log.logp (level, className, null, msg);
        }
    }


    /**
     * Log a throwing message.
     */
    public void throwing(String sourceClass, String sourceMethod, Throwable thrown) {
        if (isLogging) {
            log.throwing (sourceClass, sourceMethod, thrown);
        }
    }


    /**
     * Log an entering message.
     */
    public void entering (String sourceClass, String sourceMethod) {
        if (isLogging) {
            log.entering (sourceClass, sourceMethod);
        }
    }

    /**
     * Log an exiting message.
     */
    public void exiting (String sourceClass, String sourceMethod) {
        if (isLogging) {
            log.exiting (sourceClass, sourceMethod);
        }
    }


    /*
    public static void logSingle (Level level, String message) {

    }


    public static void logSingle (Level level, String message, Exception e) {

    }
    */

    /**
     * Enable/disable logging.
     */
    public void setLogging (boolean value) {
        isLogging = value;
    }
}
