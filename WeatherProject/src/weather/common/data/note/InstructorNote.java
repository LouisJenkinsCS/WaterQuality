
package weather.common.data.note;

import weather.common.data.AccessRights;
import java.io.Serializable;
import java.sql.Date;

/**
 * This class represents an instructor note. Each instructor note has a number
 * that uniquely identifies it. This number is auto-generated by MySQL Server
 * when a record of a note is created in the notes table.  The noteNumber
 * is the primary key of the notes table. Each individual note contains a body
 * of text (text), a time range (startTime and endTime), an instructor number,
 * and access rights.
 *
 * @author Bloomsburg University Software Engineering
 * @author Chad Hall (2008)
 * @author Ioulia Lee (2010)
 * @version Spring 2010
 */
public class InstructorNote implements Serializable{

   /**
    * Determines if a de-serialized file is compatible with this class.
    *
    * Not necessary to include in first version of the class, but included here
    * as a reminder of its importance. Maintainers must change this value if
    * and only if the new version of this class is not compatible with old
    * versions.
    *
    * @see <a href="http://docs.oracle.com/javase/7/docs/platform/serialization/spec/serialTOC.html">Java specification for
    * serialization</a>
    */
    private static final long serialVersionUID = 1L;

    /**
     * The number of this note.
     * This number uniquely identifies instances of this class throughout
     * the program and in the database.
     */
    private int noteNumber;

    /**
     * The title of the note.
     */
    private String noteTitle;

    /**
     * The day and the time this note becomes active.
     */
    private Date startTime;

    /**
     * The day and the time this note is no longer active.
     */
    private Date endTime;

    /**
     * The number of the instructor who created this note.
     */
    private int instructorNumber;

    /**
     * A type of access this note has.
     */
    private AccessRights accessRights;

    /**
     * Holds the body of this note.
     */
    private String text;
    
    /**
     * The number of the camera resource selected for this note.
     */
    private int cameraNumber;
    
    /**
     * The number of the station resource selected for this note.
     */
    private int stationNumber;

    /**
     * The default constructor for the Note class creates a new instance of
     * Note and sets its default values. The noteNumber is set to -1 meaning
     * that this number is not yet specified.
     */
    public InstructorNote() {
        this.noteNumber = -1;
        this.noteTitle = null;
        this.startTime = null;
        this.endTime = null;
        this.instructorNumber = 0;
        this.accessRights = AccessRights.Everyone;
        this.text = null;
        this.cameraNumber = 0;
        this.stationNumber = 0;
    }

    /**
     * Creates an instance of the InstructorNote and then sets its value to
     * those that are passed to it.
     *
     * @param noteNumber The number of the InstructorNote.
     * @param noteTitle The title of the note.
     * @param startTime The time the note was started.
     * @param endTime The time the note was ended.
     * @param instructorNumber The number of the instructor who wrote the note.
     * @param accessRights The access rights of this note.
     * @param text The actual notes that the instructor wrote.
     * @param cameraNumber The camera number of the InstructorNote.
     * @param stationNumber The station number of the InstructorNote.
     */
    public InstructorNote(int noteNumber, String noteTitle, Date startTime, 
            Date endTime, int instructorNumber, AccessRights accessRights, 
            String text, int cameraNumber, int stationNumber) {
        this.noteNumber = noteNumber;
        this.noteTitle = noteTitle;
        this.startTime = startTime;
        this.endTime = endTime;
        this.instructorNumber = instructorNumber;
        this.accessRights = accessRights;
        this.text = text;
        this.cameraNumber = cameraNumber;
        this.stationNumber = stationNumber;
    }
    
    /**
     * Retrieves the number of this note.
     *
     * @return The number of this note.
     */
    public int getNoteNumber() {
        return noteNumber;
    }

    /**
     * Assigns a number to this note.
     *
     * @param number The number to assign to this note.
     */
    public void setNoteNumber(int number) {
        this.noteNumber = number;
    }

    /**
     * Retrieves the title of this note.
     *
     * @return The note's title.
     */
    public String getNoteTitle() {
        return noteTitle;
    }

    /**
     * Assigns a title to this note.
     *
     * @param noteTitle The note's title.
     */
    public void setNoteTitle(String noteTitle) {
        this.noteTitle = noteTitle;
    }

    /**
     * Retrieves the start time of this note.
     *
     * @return The start time of this note.
     */
    public Date getStartTime() {
        return startTime;
    }

    /**
     * Assigns the start time of this note.
     *
     * @param startTime The time to assign as the start time of this note.
     */
    public void setStartTime(Date startTime) {
        this.startTime = startTime;
    }

    /**
     * Retrieves the end time of this note.
     *
     * @return The end time of this note.
     */
    public Date getEndTime() {
        return endTime;
    }

    /**
     * Assigns the end time of this note.
     *
     * @param endTime The time to assign as the end time for this note.
     */
    public void setEndTime(Date endTime) {
        this.endTime = endTime;
    }

    /**
     * Retrieves the number of the instructor who wrote this note.
     *
     * @return The instructor who wrote this note.
     */
    public int getInstructorNumber() {
        return instructorNumber;
    }

    /**
     * Assigns the instructor number to this note.
     *
     * @param instructorNumber The number of the instructor to assign to this
     *      note.
     */
    public void setInstructorNumber(int instructorNumber) {
        this.instructorNumber = instructorNumber;
    }

    /**
     * Retrieves the access rights of this note.
     *
     * @return The access rights of this note.
     */
    public AccessRights getAccessRights() {
        return accessRights;
    }

    /**
     * Assigns the access rights of this note.
     *
     * @param accessRights The access rights to assign to this note.
     */
    public void setAccessRights(AccessRights accessRights) {
        this.accessRights = accessRights;
    }

    /**
     * Retrieves the body of this note.
     *
     * @return the body of this note.
     */
    public String getText() {
        return text;
    }

    /**
     * Assigns a body to this note.
     *
     * @param text The body to assign to this note.
     */
    public void setText(String text) {
        this.text = text;
    }
    
    /**
     * Retrieves the camera number of this note.
     *
     * @return The camera number of this note.
     */
    public int getCameraNumber() {
        return cameraNumber;
    }

    /**
     * Assigns a camera number to this note.
     *
     * @param number The camera number to assign to this note.
     */
    public void setCameraNumber(int number) {
        this.cameraNumber = number;
    }
    
    /**
     * Retrieves the station number of this note.
     *
     * @return The station number of this note.
     */
    public int getStationNumber() {
        return stationNumber;
    }

    /**
     * Assigns a station number to this note.
     *
     * @param number The station number to assign to this note.
     */
    public void setStationNumber(int number) {
        this.stationNumber = number;
    }

    /**
     * Returns the number of this note representing the hash code of this object.
     *
     * @return The number of this note.
     */
    @Override
    public int hashCode() {
        return noteNumber;
    }

    /**
     * Determines whether the given object is equal to this Note.
     *
     * @param obj The object to compare to this InstructorNote.
     * @return True if and only if the given object is equal to this InstructorNote.
     */
    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final InstructorNote other = (InstructorNote) obj;
        if (this.noteNumber != other.noteNumber) {
            return false;
        }
        return true;
    }
    
    /**
     * Compares two instructor notes. If this InstructorNote's noteNumber is less than <i>obj</i>'s noteNumber, -1 is returned. 
     * If it is greater returns 1,otherwise return 0.
     * @param obj The InstructorNote object to compare this InstructorNote to.
     * @return An integer value describing this InstructorNote's note number relative to <i>obj</i>'s note number.
     */

    public int compareTo(Object obj) {
        if (obj == null || getClass() != obj.getClass()) {
            return 0;
        }
        final InstructorNote other = (InstructorNote) obj;

        if (noteNumber < other.noteNumber) {
            return -1;
        } else if (noteNumber == other.noteNumber) {
            return 0;
        } else {
            return 1;
        }
    }
}
